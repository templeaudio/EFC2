
EFC2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800952c  0800952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095c4  080095c4  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095cc  080095cc  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095cc  080095cc  000195cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095d0  080095d0  000195d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  080095d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b70  20000120  080096f4  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c90  080096f4  00020c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001336d  00000000  00000000  00020193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f14  00000000  00000000  00033500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  00036418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1f  00000000  00000000  000372d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220b5  00000000  00000000  00037def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123a4  00000000  00000000  00059ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3943  00000000  00000000  0006c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b74  00000000  00000000  0012fb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00133700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000120 	.word	0x20000120
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009514 	.word	0x08009514

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000124 	.word	0x20000124
 80001c8:	08009514 	.word	0x08009514

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fbe4 	bl	8000c9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f9f5 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fa6b 	bl	80009b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 fa39 	bl	8000950 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004de:	f008 fb35 	bl	8008b4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* Init Device Library */
  USBD_Init(&USBD_Device, &FS_Desc, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	49be      	ldr	r1, [pc, #760]	; (80007e0 <main+0x318>)
 80004e6:	48bf      	ldr	r0, [pc, #764]	; (80007e4 <main+0x31c>)
 80004e8:	f007 f8bc 	bl	8007664 <USBD_Init>

  /* Register the HID class */
  USBD_RegisterClass(&USBD_Device, &USBD_HID);
 80004ec:	49be      	ldr	r1, [pc, #760]	; (80007e8 <main+0x320>)
 80004ee:	48bd      	ldr	r0, [pc, #756]	; (80007e4 <main+0x31c>)
 80004f0:	f007 f8e8 	bl	80076c4 <USBD_RegisterClass>

  /* Start Device Process */
  USBD_Start(&USBD_Device);
 80004f4:	48bb      	ldr	r0, [pc, #748]	; (80007e4 <main+0x31c>)
 80004f6:	f007 f91b 	bl	8007730 <USBD_Start>
  //uint8_t shift_button = 0;
  //uint8_t alt_button = 0;
  //uint8_t super_button = 0;
  //uint8_t space_button = 0;

  uint8_t ctrl_state = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shift_state = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t alt_state = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t super_state = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

  uint8_t ctrl_state_prev = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	74bb      	strb	r3, [r7, #18]
  uint8_t shift_state_prev = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	747b      	strb	r3, [r7, #17]
  uint8_t alt_state_prev = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	743b      	strb	r3, [r7, #16]
  uint8_t super_state_prev = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	73fb      	strb	r3, [r7, #15]

  uint32_t ctrl_last_pressed = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t shift_last_pressed = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t alt_last_pressed = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	623b      	str	r3, [r7, #32]
  uint32_t super_last_pressed = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
  uint32_t latching_last_pressed = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	61bb      	str	r3, [r7, #24]
  //uint8_t space_state = 0;

  uint8_t kbd_buffer[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000536:	4aad      	ldr	r2, [pc, #692]	; (80007ec <main+0x324>)
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800053e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint32_t last_USB_send = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  uint8_t latching_state = 1;
 8000546:	2301      	movs	r3, #1
 8000548:	74fb      	strb	r3, [r7, #19]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  	  {
	  ctrl_state_prev = ctrl_state;
 800054a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800054e:	74bb      	strb	r3, [r7, #18]
	  shift_state_prev = shift_state;
 8000550:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000554:	747b      	strb	r3, [r7, #17]
	  alt_state_prev = alt_state;
 8000556:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800055a:	743b      	strb	r3, [r7, #16]
	  super_state_prev = super_state;
 800055c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000560:	73fb      	strb	r3, [r7, #15]
	  kbd_buffer[2] = 0x0;
 8000562:	2300      	movs	r3, #0
 8000564:	71bb      	strb	r3, [r7, #6]
	  //Latching Button
	  //--------------

	  //A6

	  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0) && (HAL_GetTick() - latching_last_pressed > 150))
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f000 feaa 	bl	80012c4 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d11c      	bne.n	80005b0 <main+0xe8>
 8000576:	f000 fbf9 	bl	8000d6c <HAL_GetTick>
 800057a:	4602      	mov	r2, r0
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	1ad3      	subs	r3, r2, r3
 8000580:	2b96      	cmp	r3, #150	; 0x96
 8000582:	d915      	bls.n	80005b0 <main+0xe8>
	  {

		  latching_state = !latching_state;
 8000584:	7cfb      	ldrb	r3, [r7, #19]
 8000586:	2b00      	cmp	r3, #0
 8000588:	bf0c      	ite	eq
 800058a:	2301      	moveq	r3, #1
 800058c:	2300      	movne	r3, #0
 800058e:	b2db      	uxtb	r3, r3
 8000590:	74fb      	strb	r3, [r7, #19]
		  latching_last_pressed = HAL_GetTick();
 8000592:	f000 fbeb 	bl	8000d6c <HAL_GetTick>
 8000596:	61b8      	str	r0, [r7, #24]
		  ctrl_state = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  shift_state = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		  alt_state = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		  super_state = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	  //Control Button
	  //--------------

	  //D4

	  if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0) && (HAL_GetTick() - ctrl_last_pressed > 150))
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	488f      	ldr	r0, [pc, #572]	; (80007f0 <main+0x328>)
 80005b4:	f000 fe86 	bl	80012c4 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d13c      	bne.n	8000638 <main+0x170>
 80005be:	f000 fbd5 	bl	8000d6c <HAL_GetTick>
 80005c2:	4602      	mov	r2, r0
 80005c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	2b96      	cmp	r3, #150	; 0x96
 80005ca:	d935      	bls.n	8000638 <main+0x170>
	  {

		  ctrl_state = !ctrl_state;
 80005cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	bf0c      	ite	eq
 80005d4:	2301      	moveq	r3, #1
 80005d6:	2300      	movne	r3, #0
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  ctrl_last_pressed = HAL_GetTick();
 80005de:	f000 fbc5 	bl	8000d6c <HAL_GetTick>
 80005e2:	62b8      	str	r0, [r7, #40]	; 0x28
		  if (latching_state == 0)
 80005e4:	7cfb      	ldrb	r3, [r7, #19]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d126      	bne.n	8000638 <main+0x170>
		  {
			  kbd_buffer[0] = 0x01;
 80005ea:	2301      	movs	r3, #1
 80005ec:	713b      	strb	r3, [r7, #4]
			  USBD_HID_SendReport(&USBD_Device, kbd_buffer, 8);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2208      	movs	r2, #8
 80005f2:	4619      	mov	r1, r3
 80005f4:	487b      	ldr	r0, [pc, #492]	; (80007e4 <main+0x31c>)
 80005f6:	f006 ff91 	bl	800751c <USBD_HID_SendReport>
			  HAL_Delay(50); //debounce
 80005fa:	2032      	movs	r0, #50	; 0x32
 80005fc:	f000 fbc2 	bl	8000d84 <HAL_Delay>
			  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0); //wait for button to be released
 8000600:	bf00      	nop
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	487a      	ldr	r0, [pc, #488]	; (80007f0 <main+0x328>)
 8000606:	f000 fe5d 	bl	80012c4 <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0f8      	beq.n	8000602 <main+0x13a>
			  kbd_buffer[0] = 0x00;
 8000610:	2300      	movs	r3, #0
 8000612:	713b      	strb	r3, [r7, #4]
			  USBD_HID_SendReport(&USBD_Device, kbd_buffer, 8);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2208      	movs	r2, #8
 8000618:	4619      	mov	r1, r3
 800061a:	4872      	ldr	r0, [pc, #456]	; (80007e4 <main+0x31c>)
 800061c:	f006 ff7e 	bl	800751c <USBD_HID_SendReport>
			  HAL_Delay(50); //debounce
 8000620:	2032      	movs	r0, #50	; 0x32
 8000622:	f000 fbaf 	bl	8000d84 <HAL_Delay>

			  ctrl_state = !ctrl_state; //undo
 8000626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800062a:	2b00      	cmp	r3, #0
 800062c:	bf0c      	ite	eq
 800062e:	2301      	moveq	r3, #1
 8000630:	2300      	movne	r3, #0
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  //Shift Button
	  //--------------

	  //D9

	  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0) && (HAL_GetTick() - shift_last_pressed > 150))
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000640:	f000 fe40 	bl	80012c4 <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d13e      	bne.n	80006c8 <main+0x200>
 800064a:	f000 fb8f 	bl	8000d6c <HAL_GetTick>
 800064e:	4602      	mov	r2, r0
 8000650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	2b96      	cmp	r3, #150	; 0x96
 8000656:	d937      	bls.n	80006c8 <main+0x200>
	  {

		  shift_state = !shift_state;
 8000658:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800065c:	2b00      	cmp	r3, #0
 800065e:	bf0c      	ite	eq
 8000660:	2301      	moveq	r3, #1
 8000662:	2300      	movne	r3, #0
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		  shift_last_pressed = HAL_GetTick();
 800066a:	f000 fb7f 	bl	8000d6c <HAL_GetTick>
 800066e:	6278      	str	r0, [r7, #36]	; 0x24
		  if (latching_state == 0)
 8000670:	7cfb      	ldrb	r3, [r7, #19]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d128      	bne.n	80006c8 <main+0x200>
		  {
			  kbd_buffer[0] = 0x02;
 8000676:	2302      	movs	r3, #2
 8000678:	713b      	strb	r3, [r7, #4]
			  USBD_HID_SendReport(&USBD_Device, kbd_buffer, 8);
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2208      	movs	r2, #8
 800067e:	4619      	mov	r1, r3
 8000680:	4858      	ldr	r0, [pc, #352]	; (80007e4 <main+0x31c>)
 8000682:	f006 ff4b 	bl	800751c <USBD_HID_SendReport>
			  HAL_Delay(50); //debounce
 8000686:	2032      	movs	r0, #50	; 0x32
 8000688:	f000 fb7c 	bl	8000d84 <HAL_Delay>
			  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0); //wait for button to be released
 800068c:	bf00      	nop
 800068e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f000 fe15 	bl	80012c4 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0f6      	beq.n	800068e <main+0x1c6>
			  kbd_buffer[0] = 0x00;
 80006a0:	2300      	movs	r3, #0
 80006a2:	713b      	strb	r3, [r7, #4]
			  USBD_HID_SendReport(&USBD_Device, kbd_buffer, 8);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2208      	movs	r2, #8
 80006a8:	4619      	mov	r1, r3
 80006aa:	484e      	ldr	r0, [pc, #312]	; (80007e4 <main+0x31c>)
 80006ac:	f006 ff36 	bl	800751c <USBD_HID_SendReport>
			  HAL_Delay(50); //debounce
 80006b0:	2032      	movs	r0, #50	; 0x32
 80006b2:	f000 fb67 	bl	8000d84 <HAL_Delay>

			  shift_state = !shift_state; //undo
 80006b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	bf0c      	ite	eq
 80006be:	2301      	moveq	r3, #1
 80006c0:	2300      	movne	r3, #0
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  //Alt Button
	  //--------------

	  //D6

	  if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0) && (HAL_GetTick() - alt_last_pressed > 150))
 80006c8:	2102      	movs	r1, #2
 80006ca:	4849      	ldr	r0, [pc, #292]	; (80007f0 <main+0x328>)
 80006cc:	f000 fdfa 	bl	80012c4 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d13c      	bne.n	8000750 <main+0x288>
 80006d6:	f000 fb49 	bl	8000d6c <HAL_GetTick>
 80006da:	4602      	mov	r2, r0
 80006dc:	6a3b      	ldr	r3, [r7, #32]
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	2b96      	cmp	r3, #150	; 0x96
 80006e2:	d935      	bls.n	8000750 <main+0x288>
	  {

		  alt_state = !alt_state;
 80006e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	bf0c      	ite	eq
 80006ec:	2301      	moveq	r3, #1
 80006ee:	2300      	movne	r3, #0
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		  alt_last_pressed = HAL_GetTick();
 80006f6:	f000 fb39 	bl	8000d6c <HAL_GetTick>
 80006fa:	6238      	str	r0, [r7, #32]
		  if (latching_state == 0)
 80006fc:	7cfb      	ldrb	r3, [r7, #19]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d126      	bne.n	8000750 <main+0x288>
		  {
			  kbd_buffer[0] = 0x04;
 8000702:	2304      	movs	r3, #4
 8000704:	713b      	strb	r3, [r7, #4]
			  USBD_HID_SendReport(&USBD_Device, kbd_buffer, 8);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2208      	movs	r2, #8
 800070a:	4619      	mov	r1, r3
 800070c:	4835      	ldr	r0, [pc, #212]	; (80007e4 <main+0x31c>)
 800070e:	f006 ff05 	bl	800751c <USBD_HID_SendReport>
			  HAL_Delay(50); //debounce
 8000712:	2032      	movs	r0, #50	; 0x32
 8000714:	f000 fb36 	bl	8000d84 <HAL_Delay>
			  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0); //wait for button to be released
 8000718:	bf00      	nop
 800071a:	2102      	movs	r1, #2
 800071c:	4834      	ldr	r0, [pc, #208]	; (80007f0 <main+0x328>)
 800071e:	f000 fdd1 	bl	80012c4 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0f8      	beq.n	800071a <main+0x252>
			  kbd_buffer[0] = 0x00;
 8000728:	2300      	movs	r3, #0
 800072a:	713b      	strb	r3, [r7, #4]
			  USBD_HID_SendReport(&USBD_Device, kbd_buffer, 8);
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2208      	movs	r2, #8
 8000730:	4619      	mov	r1, r3
 8000732:	482c      	ldr	r0, [pc, #176]	; (80007e4 <main+0x31c>)
 8000734:	f006 fef2 	bl	800751c <USBD_HID_SendReport>
			  HAL_Delay(50); //debounce
 8000738:	2032      	movs	r0, #50	; 0x32
 800073a:	f000 fb23 	bl	8000d84 <HAL_Delay>

			  alt_state = !alt_state; //undo
 800073e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf0c      	ite	eq
 8000746:	2301      	moveq	r3, #1
 8000748:	2300      	movne	r3, #0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  //Super Button
	  //--------------

	  //A1

	  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) && (HAL_GetTick() - super_last_pressed > 150))
 8000750:	2102      	movs	r1, #2
 8000752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000756:	f000 fdb5 	bl	80012c4 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d149      	bne.n	80007f4 <main+0x32c>
 8000760:	f000 fb04 	bl	8000d6c <HAL_GetTick>
 8000764:	4602      	mov	r2, r0
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	2b96      	cmp	r3, #150	; 0x96
 800076c:	d942      	bls.n	80007f4 <main+0x32c>
	  {

		  super_state = !super_state;
 800076e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf0c      	ite	eq
 8000776:	2301      	moveq	r3, #1
 8000778:	2300      	movne	r3, #0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		  super_last_pressed = HAL_GetTick();
 8000780:	f000 faf4 	bl	8000d6c <HAL_GetTick>
 8000784:	61f8      	str	r0, [r7, #28]
		  if (latching_state == 0)
 8000786:	7cfb      	ldrb	r3, [r7, #19]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d133      	bne.n	80007f4 <main+0x32c>
		  {
			  kbd_buffer[0] = 0x08;
 800078c:	2308      	movs	r3, #8
 800078e:	713b      	strb	r3, [r7, #4]
			  USBD_HID_SendReport(&USBD_Device, kbd_buffer, 8);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2208      	movs	r2, #8
 8000794:	4619      	mov	r1, r3
 8000796:	4813      	ldr	r0, [pc, #76]	; (80007e4 <main+0x31c>)
 8000798:	f006 fec0 	bl	800751c <USBD_HID_SendReport>
			  HAL_Delay(50); //debounce
 800079c:	2032      	movs	r0, #50	; 0x32
 800079e:	f000 faf1 	bl	8000d84 <HAL_Delay>
			  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0); //wait for button to be released
 80007a2:	bf00      	nop
 80007a4:	2102      	movs	r1, #2
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007aa:	f000 fd8b 	bl	80012c4 <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d0f7      	beq.n	80007a4 <main+0x2dc>
			  kbd_buffer[0] = 0x00;
 80007b4:	2300      	movs	r3, #0
 80007b6:	713b      	strb	r3, [r7, #4]
			  USBD_HID_SendReport(&USBD_Device, kbd_buffer, 8);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2208      	movs	r2, #8
 80007bc:	4619      	mov	r1, r3
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <main+0x31c>)
 80007c0:	f006 feac 	bl	800751c <USBD_HID_SendReport>
			  HAL_Delay(50); //debounce
 80007c4:	2032      	movs	r0, #50	; 0x32
 80007c6:	f000 fadd 	bl	8000d84 <HAL_Delay>

			  super_state = !super_state; //undo
 80007ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	bf0c      	ite	eq
 80007d2:	2301      	moveq	r3, #1
 80007d4:	2300      	movne	r3, #0
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80007dc:	e00a      	b.n	80007f4 <main+0x32c>
 80007de:	bf00      	nop
 80007e0:	200000c0 	.word	0x200000c0
 80007e4:	200001c4 	.word	0x200001c4
 80007e8:	2000000c 	.word	0x2000000c
 80007ec:	0800952c 	.word	0x0800952c
 80007f0:	48000400 	.word	0x48000400
	  //Space Button
	  //--------------

	  //A5

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0)
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f000 fd63 	bl	80012c4 <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d11e      	bne.n	8000842 <main+0x37a>
	  {
		  kbd_buffer[2] = 0x2c;
 8000804:	232c      	movs	r3, #44	; 0x2c
 8000806:	71bb      	strb	r3, [r7, #6]
		  USBD_HID_SendReport(&USBD_Device, kbd_buffer, 8);
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2208      	movs	r2, #8
 800080c:	4619      	mov	r1, r3
 800080e:	482b      	ldr	r0, [pc, #172]	; (80008bc <main+0x3f4>)
 8000810:	f006 fe84 	bl	800751c <USBD_HID_SendReport>
		  HAL_Delay(50); //debounce
 8000814:	2032      	movs	r0, #50	; 0x32
 8000816:	f000 fab5 	bl	8000d84 <HAL_Delay>
		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0); //wait for button to be released
 800081a:	bf00      	nop
 800081c:	2140      	movs	r1, #64	; 0x40
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f000 fd4f 	bl	80012c4 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0f7      	beq.n	800081c <main+0x354>
		  kbd_buffer[2] = 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	71bb      	strb	r3, [r7, #6]
		  USBD_HID_SendReport(&USBD_Device, kbd_buffer, 8);
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2208      	movs	r2, #8
 8000834:	4619      	mov	r1, r3
 8000836:	4821      	ldr	r0, [pc, #132]	; (80008bc <main+0x3f4>)
 8000838:	f006 fe70 	bl	800751c <USBD_HID_SendReport>
		  HAL_Delay(50); //debounce
 800083c:	2032      	movs	r0, #50	; 0x32
 800083e:	f000 faa1 	bl	8000d84 <HAL_Delay>

	  }

	  if ((ctrl_state != ctrl_state_prev) || (shift_state != shift_state_prev) || (alt_state != alt_state_prev) || (super_state != super_state_prev))
 8000842:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000846:	7cbb      	ldrb	r3, [r7, #18]
 8000848:	429a      	cmp	r2, r3
 800084a:	d10f      	bne.n	800086c <main+0x3a4>
 800084c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000850:	7c7b      	ldrb	r3, [r7, #17]
 8000852:	429a      	cmp	r2, r3
 8000854:	d10a      	bne.n	800086c <main+0x3a4>
 8000856:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800085a:	7c3b      	ldrb	r3, [r7, #16]
 800085c:	429a      	cmp	r2, r3
 800085e:	d105      	bne.n	800086c <main+0x3a4>
 8000860:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	429a      	cmp	r2, r3
 8000868:	f43f ae6f 	beq.w	800054a <main+0x82>
	  {
			kbd_buffer[0] = ctrl_state + shift_state*2 + alt_state*4 + super_state*8;
 800086c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	b2da      	uxtb	r2, r3
 8000874:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000878:	4413      	add	r3, r2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	b2da      	uxtb	r2, r3
 8000880:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000884:	4413      	add	r3, r2
 8000886:	b2db      	uxtb	r3, r3
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	b2da      	uxtb	r2, r3
 800088c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000890:	4413      	add	r3, r2
 8000892:	b2db      	uxtb	r3, r3
 8000894:	713b      	strb	r3, [r7, #4]

			if((HAL_GetTick() - last_USB_send) > 10)
 8000896:	f000 fa69 	bl	8000d6c <HAL_GetTick>
 800089a:	4602      	mov	r2, r0
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	2b0a      	cmp	r3, #10
 80008a2:	f67f ae52 	bls.w	800054a <main+0x82>
			{
				USBD_HID_SendReport(&USBD_Device, kbd_buffer, 8);
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2208      	movs	r2, #8
 80008aa:	4619      	mov	r1, r3
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <main+0x3f4>)
 80008ae:	f006 fe35 	bl	800751c <USBD_HID_SendReport>
				last_USB_send = HAL_GetTick();
 80008b2:	f000 fa5b 	bl	8000d6c <HAL_GetTick>
 80008b6:	6178      	str	r0, [r7, #20]
	  ctrl_state_prev = ctrl_state;
 80008b8:	e647      	b.n	800054a <main+0x82>
 80008ba:	bf00      	nop
 80008bc:	200001c4 	.word	0x200001c4

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b096      	sub	sp, #88	; 0x58
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2244      	movs	r2, #68	; 0x44
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f008 fdf4 	bl	80094bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	463b      	mov	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008e6:	f002 fa91 	bl	8002e0c <HAL_PWREx_ControlVoltageScaling>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008f0:	f000 f8d0 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80008f4:	2322      	movs	r3, #34	; 0x22
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008fe:	2301      	movs	r3, #1
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000902:	2310      	movs	r3, #16
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000906:	2300      	movs	r3, #0
 8000908:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4618      	mov	r0, r3
 8000910:	f002 fae2 	bl	8002ed8 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800091a:	f000 f8bb 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000922:	2301      	movs	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fee2 	bl	8003700 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000942:	f000 f8a7 	bl	8000a94 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3758      	adds	r7, #88	; 0x58
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <MX_USART2_UART_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000994:	f003 fbc0 	bl	8004118 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 f879 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000013c 	.word	0x2000013c
 80009ac:	40004400 	.word	0x40004400

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4b31      	ldr	r3, [pc, #196]	; (8000a8c <MX_GPIO_Init+0xdc>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a30      	ldr	r2, [pc, #192]	; (8000a8c <MX_GPIO_Init+0xdc>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <MX_GPIO_Init+0xdc>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <MX_GPIO_Init+0xdc>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a2a      	ldr	r2, [pc, #168]	; (8000a8c <MX_GPIO_Init+0xdc>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <MX_GPIO_Init+0xdc>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <MX_GPIO_Init+0xdc>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	4a24      	ldr	r2, [pc, #144]	; (8000a8c <MX_GPIO_Init+0xdc>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_GPIO_Init+0xdc>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2108      	movs	r1, #8
 8000a12:	481f      	ldr	r0, [pc, #124]	; (8000a90 <MX_GPIO_Init+0xe0>)
 8000a14:	f000 fc6e 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000a18:	f240 73fa 	movw	r3, #2042	; 0x7fa
 8000a1c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f000 fade 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a34:	2301      	movs	r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	4619      	mov	r1, r3
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <MX_GPIO_Init+0xe0>)
 8000a4a:	f000 fad1 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000a4e:	23f2      	movs	r3, #242	; 0xf2
 8000a50:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <MX_GPIO_Init+0xe0>)
 8000a62:	f000 fac5 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a66:	2308      	movs	r3, #8
 8000a68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_GPIO_Init+0xe0>)
 8000a7e:	f000 fab7 	bl	8000ff0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	3720      	adds	r7, #32
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000400 	.word	0x48000400

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x44>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09e      	sub	sp, #120	; 0x78
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	2254      	movs	r2, #84	; 0x54
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f008 fcd7 	bl	80094bc <memset>
  if(huart->Instance==USART2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a28      	ldr	r2, [pc, #160]	; (8000bb4 <HAL_UART_MspInit+0xcc>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d148      	bne.n	8000baa <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4618      	mov	r0, r3
 8000b26:	f003 f80f 	bl	8003b48 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b30:	f7ff ffb0 	bl	8000a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b34:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <HAL_UART_MspInit+0xd0>)
 8000b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b38:	4a1f      	ldr	r2, [pc, #124]	; (8000bb8 <HAL_UART_MspInit+0xd0>)
 8000b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <HAL_UART_MspInit+0xd0>)
 8000b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_UART_MspInit+0xd0>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b50:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <HAL_UART_MspInit+0xd0>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_UART_MspInit+0xd0>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b64:	2304      	movs	r3, #4
 8000b66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b74:	2307      	movs	r3, #7
 8000b76:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f000 fa35 	bl	8000ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b8a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f000 fa23 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3778      	adds	r7, #120	; 0x78
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40004400 	.word	0x40004400
 8000bb8:	40021000 	.word	0x40021000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 f89c 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <USB_IRQHandler+0x10>)
 8000c16:	f000 fcad 	bl	8001574 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000984 	.word	0x20000984

08000c24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c4c:	f7ff ffea 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c76:	f008 fc29 	bl	80094cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7a:	f7ff fc25 	bl	80004c8 <main>

08000c7e <LoopForever>:

LoopForever:
    b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8000c8c:	080095d4 	.word	0x080095d4
  ldr r2, =_sbss
 8000c90:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8000c94:	20000c90 	.word	0x20000c90

08000c98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_IRQHandler>

08000c9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f961 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f80e 	bl	8000ccc <HAL_InitTick>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	e001      	b.n	8000cc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cbc:	f7ff fef0 	bl	8000aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <HAL_InitTick+0x6c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d023      	beq.n	8000d28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_InitTick+0x70>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_InitTick+0x6c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f96d 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10f      	bne.n	8000d22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d809      	bhi.n	8000d1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d10:	f000 f937 	bl	8000f82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_InitTick+0x74>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e007      	b.n	8000d2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	e004      	b.n	8000d2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	e001      	b.n	8000d2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	200004a0 	.word	0x200004a0

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200004a0 	.word	0x200004a0

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff ffee 	bl	8000d6c <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_Delay+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000daa:	bf00      	nop
 8000dac:	f7ff ffde 	bl	8000d6c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff29 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff3e 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff8e 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff31 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffa2 	bl	8000f28 <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffe:	e148      	b.n	8001292 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	2101      	movs	r1, #1
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 813a 	beq.w	800128c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d005      	beq.n	8001030 <HAL_GPIO_Init+0x40>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d130      	bne.n	8001092 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001066:	2201      	movs	r2, #1
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	091b      	lsrs	r3, r3, #4
 800107c:	f003 0201 	and.w	r2, r3, #1
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b03      	cmp	r3, #3
 800109c:	d017      	beq.n	80010ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d123      	bne.n	8001122 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3208      	adds	r2, #8
 80010e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	691a      	ldr	r2, [r3, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	08da      	lsrs	r2, r3, #3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3208      	adds	r2, #8
 800111c:	6939      	ldr	r1, [r7, #16]
 800111e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0203 	and.w	r2, r3, #3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 8094 	beq.w	800128c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001164:	4b52      	ldr	r3, [pc, #328]	; (80012b0 <HAL_GPIO_Init+0x2c0>)
 8001166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001168:	4a51      	ldr	r2, [pc, #324]	; (80012b0 <HAL_GPIO_Init+0x2c0>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6613      	str	r3, [r2, #96]	; 0x60
 8001170:	4b4f      	ldr	r3, [pc, #316]	; (80012b0 <HAL_GPIO_Init+0x2c0>)
 8001172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800117c:	4a4d      	ldr	r2, [pc, #308]	; (80012b4 <HAL_GPIO_Init+0x2c4>)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011a6:	d00d      	beq.n	80011c4 <HAL_GPIO_Init+0x1d4>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a43      	ldr	r2, [pc, #268]	; (80012b8 <HAL_GPIO_Init+0x2c8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d007      	beq.n	80011c0 <HAL_GPIO_Init+0x1d0>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a42      	ldr	r2, [pc, #264]	; (80012bc <HAL_GPIO_Init+0x2cc>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d101      	bne.n	80011bc <HAL_GPIO_Init+0x1cc>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e004      	b.n	80011c6 <HAL_GPIO_Init+0x1d6>
 80011bc:	2307      	movs	r3, #7
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x1d6>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <HAL_GPIO_Init+0x1d6>
 80011c4:	2300      	movs	r3, #0
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	f002 0203 	and.w	r2, r2, #3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4093      	lsls	r3, r2
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d6:	4937      	ldr	r1, [pc, #220]	; (80012b4 <HAL_GPIO_Init+0x2c4>)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e4:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001208:	4a2d      	ldr	r2, [pc, #180]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001232:	4a23      	ldr	r2, [pc, #140]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800125c:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa22 f303 	lsr.w	r3, r2, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	f47f aeaf 	bne.w	8001000 <HAL_GPIO_Init+0x10>
  }
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000
 80012b8:	48000400 	.word	0x48000400
 80012bc:	48000800 	.word	0x48000800
 80012c0:	40010400 	.word	0x40010400

080012c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e001      	b.n	80012e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001310:	e002      	b.n	8001318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	b08b      	sub	sp, #44	; 0x2c
 8001328:	af06      	add	r7, sp, #24
 800132a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0f8      	b.n	8001528 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f007 fd46 	bl	8008ddc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f003 fb92 	bl	8004a86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	687e      	ldr	r6, [r7, #4]
 800136a:	466d      	mov	r5, sp
 800136c:	f106 0410 	add.w	r4, r6, #16
 8001370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	602b      	str	r3, [r5, #0]
 8001378:	1d33      	adds	r3, r6, #4
 800137a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800137c:	6838      	ldr	r0, [r7, #0]
 800137e:	f003 fb5a 	bl	8004a36 <USB_CoreInit>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2202      	movs	r2, #2
 800138c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0c9      	b.n	8001528 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f003 fb8e 	bl	8004abc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e040      	b.n	8001428 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	3301      	adds	r3, #1
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	440b      	add	r3, r1
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	440b      	add	r3, r1
 80013e0:	3303      	adds	r3, #3
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	3338      	adds	r3, #56	; 0x38
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	440b      	add	r3, r1
 8001408:	333c      	adds	r3, #60	; 0x3c
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	440b      	add	r3, r1
 800141c:	3340      	adds	r3, #64	; 0x40
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	3301      	adds	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	429a      	cmp	r2, r3
 8001430:	d3b9      	bcc.n	80013a6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e044      	b.n	80014c2 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	f203 1369 	addw	r3, r3, #361	; 0x169
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	440b      	add	r3, r1
 8001488:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	3301      	adds	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d3b5      	bcc.n	8001438 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	687e      	ldr	r6, [r7, #4]
 80014d4:	466d      	mov	r5, sp
 80014d6:	f106 0410 	add.w	r4, r6, #16
 80014da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	602b      	str	r3, [r5, #0]
 80014e2:	1d33      	adds	r3, r6, #4
 80014e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e6:	6838      	ldr	r0, [r7, #0]
 80014e8:	f003 faf5 	bl	8004ad6 <USB_DevInit>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2202      	movs	r2, #2
 80014f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e014      	b.n	8001528 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d102      	bne.n	800151c <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f001 fc40 	bl	8002d9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f005 fd85 	bl	8007030 <USB_DevDisconnect>

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001530 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_PCD_Start+0x16>
 8001542:	2302      	movs	r3, #2
 8001544:	e012      	b.n	800156c <HAL_PCD_Start+0x3c>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fa80 	bl	8004a58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f005 fd50 	bl	8007002 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f005 fd6a 	bl	800705a <USB_ReadInterrupts>
 8001586:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 fafb 	bl	8001b8e <PCD_EP_ISR_Handler>

    return;
 8001598:	e110      	b.n	80017bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d013      	beq.n	80015cc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015b6:	b292      	uxth	r2, r2
 80015b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f007 fc9e 	bl	8008efe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015c2:	2100      	movs	r1, #0
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f8fc 	bl	80017c2 <HAL_PCD_SetAddress>

    return;
 80015ca:	e0f7      	b.n	80017bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00c      	beq.n	80015f0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015de:	b29a      	uxth	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015e8:	b292      	uxth	r2, r2
 80015ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015ee:	e0e5      	b.n	80017bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00c      	beq.n	8001614 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001602:	b29a      	uxth	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800160c:	b292      	uxth	r2, r2
 800160e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001612:	e0d3      	b.n	80017bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d034      	beq.n	8001688 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0204 	bic.w	r2, r2, #4
 8001630:	b292      	uxth	r2, r2
 8001632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800163e:	b29a      	uxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0208 	bic.w	r2, r2, #8
 8001648:	b292      	uxth	r2, r2
 800164a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001654:	2b01      	cmp	r3, #1
 8001656:	d107      	bne.n	8001668 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001660:	2100      	movs	r1, #0
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f007 fed6 	bl	8009414 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f007 fc81 	bl	8008f70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001676:	b29a      	uxth	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001680:	b292      	uxth	r2, r2
 8001682:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001686:	e099      	b.n	80017bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800168e:	2b00      	cmp	r3, #0
 8001690:	d027      	beq.n	80016e2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800169a:	b29a      	uxth	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0208 	orr.w	r2, r2, #8
 80016a4:	b292      	uxth	r2, r2
 80016a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016bc:	b292      	uxth	r2, r2
 80016be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 0204 	orr.w	r2, r2, #4
 80016d4:	b292      	uxth	r2, r2
 80016d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f007 fc2e 	bl	8008f3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016e0:	e06c      	b.n	80017bc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d040      	beq.n	800176e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016fe:	b292      	uxth	r2, r2
 8001700:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d12b      	bne.n	8001766 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001716:	b29a      	uxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f042 0204 	orr.w	r2, r2, #4
 8001720:	b292      	uxth	r2, r2
 8001722:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800172e:	b29a      	uxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 0208 	orr.w	r2, r2, #8
 8001738:	b292      	uxth	r2, r2
 800173a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800174e:	b29b      	uxth	r3, r3
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800175c:	2101      	movs	r1, #1
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f007 fe58 	bl	8009414 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001764:	e02a      	b.n	80017bc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f007 fbe8 	bl	8008f3c <HAL_PCD_SuspendCallback>
    return;
 800176c:	e026      	b.n	80017bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00f      	beq.n	8001798 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001780:	b29a      	uxth	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800178a:	b292      	uxth	r2, r2
 800178c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f007 fba6 	bl	8008ee2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001796:	e011      	b.n	80017bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00c      	beq.n	80017bc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017b4:	b292      	uxth	r2, r2
 80017b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80017ba:	bf00      	nop
  }
}
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_PCD_SetAddress+0x1a>
 80017d8:	2302      	movs	r3, #2
 80017da:	e013      	b.n	8001804 <HAL_PCD_SetAddress+0x42>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f005 fbf0 	bl	8006fda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	4608      	mov	r0, r1
 8001816:	4611      	mov	r1, r2
 8001818:	461a      	mov	r2, r3
 800181a:	4603      	mov	r3, r0
 800181c:	70fb      	strb	r3, [r7, #3]
 800181e:	460b      	mov	r3, r1
 8001820:	803b      	strh	r3, [r7, #0]
 8001822:	4613      	mov	r3, r2
 8001824:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800182a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800182e:	2b00      	cmp	r3, #0
 8001830:	da0e      	bge.n	8001850 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2201      	movs	r2, #1
 800184c:	705a      	strb	r2, [r3, #1]
 800184e:	e00e      	b.n	800186e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	f003 0207 	and.w	r2, r3, #7
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	b2da      	uxtb	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800187a:	883a      	ldrh	r2, [r7, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	78ba      	ldrb	r2, [r7, #2]
 8001884:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001886:	78bb      	ldrb	r3, [r7, #2]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d102      	bne.n	8001892 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_PCD_EP_Open+0x94>
 800189c:	2302      	movs	r3, #2
 800189e:	e00e      	b.n	80018be <HAL_PCD_EP_Open+0xb2>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68f9      	ldr	r1, [r7, #12]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 f932 	bl	8004b18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80018bc:	7afb      	ldrb	r3, [r7, #11]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	da0e      	bge.n	80018f8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2201      	movs	r2, #1
 80018f4:	705a      	strb	r2, [r3, #1]
 80018f6:	e00e      	b.n	8001916 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	f003 0207 	and.w	r2, r3, #7
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	b2da      	uxtb	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_PCD_EP_Close+0x6a>
 800192c:	2302      	movs	r3, #2
 800192e:	e00e      	b.n	800194e <HAL_PCD_EP_Close+0x88>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68f9      	ldr	r1, [r7, #12]
 800193e:	4618      	mov	r0, r3
 8001940:	f003 fcae 	bl	80052a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	460b      	mov	r3, r1
 8001964:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001966:	7afb      	ldrb	r3, [r7, #11]
 8001968:	f003 0207 	and.w	r2, r3, #7
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2200      	movs	r2, #0
 800198e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2200      	movs	r2, #0
 8001994:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001996:	7afb      	ldrb	r3, [r7, #11]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	b2da      	uxtb	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6979      	ldr	r1, [r7, #20]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f003 fe66 	bl	800567a <USB_EPStartXfer>

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	460b      	mov	r3, r1
 80019c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c8:	7afb      	ldrb	r3, [r7, #11]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2201      	movs	r2, #1
 8001a02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a04:	7afb      	ldrb	r3, [r7, #11]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6979      	ldr	r1, [r7, #20]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fe2f 	bl	800567a <USB_EPStartXfer>

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	f003 0207 	and.w	r2, r3, #7
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d901      	bls.n	8001a44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e04c      	b.n	8001ade <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	da0e      	bge.n	8001a6a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2201      	movs	r2, #1
 8001a66:	705a      	strb	r2, [r3, #1]
 8001a68:	e00c      	b.n	8001a84 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a6a:	78fa      	ldrb	r2, [r7, #3]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_PCD_EP_SetStall+0x7e>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e01c      	b.n	8001ade <HAL_PCD_EP_SetStall+0xb8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68f9      	ldr	r1, [r7, #12]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f005 f992 	bl	8006ddc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d108      	bne.n	8001ad4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f005 fad3 	bl	800707a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	f003 020f 	and.w	r2, r3, #15
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d901      	bls.n	8001b04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e040      	b.n	8001b86 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	da0e      	bge.n	8001b2a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	705a      	strb	r2, [r3, #1]
 8001b28:	e00e      	b.n	8001b48 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	f003 0207 	and.w	r2, r3, #7
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_PCD_EP_ClrStall+0x82>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e00e      	b.n	8001b86 <HAL_PCD_EP_ClrStall+0xa0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f005 f981 	bl	8006e7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b096      	sub	sp, #88	; 0x58
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b96:	e3b1      	b.n	80022fc <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ba0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ba4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001bb2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f040 8173 	bne.w	8001ea2 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d150      	bne.n	8001c6a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bd8:	81fb      	strh	r3, [r7, #14]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	89fb      	ldrh	r3, [r7, #14]
 8001be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3328      	adds	r3, #40	; 0x28
 8001bf0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	441a      	add	r2, r3
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c28:	2100      	movs	r1, #0
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f007 f93f 	bl	8008eae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 835f 	beq.w	80022fc <PCD_EP_ISR_Handler+0x76e>
 8001c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 835a 	bne.w	80022fc <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b292      	uxth	r2, r2
 8001c5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c68:	e348      	b.n	80022fc <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c70:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d032      	beq.n	8001cee <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cbc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	f005 fa27 	bl	8007116 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	823b      	strh	r3, [r7, #16]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	8a3a      	ldrh	r2, [r7, #16]
 8001cde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ce2:	b292      	uxth	r2, r2
 8001ce4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f007 f8b4 	bl	8008e54 <HAL_PCD_SetupStageCallback>
 8001cec:	e306      	b.n	80022fc <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f280 8302 	bge.w	80022fc <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d04:	4013      	ands	r3, r2
 8001d06:	83fb      	strh	r3, [r7, #30]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	8bfa      	ldrh	r2, [r7, #30]
 8001d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d12:	b292      	uxth	r2, r2
 8001d14:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d019      	beq.n	8001d7a <PCD_EP_ISR_Handler+0x1ec>
 8001d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d015      	beq.n	8001d7a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d54:	6959      	ldr	r1, [r3, #20]
 8001d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d58:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f005 f9d9 	bl	8007116 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d66:	695a      	ldr	r2, [r3, #20]
 8001d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	441a      	add	r2, r3
 8001d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d70:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d72:	2100      	movs	r1, #0
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f007 f87f 	bl	8008e78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001d84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 82b5 	bne.w	80022fc <PCD_EP_ISR_Handler+0x76e>
 8001d92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001d9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001d9e:	f000 82ad 	beq.w	80022fc <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	4413      	add	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	801a      	strh	r2, [r3, #0]
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b3e      	cmp	r3, #62	; 0x3e
 8001dd8:	d91d      	bls.n	8001e16 <PCD_EP_ISR_Handler+0x288>
 8001dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	647b      	str	r3, [r7, #68]	; 0x44
 8001de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <PCD_EP_ISR_Handler+0x266>
 8001dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001df0:	3b01      	subs	r3, #1
 8001df2:	647b      	str	r3, [r7, #68]	; 0x44
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	029b      	lsls	r3, r3, #10
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	4313      	orrs	r3, r2
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	801a      	strh	r2, [r3, #0]
 8001e14:	e026      	b.n	8001e64 <PCD_EP_ISR_Handler+0x2d6>
 8001e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10a      	bne.n	8001e34 <PCD_EP_ISR_Handler+0x2a6>
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	801a      	strh	r2, [r3, #0]
 8001e32:	e017      	b.n	8001e64 <PCD_EP_ISR_Handler+0x2d6>
 8001e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	085b      	lsrs	r3, r3, #1
 8001e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <PCD_EP_ISR_Handler+0x2c0>
 8001e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	029b      	lsls	r3, r3, #10
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e74:	827b      	strh	r3, [r7, #18]
 8001e76:	8a7b      	ldrh	r3, [r7, #18]
 8001e78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e7c:	827b      	strh	r3, [r7, #18]
 8001e7e:	8a7b      	ldrh	r3, [r7, #18]
 8001e80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e84:	827b      	strh	r3, [r7, #18]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	8a7b      	ldrh	r3, [r7, #18]
 8001e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	8013      	strh	r3, [r2, #0]
 8001ea0:	e22c      	b.n	80022fc <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001eb6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f280 80f6 	bge.w	80020ac <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001eee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ef2:	b292      	uxth	r2, r2
 8001ef4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ef6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f0e:	7b1b      	ldrb	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d123      	bne.n	8001f5c <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f38:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001f3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 808e 	beq.w	8002062 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4c:	6959      	ldr	r1, [r3, #20]
 8001f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f50:	88da      	ldrh	r2, [r3, #6]
 8001f52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f56:	f005 f8de 	bl	8007116 <USB_ReadPMA>
 8001f5a:	e082      	b.n	8002062 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5e:	78db      	ldrb	r3, [r3, #3]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d10a      	bne.n	8001f7a <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f68:	461a      	mov	r2, r3
 8001f6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f9d3 	bl	8002318 <HAL_PCD_EP_DB_Receive>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001f78:	e073      	b.n	8002062 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f94:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	441a      	add	r2, r3
 8001fa6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d022      	beq.n	800201e <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ffc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002000:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002004:	2b00      	cmp	r3, #0
 8002006:	d02c      	beq.n	8002062 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200e:	6959      	ldr	r1, [r3, #20]
 8002010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002012:	891a      	ldrh	r2, [r3, #8]
 8002014:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002018:	f005 f87d 	bl	8007116 <USB_ReadPMA>
 800201c:	e021      	b.n	8002062 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002026:	b29b      	uxth	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	4413      	add	r3, r2
 8002038:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002042:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002046:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002054:	6959      	ldr	r1, [r3, #20]
 8002056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002058:	895a      	ldrh	r2, [r3, #10]
 800205a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800205e:	f005 f85a 	bl	8007116 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800206a:	441a      	add	r2, r3
 800206c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002078:	441a      	add	r2, r3
 800207a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800207e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <PCD_EP_ISR_Handler+0x504>
 8002086:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800208a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	429a      	cmp	r2, r3
 8002090:	d206      	bcs.n	80020a0 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	4619      	mov	r1, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f006 feed 	bl	8008e78 <HAL_PCD_DataOutStageCallback>
 800209e:	e005      	b.n	80020ac <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 fae7 	bl	800567a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80020ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80020b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8121 	beq.w	80022fc <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 80020ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80020e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80020fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002106:	b29b      	uxth	r3, r3
 8002108:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800210a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800210c:	78db      	ldrb	r3, [r3, #3]
 800210e:	2b01      	cmp	r3, #1
 8002110:	f040 80a2 	bne.w	8002258 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002116:	2200      	movs	r2, #0
 8002118:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800211a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800211c:	7b1b      	ldrb	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8093 	beq.w	800224a <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002124:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d046      	beq.n	80021be <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002132:	785b      	ldrb	r3, [r3, #1]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d126      	bne.n	8002186 <PCD_EP_ISR_Handler+0x5f8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	4413      	add	r3, r2
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
 8002150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	00da      	lsls	r2, r3, #3
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	4413      	add	r3, r2
 800215a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800215e:	623b      	str	r3, [r7, #32]
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800216a:	b29a      	uxth	r2, r3
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	801a      	strh	r2, [r3, #0]
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800217a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800217e:	b29a      	uxth	r2, r3
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	801a      	strh	r2, [r3, #0]
 8002184:	e061      	b.n	800224a <PCD_EP_ISR_Handler+0x6bc>
 8002186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002188:	785b      	ldrb	r3, [r3, #1]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d15d      	bne.n	800224a <PCD_EP_ISR_Handler+0x6bc>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219c:	b29b      	uxth	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a2:	4413      	add	r3, r2
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	00da      	lsls	r2, r3, #3
 80021ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ae:	4413      	add	r3, r2
 80021b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b8:	2200      	movs	r2, #0
 80021ba:	801a      	strh	r2, [r3, #0]
 80021bc:	e045      	b.n	800224a <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c6:	785b      	ldrb	r3, [r3, #1]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d126      	bne.n	800221a <PCD_EP_ISR_Handler+0x68c>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021da:	b29b      	uxth	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e0:	4413      	add	r3, r2
 80021e2:	637b      	str	r3, [r7, #52]	; 0x34
 80021e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	00da      	lsls	r2, r3, #3
 80021ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ec:	4413      	add	r3, r2
 80021ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fe:	b29a      	uxth	r2, r3
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	801a      	strh	r2, [r3, #0]
 8002204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800220e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002212:	b29a      	uxth	r2, r3
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	801a      	strh	r2, [r3, #0]
 8002218:	e017      	b.n	800224a <PCD_EP_ISR_Handler+0x6bc>
 800221a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d113      	bne.n	800224a <PCD_EP_ISR_Handler+0x6bc>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800222a:	b29b      	uxth	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002230:	4413      	add	r3, r2
 8002232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	00da      	lsls	r2, r3, #3
 800223a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800223c:	4413      	add	r3, r2
 800223e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
 8002244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002246:	2200      	movs	r2, #0
 8002248:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800224a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f006 fe2c 	bl	8008eae <HAL_PCD_DataInStageCallback>
 8002256:	e051      	b.n	80022fc <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002258:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d144      	bne.n	80022ee <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800226c:	b29b      	uxth	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	4413      	add	r3, r2
 800227e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002288:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800228c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002294:	429a      	cmp	r2, r3
 8002296:	d907      	bls.n	80022a8 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022a0:	1ad2      	subs	r2, r2, r3
 80022a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a4:	619a      	str	r2, [r3, #24]
 80022a6:	e002      	b.n	80022ae <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 80022a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80022ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	4619      	mov	r1, r3
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f006 fdf6 	bl	8008eae <HAL_PCD_DataInStageCallback>
 80022c2:	e01b      	b.n	80022fc <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80022c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022cc:	441a      	add	r2, r3
 80022ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80022d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022da:	441a      	add	r2, r3
 80022dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022de:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 f9c7 	bl	800567a <USB_EPStartXfer>
 80022ec:	e006      	b.n	80022fc <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80022ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80022f2:	461a      	mov	r2, r3
 80022f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f917 	bl	800252a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002304:	b29b      	uxth	r3, r3
 8002306:	b21b      	sxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	f6ff ac45 	blt.w	8001b98 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3758      	adds	r7, #88	; 0x58
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d07c      	beq.n	800242a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002338:	b29b      	uxth	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	4413      	add	r3, r2
 800234a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002354:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	8b7b      	ldrh	r3, [r7, #26]
 800235c:	429a      	cmp	r2, r3
 800235e:	d306      	bcc.n	800236e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	8b7b      	ldrh	r3, [r7, #26]
 8002366:	1ad2      	subs	r2, r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	619a      	str	r2, [r3, #24]
 800236c:	e002      	b.n	8002374 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d123      	bne.n	80023c4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	b29b      	uxth	r3, r3
 800238e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	833b      	strh	r3, [r7, #24]
 8002398:	8b3b      	ldrh	r3, [r7, #24]
 800239a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800239e:	833b      	strh	r3, [r7, #24]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	441a      	add	r2, r3
 80023ae:	8b3b      	ldrh	r3, [r7, #24]
 80023b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01f      	beq.n	800240e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e8:	82fb      	strh	r3, [r7, #22]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	441a      	add	r2, r3
 80023f8:	8afb      	ldrh	r3, [r7, #22]
 80023fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002406:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800240a:	b29b      	uxth	r3, r3
 800240c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800240e:	8b7b      	ldrh	r3, [r7, #26]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8085 	beq.w	8002520 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	6959      	ldr	r1, [r3, #20]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	891a      	ldrh	r2, [r3, #8]
 8002422:	8b7b      	ldrh	r3, [r7, #26]
 8002424:	f004 fe77 	bl	8007116 <USB_ReadPMA>
 8002428:	e07a      	b.n	8002520 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	4413      	add	r3, r2
 8002444:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800244e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	8b7b      	ldrh	r3, [r7, #26]
 8002456:	429a      	cmp	r2, r3
 8002458:	d306      	bcc.n	8002468 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	8b7b      	ldrh	r3, [r7, #26]
 8002460:	1ad2      	subs	r2, r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	619a      	str	r2, [r3, #24]
 8002466:	e002      	b.n	800246e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d123      	bne.n	80024be <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800248c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002490:	83fb      	strh	r3, [r7, #30]
 8002492:	8bfb      	ldrh	r3, [r7, #30]
 8002494:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002498:	83fb      	strh	r3, [r7, #30]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	441a      	add	r2, r3
 80024a8:	8bfb      	ldrh	r3, [r7, #30]
 80024aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d11f      	bne.n	8002508 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e2:	83bb      	strh	r3, [r7, #28]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	441a      	add	r2, r3
 80024f2:	8bbb      	ldrh	r3, [r7, #28]
 80024f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002500:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002504:	b29b      	uxth	r3, r3
 8002506:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002508:	8b7b      	ldrh	r3, [r7, #26]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6959      	ldr	r1, [r3, #20]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	895a      	ldrh	r2, [r3, #10]
 800251a:	8b7b      	ldrh	r3, [r7, #26]
 800251c:	f004 fdfb 	bl	8007116 <USB_ReadPMA>
    }
  }

  return count;
 8002520:	8b7b      	ldrh	r3, [r7, #26]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3720      	adds	r7, #32
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b0a4      	sub	sp, #144	; 0x90
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	4613      	mov	r3, r2
 8002536:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 81db 	beq.w	80028fa <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	4413      	add	r3, r2
 800255e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002568:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002574:	429a      	cmp	r2, r3
 8002576:	d907      	bls.n	8002588 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	699a      	ldr	r2, [r3, #24]
 800257c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002580:	1ad2      	subs	r2, r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	619a      	str	r2, [r3, #24]
 8002586:	e002      	b.n	800258e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 80b9 	bne.w	800270a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	785b      	ldrb	r3, [r3, #1]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d126      	bne.n	80025ee <HAL_PCD_EP_DB_Transmit+0xc4>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	4413      	add	r3, r2
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	00da      	lsls	r2, r3, #3
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	4413      	add	r3, r2
 80025c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	801a      	strh	r2, [r3, #0]
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	801a      	strh	r2, [r3, #0]
 80025ec:	e01a      	b.n	8002624 <HAL_PCD_EP_DB_Transmit+0xfa>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	785b      	ldrb	r3, [r3, #1]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d116      	bne.n	8002624 <HAL_PCD_EP_DB_Transmit+0xfa>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002604:	b29b      	uxth	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260a:	4413      	add	r3, r2
 800260c:	637b      	str	r3, [r7, #52]	; 0x34
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	00da      	lsls	r2, r3, #3
 8002614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002616:	4413      	add	r3, r2
 8002618:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800261c:	633b      	str	r3, [r7, #48]	; 0x30
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	2200      	movs	r2, #0
 8002622:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	785b      	ldrb	r3, [r3, #1]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d126      	bne.n	8002680 <HAL_PCD_EP_DB_Transmit+0x156>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002640:	b29b      	uxth	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	00da      	lsls	r2, r3, #3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4413      	add	r3, r2
 8002654:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002664:	b29a      	uxth	r2, r3
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	801a      	strh	r2, [r3, #0]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002678:	b29a      	uxth	r2, r3
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	e017      	b.n	80026b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d113      	bne.n	80026b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002690:	b29b      	uxth	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	4413      	add	r3, r2
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	00da      	lsls	r2, r3, #3
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	4413      	add	r3, r2
 80026a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026a8:	623b      	str	r3, [r7, #32]
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	2200      	movs	r2, #0
 80026ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f006 fbf9 	bl	8008eae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 82fa 	beq.w	8002cbc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e2:	82fb      	strh	r3, [r7, #22]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	441a      	add	r2, r3
 80026f2:	8afb      	ldrh	r3, [r7, #22]
 80026f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002704:	b29b      	uxth	r3, r3
 8002706:	8013      	strh	r3, [r2, #0]
 8002708:	e2d8      	b.n	8002cbc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d021      	beq.n	8002758 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800272a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	441a      	add	r2, r3
 8002740:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800274c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002754:	b29b      	uxth	r3, r3
 8002756:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800275e:	2b01      	cmp	r3, #1
 8002760:	f040 82ac 	bne.w	8002cbc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800276c:	441a      	add	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800277a:	441a      	add	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	6a1a      	ldr	r2, [r3, #32]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	429a      	cmp	r2, r3
 800278a:	d30b      	bcc.n	80027a4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	6a1a      	ldr	r2, [r3, #32]
 8002798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800279c:	1ad2      	subs	r2, r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	621a      	str	r2, [r3, #32]
 80027a2:	e017      	b.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d108      	bne.n	80027be <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80027ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027bc:	e00a      	b.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	785b      	ldrb	r3, [r3, #1]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d165      	bne.n	80028a8 <HAL_PCD_EP_DB_Transmit+0x37e>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f0:	4413      	add	r3, r2
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	00da      	lsls	r2, r3, #3
 80027fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fc:	4413      	add	r3, r2
 80027fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002802:	63bb      	str	r3, [r7, #56]	; 0x38
 8002804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280e:	b29a      	uxth	r2, r3
 8002810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002818:	2b3e      	cmp	r3, #62	; 0x3e
 800281a:	d91d      	bls.n	8002858 <HAL_PCD_EP_DB_Transmit+0x32e>
 800281c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	64bb      	str	r3, [r7, #72]	; 0x48
 8002824:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002832:	3b01      	subs	r3, #1
 8002834:	64bb      	str	r3, [r7, #72]	; 0x48
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29a      	uxth	r2, r3
 800283c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283e:	b29b      	uxth	r3, r3
 8002840:	029b      	lsls	r3, r3, #10
 8002842:	b29b      	uxth	r3, r3
 8002844:	4313      	orrs	r3, r2
 8002846:	b29b      	uxth	r3, r3
 8002848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800284c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002850:	b29a      	uxth	r2, r3
 8002852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002854:	801a      	strh	r2, [r3, #0]
 8002856:	e044      	b.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10a      	bne.n	8002876 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800286a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800286e:	b29a      	uxth	r2, r3
 8002870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002872:	801a      	strh	r2, [r3, #0]
 8002874:	e035      	b.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	64bb      	str	r3, [r7, #72]	; 0x48
 800287e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_PCD_EP_DB_Transmit+0x366>
 800288a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800288c:	3301      	adds	r3, #1
 800288e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29a      	uxth	r2, r3
 8002896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002898:	b29b      	uxth	r3, r3
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	b29b      	uxth	r3, r3
 800289e:	4313      	orrs	r3, r2
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	e01c      	b.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	785b      	ldrb	r3, [r3, #1]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d118      	bne.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	647b      	str	r3, [r7, #68]	; 0x44
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c4:	4413      	add	r3, r2
 80028c6:	647b      	str	r3, [r7, #68]	; 0x44
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	00da      	lsls	r2, r3, #3
 80028ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d0:	4413      	add	r3, r2
 80028d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028d6:	643b      	str	r3, [r7, #64]	; 0x40
 80028d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028dc:	b29a      	uxth	r2, r3
 80028de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	6959      	ldr	r1, [r3, #20]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	891a      	ldrh	r2, [r3, #8]
 80028ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f004 fbcd 	bl	8007092 <USB_WritePMA>
 80028f8:	e1e0      	b.n	8002cbc <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002902:	b29b      	uxth	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	4413      	add	r3, r2
 8002914:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800292a:	429a      	cmp	r2, r3
 800292c:	d307      	bcc.n	800293e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002936:	1ad2      	subs	r2, r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	619a      	str	r2, [r3, #24]
 800293c:	e002      	b.n	8002944 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 80c0 	bne.w	8002ace <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	785b      	ldrb	r3, [r3, #1]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d126      	bne.n	80029a4 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002964:	b29b      	uxth	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800296a:	4413      	add	r3, r2
 800296c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	00da      	lsls	r2, r3, #3
 8002974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002976:	4413      	add	r3, r2
 8002978:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800297c:	67bb      	str	r3, [r7, #120]	; 0x78
 800297e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002988:	b29a      	uxth	r2, r3
 800298a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299c:	b29a      	uxth	r2, r3
 800299e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a0:	801a      	strh	r2, [r3, #0]
 80029a2:	e01a      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x4b0>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	785b      	ldrb	r3, [r3, #1]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d116      	bne.n	80029da <HAL_PCD_EP_DB_Transmit+0x4b0>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	667b      	str	r3, [r7, #100]	; 0x64
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029c0:	4413      	add	r3, r2
 80029c2:	667b      	str	r3, [r7, #100]	; 0x64
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	00da      	lsls	r2, r3, #3
 80029ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029cc:	4413      	add	r3, r2
 80029ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029d2:	663b      	str	r3, [r7, #96]	; 0x60
 80029d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029d6:	2200      	movs	r2, #0
 80029d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	677b      	str	r3, [r7, #116]	; 0x74
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	785b      	ldrb	r3, [r3, #1]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d12b      	bne.n	8002a40 <HAL_PCD_EP_DB_Transmit+0x516>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fc:	4413      	add	r3, r2
 80029fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	00da      	lsls	r2, r3, #3
 8002a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a08:	4413      	add	r3, r2
 8002a0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a24:	801a      	strh	r2, [r3, #0]
 8002a26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a3c:	801a      	strh	r2, [r3, #0]
 8002a3e:	e017      	b.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x546>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	785b      	ldrb	r3, [r3, #1]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d113      	bne.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x546>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a56:	4413      	add	r3, r2
 8002a58:	677b      	str	r3, [r7, #116]	; 0x74
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	00da      	lsls	r2, r3, #3
 8002a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a62:	4413      	add	r3, r2
 8002a64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a68:	673b      	str	r3, [r7, #112]	; 0x70
 8002a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f006 fa19 	bl	8008eae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 811a 	bne.w	8002cbc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	441a      	add	r2, r3
 8002ab4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	8013      	strh	r3, [r2, #0]
 8002acc:	e0f6      	b.n	8002cbc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d121      	bne.n	8002b1c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	441a      	add	r2, r3
 8002b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	f040 80ca 	bne.w	8002cbc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b30:	441a      	add	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	69da      	ldr	r2, [r3, #28]
 8002b3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b3e:	441a      	add	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	6a1a      	ldr	r2, [r3, #32]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d30b      	bcc.n	8002b68 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	6a1a      	ldr	r2, [r3, #32]
 8002b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b60:	1ad2      	subs	r2, r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	621a      	str	r2, [r3, #32]
 8002b66:	e017      	b.n	8002b98 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d108      	bne.n	8002b82 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002b70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b80:	e00a      	b.n	8002b98 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	657b      	str	r3, [r7, #84]	; 0x54
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	785b      	ldrb	r3, [r3, #1]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d165      	bne.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x748>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bba:	4413      	add	r3, r2
 8002bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	00da      	lsls	r2, r3, #3
 8002bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bdc:	801a      	strh	r2, [r3, #0]
 8002bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002be2:	2b3e      	cmp	r3, #62	; 0x3e
 8002be4:	d91d      	bls.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	029b      	lsls	r3, r3, #10
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1e:	801a      	strh	r2, [r3, #0]
 8002c20:	e041      	b.n	8002ca6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <HAL_PCD_EP_DB_Transmit+0x716>
 8002c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	e032      	b.n	8002ca6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c44:	085b      	lsrs	r3, r3, #1
 8002c46:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x730>
 8002c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c56:	3301      	adds	r3, #1
 8002c58:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	029b      	lsls	r3, r3, #10
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	e019      	b.n	8002ca6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	785b      	ldrb	r3, [r3, #1]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d115      	bne.n	8002ca6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c88:	4413      	add	r3, r2
 8002c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	00da      	lsls	r2, r3, #3
 8002c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c94:	4413      	add	r3, r2
 8002c96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	6959      	ldr	r1, [r3, #20]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	895a      	ldrh	r2, [r3, #10]
 8002cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	f004 f9eb 	bl	8007092 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd6:	82bb      	strh	r3, [r7, #20]
 8002cd8:	8abb      	ldrh	r3, [r7, #20]
 8002cda:	f083 0310 	eor.w	r3, r3, #16
 8002cde:	82bb      	strh	r3, [r7, #20]
 8002ce0:	8abb      	ldrh	r3, [r7, #20]
 8002ce2:	f083 0320 	eor.w	r3, r3, #32
 8002ce6:	82bb      	strh	r3, [r7, #20]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	441a      	add	r2, r3
 8002cf6:	8abb      	ldrh	r3, [r7, #20]
 8002cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3790      	adds	r7, #144	; 0x90
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b087      	sub	sp, #28
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	817b      	strh	r3, [r7, #10]
 8002d24:	4613      	mov	r3, r2
 8002d26:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d28:	897b      	ldrh	r3, [r7, #10]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00b      	beq.n	8002d4c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d34:	897b      	ldrh	r3, [r7, #10]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e009      	b.n	8002d60 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d4c:	897a      	ldrh	r2, [r7, #10]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d60:	893b      	ldrh	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d107      	bne.n	8002d76 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	80da      	strh	r2, [r3, #6]
 8002d74:	e00b      	b.n	8002d8e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	0c1b      	lsrs	r3, r3, #16
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	371c      	adds	r7, #28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	f043 0302 	orr.w	r3, r3, #2
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <HAL_PWREx_GetVoltageRange+0x18>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40007000 	.word	0x40007000

08002e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e1a:	d130      	bne.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e1c:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e28:	d038      	beq.n	8002e9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e32:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2232      	movs	r2, #50	; 0x32
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	4a1b      	ldr	r2, [pc, #108]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0c9b      	lsrs	r3, r3, #18
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e50:	e002      	b.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e64:	d102      	bne.n	8002e6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f2      	bne.n	8002e52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e78:	d110      	bne.n	8002e9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e00f      	b.n	8002e9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8a:	d007      	beq.n	8002e9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e94:	4a05      	ldr	r2, [pc, #20]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	431bde83 	.word	0x431bde83

08002eb8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec6:	6053      	str	r3, [r2, #4]
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40007000 	.word	0x40007000

08002ed8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d102      	bne.n	8002eec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f000 bc02 	b.w	80036f0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eec:	4b96      	ldr	r3, [pc, #600]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ef6:	4b94      	ldr	r3, [pc, #592]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80e4 	beq.w	80030d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d007      	beq.n	8002f24 <HAL_RCC_OscConfig+0x4c>
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	f040 808b 	bne.w	8003032 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	f040 8087 	bne.w	8003032 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f24:	4b88      	ldr	r3, [pc, #544]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_RCC_OscConfig+0x64>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e3d9      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1a      	ldr	r2, [r3, #32]
 8002f40:	4b81      	ldr	r3, [pc, #516]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <HAL_RCC_OscConfig+0x7e>
 8002f4c:	4b7e      	ldr	r3, [pc, #504]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f54:	e005      	b.n	8002f62 <HAL_RCC_OscConfig+0x8a>
 8002f56:	4b7c      	ldr	r3, [pc, #496]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d223      	bcs.n	8002fae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fd8c 	bl	8003a88 <RCC_SetFlashLatencyFromMSIRange>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e3ba      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f7a:	4b73      	ldr	r3, [pc, #460]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a72      	ldr	r2, [pc, #456]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b70      	ldr	r3, [pc, #448]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	496d      	ldr	r1, [pc, #436]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f98:	4b6b      	ldr	r3, [pc, #428]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	4968      	ldr	r1, [pc, #416]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
 8002fac:	e025      	b.n	8002ffa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fae:	4b66      	ldr	r3, [pc, #408]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a65      	ldr	r2, [pc, #404]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	f043 0308 	orr.w	r3, r3, #8
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	4b63      	ldr	r3, [pc, #396]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4960      	ldr	r1, [pc, #384]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fcc:	4b5e      	ldr	r3, [pc, #376]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	495b      	ldr	r1, [pc, #364]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fd4c 	bl	8003a88 <RCC_SetFlashLatencyFromMSIRange>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e37a      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ffa:	f000 fc81 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 8002ffe:	4602      	mov	r2, r0
 8003000:	4b51      	ldr	r3, [pc, #324]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	4950      	ldr	r1, [pc, #320]	; (800314c <HAL_RCC_OscConfig+0x274>)
 800300c:	5ccb      	ldrb	r3, [r1, r3]
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	fa22 f303 	lsr.w	r3, r2, r3
 8003016:	4a4e      	ldr	r2, [pc, #312]	; (8003150 <HAL_RCC_OscConfig+0x278>)
 8003018:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800301a:	4b4e      	ldr	r3, [pc, #312]	; (8003154 <HAL_RCC_OscConfig+0x27c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fe54 	bl	8000ccc <HAL_InitTick>
 8003024:	4603      	mov	r3, r0
 8003026:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d052      	beq.n	80030d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	e35e      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d032      	beq.n	80030a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800303a:	4b43      	ldr	r3, [pc, #268]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a42      	ldr	r2, [pc, #264]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003046:	f7fd fe91 	bl	8000d6c <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800304e:	f7fd fe8d 	bl	8000d6c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e347      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003060:	4b39      	ldr	r3, [pc, #228]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800306c:	4b36      	ldr	r3, [pc, #216]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a35      	ldr	r2, [pc, #212]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8003072:	f043 0308 	orr.w	r3, r3, #8
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	4b33      	ldr	r3, [pc, #204]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4930      	ldr	r1, [pc, #192]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800308a:	4b2f      	ldr	r3, [pc, #188]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	492b      	ldr	r1, [pc, #172]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
 800309e:	e01a      	b.n	80030d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030a0:	4b29      	ldr	r3, [pc, #164]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a28      	ldr	r2, [pc, #160]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030ac:	f7fd fe5e 	bl	8000d6c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030b4:	f7fd fe5a 	bl	8000d6c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e314      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x1dc>
 80030d2:	e000      	b.n	80030d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d073      	beq.n	80031ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_OscConfig+0x21c>
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d10e      	bne.n	800310c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d10b      	bne.n	800310c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d063      	beq.n	80031c8 <HAL_RCC_OscConfig+0x2f0>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d15f      	bne.n	80031c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e2f1      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d106      	bne.n	8003124 <HAL_RCC_OscConfig+0x24c>
 8003116:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e025      	b.n	8003170 <HAL_RCC_OscConfig+0x298>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800312c:	d114      	bne.n	8003158 <HAL_RCC_OscConfig+0x280>
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a05      	ldr	r2, [pc, #20]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8003134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a02      	ldr	r2, [pc, #8]	; (8003148 <HAL_RCC_OscConfig+0x270>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e013      	b.n	8003170 <HAL_RCC_OscConfig+0x298>
 8003148:	40021000 	.word	0x40021000
 800314c:	0800957c 	.word	0x0800957c
 8003150:	20000000 	.word	0x20000000
 8003154:	20000004 	.word	0x20000004
 8003158:	4ba0      	ldr	r3, [pc, #640]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a9f      	ldr	r2, [pc, #636]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 800315e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	4b9d      	ldr	r3, [pc, #628]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a9c      	ldr	r2, [pc, #624]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 800316a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d013      	beq.n	80031a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fd fdf8 	bl	8000d6c <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003180:	f7fd fdf4 	bl	8000d6c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e2ae      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003192:	4b92      	ldr	r3, [pc, #584]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x2a8>
 800319e:	e014      	b.n	80031ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fd fde4 	bl	8000d6c <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a8:	f7fd fde0 	bl	8000d6c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	; 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e29a      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ba:	4b88      	ldr	r3, [pc, #544]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x2d0>
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d060      	beq.n	8003298 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_OscConfig+0x310>
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d119      	bne.n	8003216 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d116      	bne.n	8003216 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e8:	4b7c      	ldr	r3, [pc, #496]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_OscConfig+0x328>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e277      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003200:	4b76      	ldr	r3, [pc, #472]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	061b      	lsls	r3, r3, #24
 800320e:	4973      	ldr	r1, [pc, #460]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003214:	e040      	b.n	8003298 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d023      	beq.n	8003266 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800321e:	4b6f      	ldr	r3, [pc, #444]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6e      	ldr	r2, [pc, #440]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 8003224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fd fd9f 	bl	8000d6c <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003232:	f7fd fd9b 	bl	8000d6c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e255      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003244:	4b65      	ldr	r3, [pc, #404]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b62      	ldr	r3, [pc, #392]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	061b      	lsls	r3, r3, #24
 800325e:	495f      	ldr	r1, [pc, #380]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
 8003264:	e018      	b.n	8003298 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003266:	4b5d      	ldr	r3, [pc, #372]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a5c      	ldr	r2, [pc, #368]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 800326c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fd fd7b 	bl	8000d6c <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327a:	f7fd fd77 	bl	8000d6c <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e231      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800328c:	4b53      	ldr	r3, [pc, #332]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d03c      	beq.n	800331e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01c      	beq.n	80032e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ac:	4b4b      	ldr	r3, [pc, #300]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 80032ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b2:	4a4a      	ldr	r2, [pc, #296]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fd fd56 	bl	8000d6c <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c4:	f7fd fd52 	bl	8000d6c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e20c      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032d6:	4b41      	ldr	r3, [pc, #260]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 80032d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0ef      	beq.n	80032c4 <HAL_RCC_OscConfig+0x3ec>
 80032e4:	e01b      	b.n	800331e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e6:	4b3d      	ldr	r3, [pc, #244]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 80032e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ec:	4a3b      	ldr	r2, [pc, #236]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 80032ee:	f023 0301 	bic.w	r3, r3, #1
 80032f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f6:	f7fd fd39 	bl	8000d6c <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fe:	f7fd fd35 	bl	8000d6c <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e1ef      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003310:	4b32      	ldr	r3, [pc, #200]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1ef      	bne.n	80032fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80a6 	beq.w	8003478 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332c:	2300      	movs	r3, #0
 800332e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003330:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10d      	bne.n	8003358 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333c:	4b27      	ldr	r3, [pc, #156]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	4a26      	ldr	r2, [pc, #152]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 8003342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003346:	6593      	str	r3, [r2, #88]	; 0x58
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003354:	2301      	movs	r3, #1
 8003356:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003358:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <HAL_RCC_OscConfig+0x508>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d118      	bne.n	8003396 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003364:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <HAL_RCC_OscConfig+0x508>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1d      	ldr	r2, [pc, #116]	; (80033e0 <HAL_RCC_OscConfig+0x508>)
 800336a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003370:	f7fd fcfc 	bl	8000d6c <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003378:	f7fd fcf8 	bl	8000d6c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1b2      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_RCC_OscConfig+0x508>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d108      	bne.n	80033b0 <HAL_RCC_OscConfig+0x4d8>
 800339e:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a4:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ae:	e029      	b.n	8003404 <HAL_RCC_OscConfig+0x52c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	d115      	bne.n	80033e4 <HAL_RCC_OscConfig+0x50c>
 80033b8:	4b08      	ldr	r3, [pc, #32]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	4a07      	ldr	r2, [pc, #28]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 80033c0:	f043 0304 	orr.w	r3, r3, #4
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	4a03      	ldr	r2, [pc, #12]	; (80033dc <HAL_RCC_OscConfig+0x504>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033d8:	e014      	b.n	8003404 <HAL_RCC_OscConfig+0x52c>
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40007000 	.word	0x40007000
 80033e4:	4b9a      	ldr	r3, [pc, #616]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	4a99      	ldr	r2, [pc, #612]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f4:	4b96      	ldr	r3, [pc, #600]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	4a95      	ldr	r2, [pc, #596]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d016      	beq.n	800343a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fd fcae 	bl	8000d6c <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fd fcaa 	bl	8000d6c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e162      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342a:	4b89      	ldr	r3, [pc, #548]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ed      	beq.n	8003414 <HAL_RCC_OscConfig+0x53c>
 8003438:	e015      	b.n	8003466 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7fd fc97 	bl	8000d6c <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fd fc93 	bl	8000d6c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e14b      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003458:	4b7d      	ldr	r3, [pc, #500]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1ed      	bne.n	8003442 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003466:	7ffb      	ldrb	r3, [r7, #31]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d105      	bne.n	8003478 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346c:	4b78      	ldr	r3, [pc, #480]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	4a77      	ldr	r2, [pc, #476]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 8003472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003476:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d03c      	beq.n	80034fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01c      	beq.n	80034c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800348c:	4b70      	ldr	r3, [pc, #448]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 800348e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003492:	4a6f      	ldr	r2, [pc, #444]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fd fc66 	bl	8000d6c <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034a4:	f7fd fc62 	bl	8000d6c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e11c      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034b6:	4b66      	ldr	r3, [pc, #408]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 80034b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ef      	beq.n	80034a4 <HAL_RCC_OscConfig+0x5cc>
 80034c4:	e01b      	b.n	80034fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034c6:	4b62      	ldr	r3, [pc, #392]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 80034c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034cc:	4a60      	ldr	r2, [pc, #384]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d6:	f7fd fc49 	bl	8000d6c <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034de:	f7fd fc45 	bl	8000d6c <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e0ff      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034f0:	4b57      	ldr	r3, [pc, #348]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 80034f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1ef      	bne.n	80034de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80f3 	beq.w	80036ee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	2b02      	cmp	r3, #2
 800350e:	f040 80c9 	bne.w	80036a4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003512:	4b4f      	ldr	r3, [pc, #316]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 0203 	and.w	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	429a      	cmp	r2, r3
 8003524:	d12c      	bne.n	8003580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	3b01      	subs	r3, #1
 8003532:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d123      	bne.n	8003580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003542:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d11b      	bne.n	8003580 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003554:	429a      	cmp	r2, r3
 8003556:	d113      	bne.n	8003580 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	085b      	lsrs	r3, r3, #1
 8003564:	3b01      	subs	r3, #1
 8003566:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d109      	bne.n	8003580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	3b01      	subs	r3, #1
 800357a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d06b      	beq.n	8003658 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d062      	beq.n	800364c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003586:	4b32      	ldr	r3, [pc, #200]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e0ac      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003596:	4b2e      	ldr	r3, [pc, #184]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 800359c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035a2:	f7fd fbe3 	bl	8000d6c <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fd fbdf 	bl	8000d6c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e099      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f0      	bne.n	80035aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c8:	4b21      	ldr	r3, [pc, #132]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	4b21      	ldr	r3, [pc, #132]	; (8003654 <HAL_RCC_OscConfig+0x77c>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035d8:	3a01      	subs	r2, #1
 80035da:	0112      	lsls	r2, r2, #4
 80035dc:	4311      	orrs	r1, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035e2:	0212      	lsls	r2, r2, #8
 80035e4:	4311      	orrs	r1, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035ea:	0852      	lsrs	r2, r2, #1
 80035ec:	3a01      	subs	r2, #1
 80035ee:	0552      	lsls	r2, r2, #21
 80035f0:	4311      	orrs	r1, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035f6:	0852      	lsrs	r2, r2, #1
 80035f8:	3a01      	subs	r2, #1
 80035fa:	0652      	lsls	r2, r2, #25
 80035fc:	4311      	orrs	r1, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003602:	06d2      	lsls	r2, r2, #27
 8003604:	430a      	orrs	r2, r1
 8003606:	4912      	ldr	r1, [pc, #72]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 8003608:	4313      	orrs	r3, r2
 800360a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800360c:	4b10      	ldr	r3, [pc, #64]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a0f      	ldr	r2, [pc, #60]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 8003612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003616:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a0c      	ldr	r2, [pc, #48]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 800361e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003622:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003624:	f7fd fba2 	bl	8000d6c <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362c:	f7fd fb9e 	bl	8000d6c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e058      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363e:	4b04      	ldr	r3, [pc, #16]	; (8003650 <HAL_RCC_OscConfig+0x778>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800364a:	e050      	b.n	80036ee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e04f      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
 8003650:	40021000 	.word	0x40021000
 8003654:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003658:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <HAL_RCC_OscConfig+0x820>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d144      	bne.n	80036ee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003664:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <HAL_RCC_OscConfig+0x820>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a23      	ldr	r2, [pc, #140]	; (80036f8 <HAL_RCC_OscConfig+0x820>)
 800366a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003670:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <HAL_RCC_OscConfig+0x820>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a20      	ldr	r2, [pc, #128]	; (80036f8 <HAL_RCC_OscConfig+0x820>)
 8003676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800367c:	f7fd fb76 	bl	8000d6c <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fd fb72 	bl	8000d6c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e02c      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003696:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <HAL_RCC_OscConfig+0x820>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x7ac>
 80036a2:	e024      	b.n	80036ee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d01f      	beq.n	80036ea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <HAL_RCC_OscConfig+0x820>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <HAL_RCC_OscConfig+0x820>)
 80036b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b6:	f7fd fb59 	bl	8000d6c <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036be:	f7fd fb55 	bl	8000d6c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e00f      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_OscConfig+0x820>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f0      	bne.n	80036be <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_RCC_OscConfig+0x820>)
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	4905      	ldr	r1, [pc, #20]	; (80036f8 <HAL_RCC_OscConfig+0x820>)
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_RCC_OscConfig+0x824>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	60cb      	str	r3, [r1, #12]
 80036e8:	e001      	b.n	80036ee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40021000 	.word	0x40021000
 80036fc:	feeefffc 	.word	0xfeeefffc

08003700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0e7      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003714:	4b75      	ldr	r3, [pc, #468]	; (80038ec <HAL_RCC_ClockConfig+0x1ec>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d910      	bls.n	8003744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b72      	ldr	r3, [pc, #456]	; (80038ec <HAL_RCC_ClockConfig+0x1ec>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 0207 	bic.w	r2, r3, #7
 800372a:	4970      	ldr	r1, [pc, #448]	; (80038ec <HAL_RCC_ClockConfig+0x1ec>)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b6e      	ldr	r3, [pc, #440]	; (80038ec <HAL_RCC_ClockConfig+0x1ec>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0cf      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d010      	beq.n	8003772 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	4b66      	ldr	r3, [pc, #408]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800375c:	429a      	cmp	r2, r3
 800375e:	d908      	bls.n	8003772 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003760:	4b63      	ldr	r3, [pc, #396]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4960      	ldr	r1, [pc, #384]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d04c      	beq.n	8003818 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b03      	cmp	r3, #3
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003786:	4b5a      	ldr	r3, [pc, #360]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d121      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0a6      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800379e:	4b54      	ldr	r3, [pc, #336]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d115      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e09a      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037b6:	4b4e      	ldr	r3, [pc, #312]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e08e      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c6:	4b4a      	ldr	r3, [pc, #296]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e086      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037d6:	4b46      	ldr	r3, [pc, #280]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f023 0203 	bic.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4943      	ldr	r1, [pc, #268]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e8:	f7fd fac0 	bl	8000d6c <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f0:	f7fd fabc 	bl	8000d6c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e06e      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	4b3a      	ldr	r3, [pc, #232]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 020c 	and.w	r2, r3, #12
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	429a      	cmp	r2, r3
 8003816:	d1eb      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d010      	beq.n	8003846 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003830:	429a      	cmp	r2, r3
 8003832:	d208      	bcs.n	8003846 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003834:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	492b      	ldr	r1, [pc, #172]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003846:	4b29      	ldr	r3, [pc, #164]	; (80038ec <HAL_RCC_ClockConfig+0x1ec>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d210      	bcs.n	8003876 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <HAL_RCC_ClockConfig+0x1ec>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 0207 	bic.w	r2, r3, #7
 800385c:	4923      	ldr	r1, [pc, #140]	; (80038ec <HAL_RCC_ClockConfig+0x1ec>)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	4313      	orrs	r3, r2
 8003862:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <HAL_RCC_ClockConfig+0x1ec>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d001      	beq.n	8003876 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e036      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003882:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4918      	ldr	r1, [pc, #96]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4910      	ldr	r1, [pc, #64]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038b4:	f000 f824 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <HAL_RCC_ClockConfig+0x1f0>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	490b      	ldr	r1, [pc, #44]	; (80038f4 <HAL_RCC_ClockConfig+0x1f4>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
 80038d0:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <HAL_RCC_ClockConfig+0x1f8>)
 80038d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <HAL_RCC_ClockConfig+0x1fc>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fd f9f7 	bl	8000ccc <HAL_InitTick>
 80038de:	4603      	mov	r3, r0
 80038e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80038e2:	7afb      	ldrb	r3, [r7, #11]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40022000 	.word	0x40022000
 80038f0:	40021000 	.word	0x40021000
 80038f4:	0800957c 	.word	0x0800957c
 80038f8:	20000000 	.word	0x20000000
 80038fc:	20000004 	.word	0x20000004

08003900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	; 0x24
 8003904:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800390e:	4b3e      	ldr	r3, [pc, #248]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003918:	4b3b      	ldr	r3, [pc, #236]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x108>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0x34>
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2b0c      	cmp	r3, #12
 800392c:	d121      	bne.n	8003972 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d11e      	bne.n	8003972 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003934:	4b34      	ldr	r3, [pc, #208]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d107      	bne.n	8003950 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003940:	4b31      	ldr	r3, [pc, #196]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	e005      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003950:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800395c:	4a2b      	ldr	r2, [pc, #172]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x10c>)
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003964:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10d      	bne.n	8003988 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003970:	e00a      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b04      	cmp	r3, #4
 8003976:	d102      	bne.n	800397e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003978:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x110>)
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	e004      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d101      	bne.n	8003988 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003984:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x114>)
 8003986:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d134      	bne.n	80039f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800398e:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d003      	beq.n	80039a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d003      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0xac>
 80039a4:	e005      	b.n	80039b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039a6:	4b1a      	ldr	r3, [pc, #104]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x110>)
 80039a8:	617b      	str	r3, [r7, #20]
      break;
 80039aa:	e005      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x114>)
 80039ae:	617b      	str	r3, [r7, #20]
      break;
 80039b0:	e002      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	617b      	str	r3, [r7, #20]
      break;
 80039b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039b8:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	3301      	adds	r3, #1
 80039c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039c6:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	fb03 f202 	mul.w	r2, r3, r2
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	0e5b      	lsrs	r3, r3, #25
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	3301      	adds	r3, #1
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039f8:	69bb      	ldr	r3, [r7, #24]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3724      	adds	r7, #36	; 0x24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	08009594 	.word	0x08009594
 8003a10:	00f42400 	.word	0x00f42400
 8003a14:	016e3600 	.word	0x016e3600

08003a18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000000 	.word	0x20000000

08003a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a34:	f7ff fff0 	bl	8003a18 <HAL_RCC_GetHCLKFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4904      	ldr	r1, [pc, #16]	; (8003a58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40021000 	.word	0x40021000
 8003a58:	0800958c 	.word	0x0800958c

08003a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a60:	f7ff ffda 	bl	8003a18 <HAL_RCC_GetHCLKFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	0adb      	lsrs	r3, r3, #11
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4904      	ldr	r1, [pc, #16]	; (8003a84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	f003 031f 	and.w	r3, r3, #31
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000
 8003a84:	0800958c 	.word	0x0800958c

08003a88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a94:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003aa0:	f7ff f9a6 	bl	8002df0 <HAL_PWREx_GetVoltageRange>
 8003aa4:	6178      	str	r0, [r7, #20]
 8003aa6:	e014      	b.n	8003ad2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab4:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ac0:	f7ff f996 	bl	8002df0 <HAL_PWREx_GetVoltageRange>
 8003ac4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad8:	d10b      	bne.n	8003af2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b80      	cmp	r3, #128	; 0x80
 8003ade:	d919      	bls.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ae4:	d902      	bls.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	e013      	b.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aec:	2301      	movs	r3, #1
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	e010      	b.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b80      	cmp	r3, #128	; 0x80
 8003af6:	d902      	bls.n	8003afe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003af8:	2303      	movs	r3, #3
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	e00a      	b.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b80      	cmp	r3, #128	; 0x80
 8003b02:	d102      	bne.n	8003b0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b04:	2302      	movs	r3, #2
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	e004      	b.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b70      	cmp	r3, #112	; 0x70
 8003b0e:	d101      	bne.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b10:	2301      	movs	r3, #1
 8003b12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f023 0207 	bic.w	r2, r3, #7
 8003b1c:	4909      	ldr	r1, [pc, #36]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b24:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d001      	beq.n	8003b36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40022000 	.word	0x40022000

08003b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b50:	2300      	movs	r3, #0
 8003b52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b54:	2300      	movs	r3, #0
 8003b56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d031      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b6c:	d01a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003b6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b72:	d814      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d009      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b7c:	d10f      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003b7e:	4b5d      	ldr	r3, [pc, #372]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	4a5c      	ldr	r2, [pc, #368]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b8a:	e00c      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f9ce 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b9c:	e003      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bac:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	494e      	ldr	r1, [pc, #312]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bc2:	e001      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 809e 	beq.w	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bda:	4b46      	ldr	r3, [pc, #280]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00d      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf0:	4b40      	ldr	r3, [pc, #256]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	4a3f      	ldr	r2, [pc, #252]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003bfc:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c0c:	4b3a      	ldr	r3, [pc, #232]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a39      	ldr	r2, [pc, #228]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c18:	f7fd f8a8 	bl	8000d6c <HAL_GetTick>
 8003c1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c1e:	e009      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c20:	f7fd f8a4 	bl	8000d6c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d902      	bls.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	74fb      	strb	r3, [r7, #19]
        break;
 8003c32:	e005      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c34:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0ef      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d15a      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c46:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01e      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d019      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c6e:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	4a1f      	ldr	r2, [pc, #124]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c84:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c8e:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d016      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd f864 	bl	8000d6c <HAL_GetTick>
 8003ca4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7fd f860 	bl	8000d6c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d902      	bls.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	74fb      	strb	r3, [r7, #19]
            break;
 8003cbe:	e006      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0ec      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd4:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce2:	4904      	ldr	r1, [pc, #16]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cea:	e009      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
 8003cf0:	e006      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfc:	7cfb      	ldrb	r3, [r7, #19]
 8003cfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d00:	7c7b      	ldrb	r3, [r7, #17]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d105      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d06:	4b8a      	ldr	r3, [pc, #552]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	4a89      	ldr	r2, [pc, #548]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d1e:	4b84      	ldr	r3, [pc, #528]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f023 0203 	bic.w	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	4980      	ldr	r1, [pc, #512]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d40:	4b7b      	ldr	r3, [pc, #492]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f023 020c 	bic.w	r2, r3, #12
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	4978      	ldr	r1, [pc, #480]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d62:	4b73      	ldr	r3, [pc, #460]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	496f      	ldr	r1, [pc, #444]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d84:	4b6a      	ldr	r3, [pc, #424]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	4967      	ldr	r1, [pc, #412]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003da6:	4b62      	ldr	r3, [pc, #392]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	495e      	ldr	r1, [pc, #376]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dc8:	4b59      	ldr	r3, [pc, #356]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	4956      	ldr	r1, [pc, #344]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dea:	4b51      	ldr	r3, [pc, #324]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	494d      	ldr	r1, [pc, #308]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d028      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e0c:	4b48      	ldr	r3, [pc, #288]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	4945      	ldr	r1, [pc, #276]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e2a:	d106      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e2c:	4b40      	ldr	r3, [pc, #256]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a3f      	ldr	r2, [pc, #252]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e36:	60d3      	str	r3, [r2, #12]
 8003e38:	e011      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e42:	d10c      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f872 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003e5a:	7cfb      	ldrb	r3, [r7, #19]
 8003e5c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d028      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e6a:	4b31      	ldr	r3, [pc, #196]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	492d      	ldr	r1, [pc, #180]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e88:	d106      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8a:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	4a28      	ldr	r2, [pc, #160]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e94:	60d3      	str	r3, [r2, #12]
 8003e96:	e011      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 f843 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eb2:	7cfb      	ldrb	r3, [r7, #19]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01c      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed6:	4916      	ldr	r1, [pc, #88]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ee6:	d10c      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	2102      	movs	r1, #2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f820 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ef8:	7cfb      	ldrb	r3, [r7, #19]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003efe:	7cfb      	ldrb	r3, [r7, #19]
 8003f00:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1c:	4904      	ldr	r1, [pc, #16]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f24:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000

08003f34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f42:	4b74      	ldr	r3, [pc, #464]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d018      	beq.n	8003f80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f4e:	4b71      	ldr	r3, [pc, #452]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0203 	and.w	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d10d      	bne.n	8003f7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
       ||
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f66:	4b6b      	ldr	r3, [pc, #428]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
       ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d047      	beq.n	800400a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
 8003f7e:	e044      	b.n	800400a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d018      	beq.n	8003fba <RCCEx_PLLSAI1_Config+0x86>
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d825      	bhi.n	8003fd8 <RCCEx_PLLSAI1_Config+0xa4>
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d002      	beq.n	8003f96 <RCCEx_PLLSAI1_Config+0x62>
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d009      	beq.n	8003fa8 <RCCEx_PLLSAI1_Config+0x74>
 8003f94:	e020      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f96:	4b5f      	ldr	r3, [pc, #380]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d11d      	bne.n	8003fde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa6:	e01a      	b.n	8003fde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fa8:	4b5a      	ldr	r3, [pc, #360]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d116      	bne.n	8003fe2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb8:	e013      	b.n	8003fe2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fba:	4b56      	ldr	r3, [pc, #344]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10f      	bne.n	8003fe6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fc6:	4b53      	ldr	r3, [pc, #332]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fd6:	e006      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
      break;
 8003fdc:	e004      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e002      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fe6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10d      	bne.n	800400a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fee:	4b49      	ldr	r3, [pc, #292]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6819      	ldr	r1, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	430b      	orrs	r3, r1
 8004004:	4943      	ldr	r1, [pc, #268]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004006:	4313      	orrs	r3, r2
 8004008:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d17c      	bne.n	800410a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004010:	4b40      	ldr	r3, [pc, #256]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a3f      	ldr	r2, [pc, #252]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004016:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800401a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401c:	f7fc fea6 	bl	8000d6c <HAL_GetTick>
 8004020:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004022:	e009      	b.n	8004038 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004024:	f7fc fea2 	bl	8000d6c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d902      	bls.n	8004038 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	73fb      	strb	r3, [r7, #15]
        break;
 8004036:	e005      	b.n	8004044 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004038:	4b36      	ldr	r3, [pc, #216]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1ef      	bne.n	8004024 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d15f      	bne.n	800410a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d110      	bne.n	8004072 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004050:	4b30      	ldr	r3, [pc, #192]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004058:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6892      	ldr	r2, [r2, #8]
 8004060:	0211      	lsls	r1, r2, #8
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68d2      	ldr	r2, [r2, #12]
 8004066:	06d2      	lsls	r2, r2, #27
 8004068:	430a      	orrs	r2, r1
 800406a:	492a      	ldr	r1, [pc, #168]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 800406c:	4313      	orrs	r3, r2
 800406e:	610b      	str	r3, [r1, #16]
 8004070:	e027      	b.n	80040c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d112      	bne.n	800409e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004078:	4b26      	ldr	r3, [pc, #152]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004080:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6892      	ldr	r2, [r2, #8]
 8004088:	0211      	lsls	r1, r2, #8
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6912      	ldr	r2, [r2, #16]
 800408e:	0852      	lsrs	r2, r2, #1
 8004090:	3a01      	subs	r2, #1
 8004092:	0552      	lsls	r2, r2, #21
 8004094:	430a      	orrs	r2, r1
 8004096:	491f      	ldr	r1, [pc, #124]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004098:	4313      	orrs	r3, r2
 800409a:	610b      	str	r3, [r1, #16]
 800409c:	e011      	b.n	80040c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800409e:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6892      	ldr	r2, [r2, #8]
 80040ae:	0211      	lsls	r1, r2, #8
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6952      	ldr	r2, [r2, #20]
 80040b4:	0852      	lsrs	r2, r2, #1
 80040b6:	3a01      	subs	r2, #1
 80040b8:	0652      	lsls	r2, r2, #25
 80040ba:	430a      	orrs	r2, r1
 80040bc:	4915      	ldr	r1, [pc, #84]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040c2:	4b14      	ldr	r3, [pc, #80]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a13      	ldr	r2, [pc, #76]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7fc fe4d 	bl	8000d6c <HAL_GetTick>
 80040d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040d4:	e009      	b.n	80040ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040d6:	f7fc fe49 	bl	8000d6c <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d902      	bls.n	80040ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	73fb      	strb	r3, [r7, #15]
          break;
 80040e8:	e005      	b.n	80040f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ef      	beq.n	80040d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	4903      	ldr	r1, [pc, #12]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004106:	4313      	orrs	r3, r2
 8004108:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800410a:	7bfb      	ldrb	r3, [r7, #15]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40021000 	.word	0x40021000

08004118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e040      	b.n	80041ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fc fcd4 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2224      	movs	r2, #36	; 0x24
 8004144:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0201 	bic.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fa54 	bl	800460c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f825 	bl	80041b4 <UART_SetConfig>
 800416a:	4603      	mov	r3, r0
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e01b      	b.n	80041ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004182:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004192:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fad3 	bl	8004750 <UART_CheckIdleState>
 80041aa:	4603      	mov	r3, r0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b8:	b08a      	sub	sp, #40	; 0x28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	4313      	orrs	r3, r2
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4bb4      	ldr	r3, [pc, #720]	; (80044b4 <UART_SetConfig+0x300>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4aa9      	ldr	r2, [pc, #676]	; (80044b8 <UART_SetConfig+0x304>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421c:	4313      	orrs	r3, r2
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4aa0      	ldr	r2, [pc, #640]	; (80044bc <UART_SetConfig+0x308>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d126      	bne.n	800428c <UART_SetConfig+0xd8>
 800423e:	4ba0      	ldr	r3, [pc, #640]	; (80044c0 <UART_SetConfig+0x30c>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b03      	cmp	r3, #3
 800424a:	d81b      	bhi.n	8004284 <UART_SetConfig+0xd0>
 800424c:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <UART_SetConfig+0xa0>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004265 	.word	0x08004265
 8004258:	08004275 	.word	0x08004275
 800425c:	0800426d 	.word	0x0800426d
 8004260:	0800427d 	.word	0x0800427d
 8004264:	2301      	movs	r3, #1
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426a:	e080      	b.n	800436e <UART_SetConfig+0x1ba>
 800426c:	2302      	movs	r3, #2
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004272:	e07c      	b.n	800436e <UART_SetConfig+0x1ba>
 8004274:	2304      	movs	r3, #4
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427a:	e078      	b.n	800436e <UART_SetConfig+0x1ba>
 800427c:	2308      	movs	r3, #8
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004282:	e074      	b.n	800436e <UART_SetConfig+0x1ba>
 8004284:	2310      	movs	r3, #16
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428a:	e070      	b.n	800436e <UART_SetConfig+0x1ba>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a8c      	ldr	r2, [pc, #560]	; (80044c4 <UART_SetConfig+0x310>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d138      	bne.n	8004308 <UART_SetConfig+0x154>
 8004296:	4b8a      	ldr	r3, [pc, #552]	; (80044c0 <UART_SetConfig+0x30c>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429c:	f003 030c 	and.w	r3, r3, #12
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	d82d      	bhi.n	8004300 <UART_SetConfig+0x14c>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <UART_SetConfig+0xf8>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042e1 	.word	0x080042e1
 80042b0:	08004301 	.word	0x08004301
 80042b4:	08004301 	.word	0x08004301
 80042b8:	08004301 	.word	0x08004301
 80042bc:	080042f1 	.word	0x080042f1
 80042c0:	08004301 	.word	0x08004301
 80042c4:	08004301 	.word	0x08004301
 80042c8:	08004301 	.word	0x08004301
 80042cc:	080042e9 	.word	0x080042e9
 80042d0:	08004301 	.word	0x08004301
 80042d4:	08004301 	.word	0x08004301
 80042d8:	08004301 	.word	0x08004301
 80042dc:	080042f9 	.word	0x080042f9
 80042e0:	2300      	movs	r3, #0
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e6:	e042      	b.n	800436e <UART_SetConfig+0x1ba>
 80042e8:	2302      	movs	r3, #2
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ee:	e03e      	b.n	800436e <UART_SetConfig+0x1ba>
 80042f0:	2304      	movs	r3, #4
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	e03a      	b.n	800436e <UART_SetConfig+0x1ba>
 80042f8:	2308      	movs	r3, #8
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e036      	b.n	800436e <UART_SetConfig+0x1ba>
 8004300:	2310      	movs	r3, #16
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e032      	b.n	800436e <UART_SetConfig+0x1ba>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a6a      	ldr	r2, [pc, #424]	; (80044b8 <UART_SetConfig+0x304>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d12a      	bne.n	8004368 <UART_SetConfig+0x1b4>
 8004312:	4b6b      	ldr	r3, [pc, #428]	; (80044c0 <UART_SetConfig+0x30c>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800431c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004320:	d01a      	beq.n	8004358 <UART_SetConfig+0x1a4>
 8004322:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004326:	d81b      	bhi.n	8004360 <UART_SetConfig+0x1ac>
 8004328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432c:	d00c      	beq.n	8004348 <UART_SetConfig+0x194>
 800432e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004332:	d815      	bhi.n	8004360 <UART_SetConfig+0x1ac>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <UART_SetConfig+0x18c>
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433c:	d008      	beq.n	8004350 <UART_SetConfig+0x19c>
 800433e:	e00f      	b.n	8004360 <UART_SetConfig+0x1ac>
 8004340:	2300      	movs	r3, #0
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	e012      	b.n	800436e <UART_SetConfig+0x1ba>
 8004348:	2302      	movs	r3, #2
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434e:	e00e      	b.n	800436e <UART_SetConfig+0x1ba>
 8004350:	2304      	movs	r3, #4
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004356:	e00a      	b.n	800436e <UART_SetConfig+0x1ba>
 8004358:	2308      	movs	r3, #8
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435e:	e006      	b.n	800436e <UART_SetConfig+0x1ba>
 8004360:	2310      	movs	r3, #16
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004366:	e002      	b.n	800436e <UART_SetConfig+0x1ba>
 8004368:	2310      	movs	r3, #16
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a51      	ldr	r2, [pc, #324]	; (80044b8 <UART_SetConfig+0x304>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d17a      	bne.n	800446e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800437c:	2b08      	cmp	r3, #8
 800437e:	d824      	bhi.n	80043ca <UART_SetConfig+0x216>
 8004380:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <UART_SetConfig+0x1d4>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	080043ad 	.word	0x080043ad
 800438c:	080043cb 	.word	0x080043cb
 8004390:	080043b5 	.word	0x080043b5
 8004394:	080043cb 	.word	0x080043cb
 8004398:	080043bb 	.word	0x080043bb
 800439c:	080043cb 	.word	0x080043cb
 80043a0:	080043cb 	.word	0x080043cb
 80043a4:	080043cb 	.word	0x080043cb
 80043a8:	080043c3 	.word	0x080043c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7ff fb40 	bl	8003a30 <HAL_RCC_GetPCLK1Freq>
 80043b0:	61f8      	str	r0, [r7, #28]
        break;
 80043b2:	e010      	b.n	80043d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b4:	4b44      	ldr	r3, [pc, #272]	; (80044c8 <UART_SetConfig+0x314>)
 80043b6:	61fb      	str	r3, [r7, #28]
        break;
 80043b8:	e00d      	b.n	80043d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ba:	f7ff faa1 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 80043be:	61f8      	str	r0, [r7, #28]
        break;
 80043c0:	e009      	b.n	80043d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c6:	61fb      	str	r3, [r7, #28]
        break;
 80043c8:	e005      	b.n	80043d6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8107 	beq.w	80045ec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	4413      	add	r3, r2
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d305      	bcc.n	80043fa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d903      	bls.n	8004402 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004400:	e0f4      	b.n	80045ec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2200      	movs	r2, #0
 8004406:	461c      	mov	r4, r3
 8004408:	4615      	mov	r5, r2
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	022b      	lsls	r3, r5, #8
 8004414:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004418:	0222      	lsls	r2, r4, #8
 800441a:	68f9      	ldr	r1, [r7, #12]
 800441c:	6849      	ldr	r1, [r1, #4]
 800441e:	0849      	lsrs	r1, r1, #1
 8004420:	2000      	movs	r0, #0
 8004422:	4688      	mov	r8, r1
 8004424:	4681      	mov	r9, r0
 8004426:	eb12 0a08 	adds.w	sl, r2, r8
 800442a:	eb43 0b09 	adc.w	fp, r3, r9
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800443c:	4650      	mov	r0, sl
 800443e:	4659      	mov	r1, fp
 8004440:	f7fb fec4 	bl	80001cc <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004452:	d308      	bcc.n	8004466 <UART_SetConfig+0x2b2>
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445a:	d204      	bcs.n	8004466 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	60da      	str	r2, [r3, #12]
 8004464:	e0c2      	b.n	80045ec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800446c:	e0be      	b.n	80045ec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004476:	d16a      	bne.n	800454e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800447c:	2b08      	cmp	r3, #8
 800447e:	d834      	bhi.n	80044ea <UART_SetConfig+0x336>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x2d4>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044cd 	.word	0x080044cd
 8004490:	080044d5 	.word	0x080044d5
 8004494:	080044eb 	.word	0x080044eb
 8004498:	080044db 	.word	0x080044db
 800449c:	080044eb 	.word	0x080044eb
 80044a0:	080044eb 	.word	0x080044eb
 80044a4:	080044eb 	.word	0x080044eb
 80044a8:	080044e3 	.word	0x080044e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7ff fac0 	bl	8003a30 <HAL_RCC_GetPCLK1Freq>
 80044b0:	61f8      	str	r0, [r7, #28]
        break;
 80044b2:	e020      	b.n	80044f6 <UART_SetConfig+0x342>
 80044b4:	efff69f3 	.word	0xefff69f3
 80044b8:	40008000 	.word	0x40008000
 80044bc:	40013800 	.word	0x40013800
 80044c0:	40021000 	.word	0x40021000
 80044c4:	40004400 	.word	0x40004400
 80044c8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7ff fac6 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 80044d0:	61f8      	str	r0, [r7, #28]
        break;
 80044d2:	e010      	b.n	80044f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d4:	4b4c      	ldr	r3, [pc, #304]	; (8004608 <UART_SetConfig+0x454>)
 80044d6:	61fb      	str	r3, [r7, #28]
        break;
 80044d8:	e00d      	b.n	80044f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044da:	f7ff fa11 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 80044de:	61f8      	str	r0, [r7, #28]
        break;
 80044e0:	e009      	b.n	80044f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e6:	61fb      	str	r3, [r7, #28]
        break;
 80044e8:	e005      	b.n	80044f6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d077      	beq.n	80045ec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	005a      	lsls	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	441a      	add	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b0f      	cmp	r3, #15
 8004516:	d916      	bls.n	8004546 <UART_SetConfig+0x392>
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451e:	d212      	bcs.n	8004546 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	b29b      	uxth	r3, r3
 8004524:	f023 030f 	bic.w	r3, r3, #15
 8004528:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	b29b      	uxth	r3, r3
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	b29a      	uxth	r2, r3
 8004536:	8afb      	ldrh	r3, [r7, #22]
 8004538:	4313      	orrs	r3, r2
 800453a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	8afa      	ldrh	r2, [r7, #22]
 8004542:	60da      	str	r2, [r3, #12]
 8004544:	e052      	b.n	80045ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800454c:	e04e      	b.n	80045ec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800454e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004552:	2b08      	cmp	r3, #8
 8004554:	d827      	bhi.n	80045a6 <UART_SetConfig+0x3f2>
 8004556:	a201      	add	r2, pc, #4	; (adr r2, 800455c <UART_SetConfig+0x3a8>)
 8004558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455c:	08004581 	.word	0x08004581
 8004560:	08004589 	.word	0x08004589
 8004564:	08004591 	.word	0x08004591
 8004568:	080045a7 	.word	0x080045a7
 800456c:	08004597 	.word	0x08004597
 8004570:	080045a7 	.word	0x080045a7
 8004574:	080045a7 	.word	0x080045a7
 8004578:	080045a7 	.word	0x080045a7
 800457c:	0800459f 	.word	0x0800459f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004580:	f7ff fa56 	bl	8003a30 <HAL_RCC_GetPCLK1Freq>
 8004584:	61f8      	str	r0, [r7, #28]
        break;
 8004586:	e014      	b.n	80045b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004588:	f7ff fa68 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 800458c:	61f8      	str	r0, [r7, #28]
        break;
 800458e:	e010      	b.n	80045b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004590:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <UART_SetConfig+0x454>)
 8004592:	61fb      	str	r3, [r7, #28]
        break;
 8004594:	e00d      	b.n	80045b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004596:	f7ff f9b3 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 800459a:	61f8      	str	r0, [r7, #28]
        break;
 800459c:	e009      	b.n	80045b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800459e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a2:	61fb      	str	r3, [r7, #28]
        break;
 80045a4:	e005      	b.n	80045b2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045b0:	bf00      	nop
    }

    if (pclk != 0U)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d019      	beq.n	80045ec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	085a      	lsrs	r2, r3, #1
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	441a      	add	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b0f      	cmp	r3, #15
 80045d0:	d909      	bls.n	80045e6 <UART_SetConfig+0x432>
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d8:	d205      	bcs.n	80045e6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60da      	str	r2, [r3, #12]
 80045e4:	e002      	b.n	80045ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3728      	adds	r7, #40	; 0x28
 8004600:	46bd      	mov	sp, r7
 8004602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004606:	bf00      	nop
 8004608:	00f42400 	.word	0x00f42400

0800460c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01a      	beq.n	8004722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470a:	d10a      	bne.n	8004722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b098      	sub	sp, #96	; 0x60
 8004754:	af02      	add	r7, sp, #8
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004760:	f7fc fb04 	bl	8000d6c <HAL_GetTick>
 8004764:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b08      	cmp	r3, #8
 8004772:	d12e      	bne.n	80047d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800477c:	2200      	movs	r2, #0
 800477e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f88c 	bl	80048a0 <UART_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d021      	beq.n	80047d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	e853 3f00 	ldrex	r3, [r3]
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a2:	653b      	str	r3, [r7, #80]	; 0x50
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ac:	647b      	str	r3, [r7, #68]	; 0x44
 80047ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e6      	bne.n	800478e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e062      	b.n	8004898 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d149      	bne.n	8004874 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e8:	2200      	movs	r2, #0
 80047ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f856 	bl	80048a0 <UART_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d03c      	beq.n	8004874 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	623b      	str	r3, [r7, #32]
   return(result);
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800480e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004818:	633b      	str	r3, [r7, #48]	; 0x30
 800481a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800481e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e6      	bne.n	80047fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3308      	adds	r3, #8
 8004832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	60fb      	str	r3, [r7, #12]
   return(result);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0301 	bic.w	r3, r3, #1
 8004842:	64bb      	str	r3, [r7, #72]	; 0x48
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3308      	adds	r3, #8
 800484a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800484c:	61fa      	str	r2, [r7, #28]
 800484e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	69b9      	ldr	r1, [r7, #24]
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	617b      	str	r3, [r7, #20]
   return(result);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e5      	bne.n	800482c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e011      	b.n	8004898 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3758      	adds	r7, #88	; 0x58
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	4613      	mov	r3, r2
 80048ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b0:	e049      	b.n	8004946 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b8:	d045      	beq.n	8004946 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ba:	f7fc fa57 	bl	8000d6c <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d302      	bcc.n	80048d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e048      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d031      	beq.n	8004946 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d110      	bne.n	8004912 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2208      	movs	r2, #8
 80048f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 f838 	bl	800496e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2208      	movs	r2, #8
 8004902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e029      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800491c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004920:	d111      	bne.n	8004946 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800492a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f81e 	bl	800496e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e00f      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4013      	ands	r3, r2
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	429a      	cmp	r2, r3
 8004954:	bf0c      	ite	eq
 8004956:	2301      	moveq	r3, #1
 8004958:	2300      	movne	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	429a      	cmp	r2, r3
 8004962:	d0a6      	beq.n	80048b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800496e:	b480      	push	{r7}
 8004970:	b095      	sub	sp, #84	; 0x54
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800498a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004994:	643b      	str	r3, [r7, #64]	; 0x40
 8004996:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800499a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e6      	bne.n	8004976 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3308      	adds	r3, #8
 80049ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	64bb      	str	r3, [r7, #72]	; 0x48
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3308      	adds	r3, #8
 80049c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e5      	bne.n	80049a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d118      	bne.n	8004a16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	e853 3f00 	ldrex	r3, [r3]
 80049f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f023 0310 	bic.w	r3, r3, #16
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	6979      	ldr	r1, [r7, #20]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e6      	bne.n	80049e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a2a:	bf00      	nop
 8004a2c:	3754      	adds	r7, #84	; 0x54
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a36:	b084      	sub	sp, #16
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	f107 0014 	add.w	r0, r7, #20
 8004a44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	b004      	add	sp, #16
 8004a56:	4770      	bx	lr

08004a58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a68:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a8e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a92:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	f107 0014 	add.w	r0, r7, #20
 8004ae4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	b004      	add	sp, #16
 8004b16:	4770      	bx	lr

08004b18 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b09d      	sub	sp, #116	; 0x74
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	78db      	ldrb	r3, [r3, #3]
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d81f      	bhi.n	8004b8a <USB_ActivateEndpoint+0x72>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <USB_ActivateEndpoint+0x38>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b7d 	.word	0x08004b7d
 8004b58:	08004b93 	.word	0x08004b93
 8004b5c:	08004b6f 	.word	0x08004b6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b68:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004b6c:	e012      	b.n	8004b94 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b72:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b76:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004b7a:	e00b      	b.n	8004b94 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004b88:	e004      	b.n	8004b94 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004b90:	e000      	b.n	8004b94 <USB_ActivateEndpoint+0x7c>
      break;
 8004b92:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	441a      	add	r2, r3
 8004b9e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	b21b      	sxth	r3, r3
 8004bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	b21a      	sxth	r2, r3
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b21b      	sxth	r3, r3
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	b21b      	sxth	r3, r3
 8004bda:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	441a      	add	r2, r3
 8004be8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	7b1b      	ldrb	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f040 8178 	bne.w	8004efa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8084 	beq.w	8004d1c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	4413      	add	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	00da      	lsls	r2, r3, #3
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	88db      	ldrh	r3, [r3, #6]
 8004c3c:	085b      	lsrs	r3, r3, #1
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	827b      	strh	r3, [r7, #18]
 8004c56:	8a7b      	ldrh	r3, [r7, #18]
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01b      	beq.n	8004c98 <USB_ActivateEndpoint+0x180>
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c76:	823b      	strh	r3, [r7, #16]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	8a3b      	ldrh	r3, [r7, #16]
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	78db      	ldrb	r3, [r3, #3]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d020      	beq.n	8004ce2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb6:	81bb      	strh	r3, [r7, #12]
 8004cb8:	89bb      	ldrh	r3, [r7, #12]
 8004cba:	f083 0320 	eor.w	r3, r3, #32
 8004cbe:	81bb      	strh	r3, [r7, #12]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	89bb      	ldrh	r3, [r7, #12]
 8004ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8013      	strh	r3, [r2, #0]
 8004ce0:	e2d5      	b.n	800528e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf8:	81fb      	strh	r3, [r7, #14]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	441a      	add	r2, r3
 8004d04:	89fb      	ldrh	r3, [r7, #14]
 8004d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	8013      	strh	r3, [r2, #0]
 8004d1a:	e2b8      	b.n	800528e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	4413      	add	r3, r2
 8004d2e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	00da      	lsls	r2, r3, #3
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	4413      	add	r3, r2
 8004d3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	88db      	ldrh	r3, [r3, #6]
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	4413      	add	r3, r2
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	00da      	lsls	r2, r3, #3
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	801a      	strh	r2, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2b3e      	cmp	r3, #62	; 0x3e
 8004d8a:	d91d      	bls.n	8004dc8 <USB_ActivateEndpoint+0x2b0>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <USB_ActivateEndpoint+0x28e>
 8004da0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004da2:	3b01      	subs	r3, #1
 8004da4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	029b      	lsls	r3, r3, #10
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	4313      	orrs	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	e026      	b.n	8004e16 <USB_ActivateEndpoint+0x2fe>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <USB_ActivateEndpoint+0x2ce>
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	801a      	strh	r2, [r3, #0]
 8004de4:	e017      	b.n	8004e16 <USB_ActivateEndpoint+0x2fe>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <USB_ActivateEndpoint+0x2e8>
 8004dfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	029b      	lsls	r3, r3, #10
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d01b      	beq.n	8004e66 <USB_ActivateEndpoint+0x34e>
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e44:	843b      	strh	r3, [r7, #32]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	441a      	add	r2, r3
 8004e50:	8c3b      	ldrh	r3, [r7, #32]
 8004e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d124      	bne.n	8004eb8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e84:	83bb      	strh	r3, [r7, #28]
 8004e86:	8bbb      	ldrh	r3, [r7, #28]
 8004e88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e8c:	83bb      	strh	r3, [r7, #28]
 8004e8e:	8bbb      	ldrh	r3, [r7, #28]
 8004e90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e94:	83bb      	strh	r3, [r7, #28]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	441a      	add	r2, r3
 8004ea0:	8bbb      	ldrh	r3, [r7, #28]
 8004ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	8013      	strh	r3, [r2, #0]
 8004eb6:	e1ea      	b.n	800528e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	83fb      	strh	r3, [r7, #30]
 8004ed0:	8bfb      	ldrh	r3, [r7, #30]
 8004ed2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ed6:	83fb      	strh	r3, [r7, #30]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	441a      	add	r2, r3
 8004ee2:	8bfb      	ldrh	r3, [r7, #30]
 8004ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	8013      	strh	r3, [r2, #0]
 8004ef8:	e1c9      	b.n	800528e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	78db      	ldrb	r3, [r3, #3]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d11e      	bne.n	8004f40 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f18:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	441a      	add	r2, r3
 8004f26:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f32:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	8013      	strh	r3, [r2, #0]
 8004f3e:	e01d      	b.n	8004f7c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f8c:	4413      	add	r3, r2
 8004f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	00da      	lsls	r2, r3, #3
 8004f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	891b      	ldrh	r3, [r3, #8]
 8004fa4:	085b      	lsrs	r3, r3, #1
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	657b      	str	r3, [r7, #84]	; 0x54
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc0:	4413      	add	r3, r2
 8004fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	00da      	lsls	r2, r3, #3
 8004fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fcc:	4413      	add	r3, r2
 8004fce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	895b      	ldrh	r3, [r3, #10]
 8004fd8:	085b      	lsrs	r3, r3, #1
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	785b      	ldrb	r3, [r3, #1]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f040 8093 	bne.w	8005114 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004ffe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01b      	beq.n	8005042 <USB_ActivateEndpoint+0x52a>
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005020:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800502e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005036:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800503a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503e:	b29b      	uxth	r3, r3
 8005040:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005050:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d01b      	beq.n	8005092 <USB_ActivateEndpoint+0x57a>
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005070:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	441a      	add	r2, r3
 800507c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800507e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800508e:	b29b      	uxth	r3, r3
 8005090:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80050aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80050ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80050b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80050b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050b8:	873b      	strh	r3, [r7, #56]	; 0x38
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	441a      	add	r2, r3
 80050c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80050c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510e:	b29b      	uxth	r3, r3
 8005110:	8013      	strh	r3, [r2, #0]
 8005112:	e0bc      	b.n	800528e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005124:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01d      	beq.n	800516c <USB_ActivateEndpoint+0x654>
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	441a      	add	r2, r3
 8005154:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005160:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005168:	b29b      	uxth	r3, r3
 800516a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800517c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01d      	beq.n	80051c4 <USB_ActivateEndpoint+0x6ac>
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	441a      	add	r2, r3
 80051ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80051b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	78db      	ldrb	r3, [r3, #3]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d024      	beq.n	8005216 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80051e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051ea:	f083 0320 	eor.w	r3, r3, #32
 80051ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	441a      	add	r2, r3
 80051fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800520c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005210:	b29b      	uxth	r3, r3
 8005212:	8013      	strh	r3, [r2, #0]
 8005214:	e01d      	b.n	8005252 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	441a      	add	r2, r3
 800523a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800523e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800524e:	b29b      	uxth	r3, r3
 8005250:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	b29b      	uxth	r3, r3
 8005260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005268:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	441a      	add	r2, r3
 8005276:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800527a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528a:	b29b      	uxth	r3, r3
 800528c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800528e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005292:	4618      	mov	r0, r3
 8005294:	3774      	adds	r7, #116	; 0x74
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop

080052a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b08d      	sub	sp, #52	; 0x34
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	7b1b      	ldrb	r3, [r3, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 808e 	bne.w	80053d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	785b      	ldrb	r3, [r3, #1]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d044      	beq.n	8005346 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	81bb      	strh	r3, [r7, #12]
 80052ca:	89bb      	ldrh	r3, [r7, #12]
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01b      	beq.n	800530c <USB_DeactivateEndpoint+0x6c>
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	817b      	strh	r3, [r7, #10]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	441a      	add	r2, r3
 80052f6:	897b      	ldrh	r3, [r7, #10]
 80052f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005304:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005308:	b29b      	uxth	r3, r3
 800530a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005322:	813b      	strh	r3, [r7, #8]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	893b      	ldrh	r3, [r7, #8]
 8005330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005340:	b29b      	uxth	r3, r3
 8005342:	8013      	strh	r3, [r2, #0]
 8005344:	e192      	b.n	800566c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	827b      	strh	r3, [r7, #18]
 8005354:	8a7b      	ldrh	r3, [r7, #18]
 8005356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d01b      	beq.n	8005396 <USB_DeactivateEndpoint+0xf6>
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005374:	823b      	strh	r3, [r7, #16]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	441a      	add	r2, r3
 8005380:	8a3b      	ldrh	r3, [r7, #16]
 8005382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800538e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005392:	b29b      	uxth	r3, r3
 8005394:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ac:	81fb      	strh	r3, [r7, #14]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	441a      	add	r2, r3
 80053b8:	89fb      	ldrh	r3, [r7, #14]
 80053ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	8013      	strh	r3, [r2, #0]
 80053ce:	e14d      	b.n	800566c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	785b      	ldrb	r3, [r3, #1]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f040 80a5 	bne.w	8005524 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	843b      	strh	r3, [r7, #32]
 80053e8:	8c3b      	ldrh	r3, [r7, #32]
 80053ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01b      	beq.n	800542a <USB_DeactivateEndpoint+0x18a>
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005408:	83fb      	strh	r3, [r7, #30]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	441a      	add	r2, r3
 8005414:	8bfb      	ldrh	r3, [r7, #30]
 8005416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005426:	b29b      	uxth	r3, r3
 8005428:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	83bb      	strh	r3, [r7, #28]
 8005438:	8bbb      	ldrh	r3, [r7, #28]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d01b      	beq.n	800547a <USB_DeactivateEndpoint+0x1da>
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005458:	837b      	strh	r3, [r7, #26]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	441a      	add	r2, r3
 8005464:	8b7b      	ldrh	r3, [r7, #26]
 8005466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005472:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005476:	b29b      	uxth	r3, r3
 8005478:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800548c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005490:	833b      	strh	r3, [r7, #24]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	441a      	add	r2, r3
 800549c:	8b3b      	ldrh	r3, [r7, #24]
 800549e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	82fb      	strh	r3, [r7, #22]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	8afb      	ldrh	r3, [r7, #22]
 80054d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005500:	82bb      	strh	r3, [r7, #20]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	441a      	add	r2, r3
 800550c:	8abb      	ldrh	r3, [r7, #20]
 800550e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551e:	b29b      	uxth	r3, r3
 8005520:	8013      	strh	r3, [r2, #0]
 8005522:	e0a3      	b.n	800566c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005532:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01b      	beq.n	8005574 <USB_DeactivateEndpoint+0x2d4>
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800556c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005570:	b29b      	uxth	r3, r3
 8005572:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005582:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01b      	beq.n	80055c4 <USB_DeactivateEndpoint+0x324>
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	853b      	strh	r3, [r7, #40]	; 0x28
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	441a      	add	r2, r3
 80055ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	441a      	add	r2, r3
 80055e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005612:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	441a      	add	r2, r3
 800561e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005630:	b29b      	uxth	r3, r3
 8005632:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	847b      	strh	r3, [r7, #34]	; 0x22
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	441a      	add	r2, r3
 8005656:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800565c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005668:	b29b      	uxth	r3, r3
 800566a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3734      	adds	r7, #52	; 0x34
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b0c2      	sub	sp, #264	; 0x108
 800567e:	af00      	add	r7, sp, #0
 8005680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005688:	6018      	str	r0, [r3, #0]
 800568a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800568e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005692:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	f040 86b7 	bne.w	8006414 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80056a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d908      	bls.n	80056d4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80056c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056d2:	e007      	b.n	80056e4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80056d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80056e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	7b1b      	ldrb	r3, [r3, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d13a      	bne.n	800576a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6959      	ldr	r1, [r3, #20]
 8005700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	88da      	ldrh	r2, [r3, #6]
 800570c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005710:	b29b      	uxth	r3, r3
 8005712:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005716:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800571a:	6800      	ldr	r0, [r0, #0]
 800571c:	f001 fcb9 	bl	8007092 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	00da      	lsls	r2, r3, #3
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4413      	add	r3, r2
 8005756:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	801a      	strh	r2, [r3, #0]
 8005766:	f000 be1f 	b.w	80063a8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800576a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	78db      	ldrb	r3, [r3, #3]
 8005776:	2b02      	cmp	r3, #2
 8005778:	f040 8462 	bne.w	8006040 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800577c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6a1a      	ldr	r2, [r3, #32]
 8005788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	429a      	cmp	r2, r3
 8005796:	f240 83df 	bls.w	8005f58 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800579a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80057c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	441a      	add	r2, r3
 80057de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80057f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6a1a      	ldr	r2, [r3, #32]
 8005802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005806:	1ad2      	subs	r2, r2, r3
 8005808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005818:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29b      	uxth	r3, r3
 8005832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 81c7 	beq.w	8005bca <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800583c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	633b      	str	r3, [r7, #48]	; 0x30
 8005848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d177      	bne.n	8005948 <USB_EPStartXfer+0x2ce>
 8005858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
 8005864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005868:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005872:	b29b      	uxth	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	4413      	add	r3, r2
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
 800587c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	00da      	lsls	r2, r3, #3
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	4413      	add	r3, r2
 800588e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29b      	uxth	r3, r3
 800589a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800589e:	b29a      	uxth	r2, r3
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	801a      	strh	r2, [r3, #0]
 80058a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a8:	2b3e      	cmp	r3, #62	; 0x3e
 80058aa:	d921      	bls.n	80058f0 <USB_EPStartXfer+0x276>
 80058ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d104      	bne.n	80058cc <USB_EPStartXfer+0x252>
 80058c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058c6:	3b01      	subs	r3, #1
 80058c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	029b      	lsls	r3, r3, #10
 80058da:	b29b      	uxth	r3, r3
 80058dc:	4313      	orrs	r3, r2
 80058de:	b29b      	uxth	r3, r3
 80058e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	e050      	b.n	8005992 <USB_EPStartXfer+0x318>
 80058f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <USB_EPStartXfer+0x294>
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005906:	b29a      	uxth	r2, r3
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	801a      	strh	r2, [r3, #0]
 800590c:	e041      	b.n	8005992 <USB_EPStartXfer+0x318>
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <USB_EPStartXfer+0x2b4>
 8005924:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005928:	3301      	adds	r3, #1
 800592a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29a      	uxth	r2, r3
 8005934:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005938:	b29b      	uxth	r3, r3
 800593a:	029b      	lsls	r3, r3, #10
 800593c:	b29b      	uxth	r3, r3
 800593e:	4313      	orrs	r3, r2
 8005940:	b29a      	uxth	r2, r3
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e024      	b.n	8005992 <USB_EPStartXfer+0x318>
 8005948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d11c      	bne.n	8005992 <USB_EPStartXfer+0x318>
 8005958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005966:	b29b      	uxth	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	4413      	add	r3, r2
 800596e:	633b      	str	r3, [r7, #48]	; 0x30
 8005970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	00da      	lsls	r2, r3, #3
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	4413      	add	r3, r2
 8005982:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800598c:	b29a      	uxth	r2, r3
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	895b      	ldrh	r3, [r3, #10]
 800599e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6959      	ldr	r1, [r3, #20]
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059c0:	6800      	ldr	r0, [r0, #0]
 80059c2:	f001 fb66 	bl	8007092 <USB_WritePMA>
            ep->xfer_buff += len;
 80059c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059d6:	441a      	add	r2, r3
 80059d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d90f      	bls.n	8005a20 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6a1a      	ldr	r2, [r3, #32]
 8005a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a10:	1ad2      	subs	r2, r2, r3
 8005a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	621a      	str	r2, [r3, #32]
 8005a1e:	e00e      	b.n	8005a3e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	785b      	ldrb	r3, [r3, #1]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d177      	bne.n	8005b3e <USB_EPStartXfer+0x4c4>
 8005a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	4413      	add	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	00da      	lsls	r2, r3, #3
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	4413      	add	r3, r2
 8005a84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa0:	d921      	bls.n	8005ae6 <USB_EPStartXfer+0x46c>
 8005aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa6:	095b      	lsrs	r3, r3, #5
 8005aa8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab0:	f003 031f 	and.w	r3, r3, #31
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d104      	bne.n	8005ac2 <USB_EPStartXfer+0x448>
 8005ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005abc:	3b01      	subs	r3, #1
 8005abe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	029b      	lsls	r3, r3, #10
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	e056      	b.n	8005b94 <USB_EPStartXfer+0x51a>
 8005ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <USB_EPStartXfer+0x48a>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	801a      	strh	r2, [r3, #0]
 8005b02:	e047      	b.n	8005b94 <USB_EPStartXfer+0x51a>
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b08:	085b      	lsrs	r3, r3, #1
 8005b0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d004      	beq.n	8005b24 <USB_EPStartXfer+0x4aa>
 8005b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b1e:	3301      	adds	r3, #1
 8005b20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	029b      	lsls	r3, r3, #10
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	4313      	orrs	r3, r2
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	801a      	strh	r2, [r3, #0]
 8005b3c:	e02a      	b.n	8005b94 <USB_EPStartXfer+0x51a>
 8005b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	785b      	ldrb	r3, [r3, #1]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d122      	bne.n	8005b94 <USB_EPStartXfer+0x51a>
 8005b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	623b      	str	r3, [r7, #32]
 8005b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	4413      	add	r3, r2
 8005b70:	623b      	str	r3, [r7, #32]
 8005b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	00da      	lsls	r2, r3, #3
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	4413      	add	r3, r2
 8005b84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	891b      	ldrh	r3, [r3, #8]
 8005ba0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6959      	ldr	r1, [r3, #20]
 8005bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005bba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005bbe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005bc2:	6800      	ldr	r0, [r0, #0]
 8005bc4:	f001 fa65 	bl	8007092 <USB_WritePMA>
 8005bc8:	e3ee      	b.n	80063a8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d177      	bne.n	8005cca <USB_EPStartXfer+0x650>
 8005bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bfa:	4413      	add	r3, r2
 8005bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	00da      	lsls	r2, r3, #3
 8005c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c0e:	4413      	add	r3, r2
 8005c10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c14:	647b      	str	r3, [r7, #68]	; 0x44
 8005c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c2c:	d921      	bls.n	8005c72 <USB_EPStartXfer+0x5f8>
 8005c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3c:	f003 031f 	and.w	r3, r3, #31
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <USB_EPStartXfer+0x5d4>
 8005c44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	029b      	lsls	r3, r3, #10
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e056      	b.n	8005d20 <USB_EPStartXfer+0x6a6>
 8005c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <USB_EPStartXfer+0x616>
 8005c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	e047      	b.n	8005d20 <USB_EPStartXfer+0x6a6>
 8005c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <USB_EPStartXfer+0x636>
 8005ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005caa:	3301      	adds	r3, #1
 8005cac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	029b      	lsls	r3, r3, #10
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc6:	801a      	strh	r2, [r3, #0]
 8005cc8:	e02a      	b.n	8005d20 <USB_EPStartXfer+0x6a6>
 8005cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d122      	bne.n	8005d20 <USB_EPStartXfer+0x6a6>
 8005cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cfa:	4413      	add	r3, r2
 8005cfc:	653b      	str	r3, [r7, #80]	; 0x50
 8005cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	00da      	lsls	r2, r3, #3
 8005d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0e:	4413      	add	r3, r2
 8005d10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	891b      	ldrh	r3, [r3, #8]
 8005d2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6959      	ldr	r1, [r3, #20]
 8005d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d4e:	6800      	ldr	r0, [r0, #0]
 8005d50:	f001 f99f 	bl	8007092 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695a      	ldr	r2, [r3, #20]
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d64:	441a      	add	r2, r3
 8005d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6a1a      	ldr	r2, [r3, #32]
 8005d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d90f      	bls.n	8005dae <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6a1a      	ldr	r2, [r3, #32]
 8005d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9e:	1ad2      	subs	r2, r2, r3
 8005da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	621a      	str	r2, [r3, #32]
 8005dac:	e00e      	b.n	8005dcc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8005dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	785b      	ldrb	r3, [r3, #1]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d177      	bne.n	8005ed8 <USB_EPStartXfer+0x85e>
 8005de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	4413      	add	r3, r2
 8005e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	00da      	lsls	r2, r3, #3
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e38:	2b3e      	cmp	r3, #62	; 0x3e
 8005e3a:	d921      	bls.n	8005e80 <USB_EPStartXfer+0x806>
 8005e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4a:	f003 031f 	and.w	r3, r3, #31
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d104      	bne.n	8005e5c <USB_EPStartXfer+0x7e2>
 8005e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e56:	3b01      	subs	r3, #1
 8005e58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	029b      	lsls	r3, r3, #10
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	e050      	b.n	8005f22 <USB_EPStartXfer+0x8a8>
 8005e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <USB_EPStartXfer+0x824>
 8005e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	e041      	b.n	8005f22 <USB_EPStartXfer+0x8a8>
 8005e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea2:	085b      	lsrs	r3, r3, #1
 8005ea4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d004      	beq.n	8005ebe <USB_EPStartXfer+0x844>
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb8:	3301      	adds	r3, #1
 8005eba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	029b      	lsls	r3, r3, #10
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed4:	801a      	strh	r2, [r3, #0]
 8005ed6:	e024      	b.n	8005f22 <USB_EPStartXfer+0x8a8>
 8005ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d11c      	bne.n	8005f22 <USB_EPStartXfer+0x8a8>
 8005ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efc:	4413      	add	r3, r2
 8005efe:	643b      	str	r3, [r7, #64]	; 0x40
 8005f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	00da      	lsls	r2, r3, #3
 8005f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f10:	4413      	add	r3, r2
 8005f12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	895b      	ldrh	r3, [r3, #10]
 8005f2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6959      	ldr	r1, [r3, #20]
 8005f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f50:	6800      	ldr	r0, [r0, #0]
 8005f52:	f001 f89e 	bl	8007092 <USB_WritePMA>
 8005f56:	e227      	b.n	80063a8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	441a      	add	r2, r3
 8005fac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe4:	4413      	add	r3, r2
 8005fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	00da      	lsls	r2, r3, #3
 8005ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ffe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006004:	b29a      	uxth	r2, r3
 8006006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006008:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800600a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	891b      	ldrh	r3, [r3, #8]
 8006016:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800601a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6959      	ldr	r1, [r3, #20]
 8006026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602a:	b29b      	uxth	r3, r3
 800602c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006030:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006034:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006038:	6800      	ldr	r0, [r0, #0]
 800603a:	f001 f82a 	bl	8007092 <USB_WritePMA>
 800603e:	e1b3      	b.n	80063a8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006050:	1ad2      	subs	r2, r2, r3
 8006052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800605e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006062:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 80c6 	beq.w	8006212 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	673b      	str	r3, [r7, #112]	; 0x70
 8006092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d177      	bne.n	8006192 <USB_EPStartXfer+0xb18>
 80060a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80060ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060bc:	b29b      	uxth	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060c2:	4413      	add	r3, r2
 80060c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80060c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	00da      	lsls	r2, r3, #3
 80060d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060d6:	4413      	add	r3, r2
 80060d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060dc:	667b      	str	r3, [r7, #100]	; 0x64
 80060de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ec:	801a      	strh	r2, [r3, #0]
 80060ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f2:	2b3e      	cmp	r3, #62	; 0x3e
 80060f4:	d921      	bls.n	800613a <USB_EPStartXfer+0xac0>
 80060f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006104:	f003 031f 	and.w	r3, r3, #31
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <USB_EPStartXfer+0xa9c>
 800610c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006110:	3b01      	subs	r3, #1
 8006112:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006116:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29a      	uxth	r2, r3
 800611c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006120:	b29b      	uxth	r3, r3
 8006122:	029b      	lsls	r3, r3, #10
 8006124:	b29b      	uxth	r3, r3
 8006126:	4313      	orrs	r3, r2
 8006128:	b29b      	uxth	r3, r3
 800612a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006132:	b29a      	uxth	r2, r3
 8006134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006136:	801a      	strh	r2, [r3, #0]
 8006138:	e050      	b.n	80061dc <USB_EPStartXfer+0xb62>
 800613a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <USB_EPStartXfer+0xade>
 8006142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800614c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006150:	b29a      	uxth	r2, r3
 8006152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006154:	801a      	strh	r2, [r3, #0]
 8006156:	e041      	b.n	80061dc <USB_EPStartXfer+0xb62>
 8006158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800615c:	085b      	lsrs	r3, r3, #1
 800615e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <USB_EPStartXfer+0xafe>
 800616e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006172:	3301      	adds	r3, #1
 8006174:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29a      	uxth	r2, r3
 800617e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006182:	b29b      	uxth	r3, r3
 8006184:	029b      	lsls	r3, r3, #10
 8006186:	b29b      	uxth	r3, r3
 8006188:	4313      	orrs	r3, r2
 800618a:	b29a      	uxth	r2, r3
 800618c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	e024      	b.n	80061dc <USB_EPStartXfer+0xb62>
 8006192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	785b      	ldrb	r3, [r3, #1]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d11c      	bne.n	80061dc <USB_EPStartXfer+0xb62>
 80061a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061b6:	4413      	add	r3, r2
 80061b8:	673b      	str	r3, [r7, #112]	; 0x70
 80061ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	00da      	lsls	r2, r3, #3
 80061c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ca:	4413      	add	r3, r2
 80061cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80061dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	895b      	ldrh	r3, [r3, #10]
 80061e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6959      	ldr	r1, [r3, #20]
 80061f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006202:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006206:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800620a:	6800      	ldr	r0, [r0, #0]
 800620c:	f000 ff41 	bl	8007092 <USB_WritePMA>
 8006210:	e0ca      	b.n	80063a8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d177      	bne.n	8006312 <USB_EPStartXfer+0xc98>
 8006222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800622e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623c:	b29b      	uxth	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006242:	4413      	add	r3, r2
 8006244:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	00da      	lsls	r2, r3, #3
 8006254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006256:	4413      	add	r3, r2
 8006258:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800625c:	67bb      	str	r3, [r7, #120]	; 0x78
 800625e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006268:	b29a      	uxth	r2, r3
 800626a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800626c:	801a      	strh	r2, [r3, #0]
 800626e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006272:	2b3e      	cmp	r3, #62	; 0x3e
 8006274:	d921      	bls.n	80062ba <USB_EPStartXfer+0xc40>
 8006276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627a:	095b      	lsrs	r3, r3, #5
 800627c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	2b00      	cmp	r3, #0
 800628a:	d104      	bne.n	8006296 <USB_EPStartXfer+0xc1c>
 800628c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006290:	3b01      	subs	r3, #1
 8006292:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29a      	uxth	r2, r3
 800629c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	029b      	lsls	r3, r3, #10
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	4313      	orrs	r3, r2
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b6:	801a      	strh	r2, [r3, #0]
 80062b8:	e05c      	b.n	8006374 <USB_EPStartXfer+0xcfa>
 80062ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <USB_EPStartXfer+0xc5e>
 80062c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062d4:	801a      	strh	r2, [r3, #0]
 80062d6:	e04d      	b.n	8006374 <USB_EPStartXfer+0xcfa>
 80062d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062dc:	085b      	lsrs	r3, r3, #1
 80062de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d004      	beq.n	80062f8 <USB_EPStartXfer+0xc7e>
 80062ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062f2:	3301      	adds	r3, #1
 80062f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006302:	b29b      	uxth	r3, r3
 8006304:	029b      	lsls	r3, r3, #10
 8006306:	b29b      	uxth	r3, r3
 8006308:	4313      	orrs	r3, r2
 800630a:	b29a      	uxth	r2, r3
 800630c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	e030      	b.n	8006374 <USB_EPStartXfer+0xcfa>
 8006312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d128      	bne.n	8006374 <USB_EPStartXfer+0xcfa>
 8006322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006326:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800633e:	b29b      	uxth	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006346:	4413      	add	r3, r2
 8006348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800634c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	00da      	lsls	r2, r3, #3
 800635a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800635e:	4413      	add	r3, r2
 8006360:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636c:	b29a      	uxth	r2, r3
 800636e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006372:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	891b      	ldrh	r3, [r3, #8]
 8006380:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6959      	ldr	r1, [r3, #20]
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006394:	b29b      	uxth	r3, r3
 8006396:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800639a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800639e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063a2:	6800      	ldr	r0, [r0, #0]
 80063a4:	f000 fe75 	bl	8007092 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80063a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ce:	817b      	strh	r3, [r7, #10]
 80063d0:	897b      	ldrh	r3, [r7, #10]
 80063d2:	f083 0310 	eor.w	r3, r3, #16
 80063d6:	817b      	strh	r3, [r7, #10]
 80063d8:	897b      	ldrh	r3, [r7, #10]
 80063da:	f083 0320 	eor.w	r3, r3, #32
 80063de:	817b      	strh	r3, [r7, #10]
 80063e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	441a      	add	r2, r3
 80063fa:	897b      	ldrh	r3, [r7, #10]
 80063fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640c:	b29b      	uxth	r3, r3
 800640e:	8013      	strh	r3, [r2, #0]
 8006410:	f000 bcde 	b.w	8006dd0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	7b1b      	ldrb	r3, [r3, #12]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 80bb 	bne.w	800659c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	429a      	cmp	r2, r3
 8006440:	d917      	bls.n	8006472 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	619a      	str	r2, [r3, #24]
 8006470:	e00e      	b.n	8006490 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2200      	movs	r2, #0
 800648e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800649e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	461a      	mov	r2, r3
 80064b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80064b4:	4413      	add	r3, r2
 80064b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	00da      	lsls	r2, r3, #3
 80064c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80064cc:	4413      	add	r3, r2
 80064ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ee:	2b3e      	cmp	r3, #62	; 0x3e
 80064f0:	d924      	bls.n	800653c <USB_EPStartXfer+0xec2>
 80064f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2b00      	cmp	r3, #0
 8006506:	d104      	bne.n	8006512 <USB_EPStartXfer+0xe98>
 8006508:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800650c:	3b01      	subs	r3, #1
 800650e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29a      	uxth	r2, r3
 800651a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800651e:	b29b      	uxth	r3, r3
 8006520:	029b      	lsls	r3, r3, #10
 8006522:	b29b      	uxth	r3, r3
 8006524:	4313      	orrs	r3, r2
 8006526:	b29b      	uxth	r3, r3
 8006528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006530:	b29a      	uxth	r2, r3
 8006532:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	f000 bc10 	b.w	8006d5c <USB_EPStartXfer+0x16e2>
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10c      	bne.n	800655e <USB_EPStartXfer+0xee4>
 8006544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006554:	b29a      	uxth	r2, r3
 8006556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800655a:	801a      	strh	r2, [r3, #0]
 800655c:	e3fe      	b.n	8006d5c <USB_EPStartXfer+0x16e2>
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006562:	085b      	lsrs	r3, r3, #1
 8006564:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d004      	beq.n	800657e <USB_EPStartXfer+0xf04>
 8006574:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006578:	3301      	adds	r3, #1
 800657a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800657e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	b29a      	uxth	r2, r3
 8006586:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800658a:	b29b      	uxth	r3, r3
 800658c:	029b      	lsls	r3, r3, #10
 800658e:	b29b      	uxth	r3, r3
 8006590:	4313      	orrs	r3, r2
 8006592:	b29a      	uxth	r2, r3
 8006594:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006598:	801a      	strh	r2, [r3, #0]
 800659a:	e3df      	b.n	8006d5c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800659c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	78db      	ldrb	r3, [r3, #3]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	f040 8218 	bne.w	80069de <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80065ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f040 809d 	bne.w	80066fa <USB_EPStartXfer+0x1080>
 80065c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065dc:	b29b      	uxth	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065e4:	4413      	add	r3, r2
 80065e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	00da      	lsls	r2, r3, #3
 80065f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006602:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006606:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006612:	b29a      	uxth	r2, r3
 8006614:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006618:	801a      	strh	r2, [r3, #0]
 800661a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b3e      	cmp	r3, #62	; 0x3e
 8006628:	d92b      	bls.n	8006682 <USB_EPStartXfer+0x1008>
 800662a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	095b      	lsrs	r3, r3, #5
 8006638:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800663c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f003 031f 	and.w	r3, r3, #31
 800664c:	2b00      	cmp	r3, #0
 800664e:	d104      	bne.n	800665a <USB_EPStartXfer+0xfe0>
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006654:	3b01      	subs	r3, #1
 8006656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800665a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	b29a      	uxth	r2, r3
 8006662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006666:	b29b      	uxth	r3, r3
 8006668:	029b      	lsls	r3, r3, #10
 800666a:	b29b      	uxth	r3, r3
 800666c:	4313      	orrs	r3, r2
 800666e:	b29b      	uxth	r3, r3
 8006670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006678:	b29a      	uxth	r2, r3
 800667a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800667e:	801a      	strh	r2, [r3, #0]
 8006680:	e070      	b.n	8006764 <USB_EPStartXfer+0x10ea>
 8006682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10c      	bne.n	80066ac <USB_EPStartXfer+0x1032>
 8006692:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	e05b      	b.n	8006764 <USB_EPStartXfer+0x10ea>
 80066ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d004      	beq.n	80066dc <USB_EPStartXfer+0x1062>
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d6:	3301      	adds	r3, #1
 80066d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	029b      	lsls	r3, r3, #10
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	4313      	orrs	r3, r2
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066f6:	801a      	strh	r2, [r3, #0]
 80066f8:	e034      	b.n	8006764 <USB_EPStartXfer+0x10ea>
 80066fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d12c      	bne.n	8006764 <USB_EPStartXfer+0x10ea>
 800670a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800672e:	4413      	add	r3, r2
 8006730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	00da      	lsls	r2, r3, #3
 8006742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006746:	4413      	add	r3, r2
 8006748:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800674c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	b29a      	uxth	r2, r3
 800675e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006762:	801a      	strh	r2, [r3, #0]
 8006764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 809d 	bne.w	80068be <USB_EPStartXfer+0x1244>
 8006784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067a8:	4413      	add	r3, r2
 80067aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	00da      	lsls	r2, r3, #3
 80067bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067c0:	4413      	add	r3, r2
 80067c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067dc:	801a      	strh	r2, [r3, #0]
 80067de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2b3e      	cmp	r3, #62	; 0x3e
 80067ec:	d92b      	bls.n	8006846 <USB_EPStartXfer+0x11cc>
 80067ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f003 031f 	and.w	r3, r3, #31
 8006810:	2b00      	cmp	r3, #0
 8006812:	d104      	bne.n	800681e <USB_EPStartXfer+0x11a4>
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006818:	3b01      	subs	r3, #1
 800681a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800681e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29a      	uxth	r2, r3
 8006826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682a:	b29b      	uxth	r3, r3
 800682c:	029b      	lsls	r3, r3, #10
 800682e:	b29b      	uxth	r3, r3
 8006830:	4313      	orrs	r3, r2
 8006832:	b29b      	uxth	r3, r3
 8006834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683c:	b29a      	uxth	r2, r3
 800683e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006842:	801a      	strh	r2, [r3, #0]
 8006844:	e069      	b.n	800691a <USB_EPStartXfer+0x12a0>
 8006846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10c      	bne.n	8006870 <USB_EPStartXfer+0x11f6>
 8006856:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006866:	b29a      	uxth	r2, r3
 8006868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800686c:	801a      	strh	r2, [r3, #0]
 800686e:	e054      	b.n	800691a <USB_EPStartXfer+0x12a0>
 8006870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d004      	beq.n	80068a0 <USB_EPStartXfer+0x1226>
 8006896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689a:	3301      	adds	r3, #1
 800689c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	029b      	lsls	r3, r3, #10
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	4313      	orrs	r3, r2
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068ba:	801a      	strh	r2, [r3, #0]
 80068bc:	e02d      	b.n	800691a <USB_EPStartXfer+0x12a0>
 80068be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	785b      	ldrb	r3, [r3, #1]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d125      	bne.n	800691a <USB_EPStartXfer+0x12a0>
 80068ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068dc:	b29b      	uxth	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068e4:	4413      	add	r3, r2
 80068e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	00da      	lsls	r2, r3, #3
 80068f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068fc:	4413      	add	r3, r2
 80068fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	b29a      	uxth	r2, r3
 8006914:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006918:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800691a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 8218 	beq.w	8006d5c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800692c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800694c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d005      	beq.n	8006964 <USB_EPStartXfer+0x12ea>
 8006958:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10d      	bne.n	8006980 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006964:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800696c:	2b00      	cmp	r3, #0
 800696e:	f040 81f5 	bne.w	8006d5c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006972:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	f040 81ee 	bne.w	8006d5c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80069aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	441a      	add	r2, r3
 80069c4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80069c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069d8:	b29b      	uxth	r3, r3
 80069da:	8013      	strh	r3, [r2, #0]
 80069dc:	e1be      	b.n	8006d5c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80069de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	78db      	ldrb	r3, [r3, #3]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	f040 81b4 	bne.w	8006d58 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d917      	bls.n	8006a3c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699a      	ldr	r2, [r3, #24]
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2c:	1ad2      	subs	r2, r2, r3
 8006a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	619a      	str	r2, [r3, #24]
 8006a3a:	e00e      	b.n	8006a5a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2200      	movs	r2, #0
 8006a58:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	785b      	ldrb	r3, [r3, #1]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f040 8085 	bne.w	8006b76 <USB_EPStartXfer+0x14fc>
 8006a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a90:	4413      	add	r3, r2
 8006a92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	00da      	lsls	r2, r3, #3
 8006aa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006aae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ab2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aca:	2b3e      	cmp	r3, #62	; 0x3e
 8006acc:	d923      	bls.n	8006b16 <USB_EPStartXfer+0x149c>
 8006ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006adc:	f003 031f 	and.w	r3, r3, #31
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d104      	bne.n	8006aee <USB_EPStartXfer+0x1474>
 8006ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	029b      	lsls	r3, r3, #10
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	4313      	orrs	r3, r2
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b12:	801a      	strh	r2, [r3, #0]
 8006b14:	e060      	b.n	8006bd8 <USB_EPStartXfer+0x155e>
 8006b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10c      	bne.n	8006b38 <USB_EPStartXfer+0x14be>
 8006b1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b34:	801a      	strh	r2, [r3, #0]
 8006b36:	e04f      	b.n	8006bd8 <USB_EPStartXfer+0x155e>
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b3c:	085b      	lsrs	r3, r3, #1
 8006b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <USB_EPStartXfer+0x14de>
 8006b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b52:	3301      	adds	r3, #1
 8006b54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	029b      	lsls	r3, r3, #10
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	e030      	b.n	8006bd8 <USB_EPStartXfer+0x155e>
 8006b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	785b      	ldrb	r3, [r3, #1]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d128      	bne.n	8006bd8 <USB_EPStartXfer+0x155e>
 8006b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006baa:	4413      	add	r3, r2
 8006bac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	00da      	lsls	r2, r3, #3
 8006bbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	785b      	ldrb	r3, [r3, #1]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f040 8085 	bne.w	8006d02 <USB_EPStartXfer+0x1688>
 8006bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	00da      	lsls	r2, r3, #3
 8006c30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c34:	4413      	add	r3, r2
 8006c36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c50:	801a      	strh	r2, [r3, #0]
 8006c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c56:	2b3e      	cmp	r3, #62	; 0x3e
 8006c58:	d923      	bls.n	8006ca2 <USB_EPStartXfer+0x1628>
 8006c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <USB_EPStartXfer+0x1600>
 8006c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c74:	3b01      	subs	r3, #1
 8006c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	029b      	lsls	r3, r3, #10
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c9e:	801a      	strh	r2, [r3, #0]
 8006ca0:	e05c      	b.n	8006d5c <USB_EPStartXfer+0x16e2>
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10c      	bne.n	8006cc4 <USB_EPStartXfer+0x164a>
 8006caa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cc0:	801a      	strh	r2, [r3, #0]
 8006cc2:	e04b      	b.n	8006d5c <USB_EPStartXfer+0x16e2>
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc8:	085b      	lsrs	r3, r3, #1
 8006cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d004      	beq.n	8006ce4 <USB_EPStartXfer+0x166a>
 8006cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cde:	3301      	adds	r3, #1
 8006ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ce4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	029b      	lsls	r3, r3, #10
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cfe:	801a      	strh	r2, [r3, #0]
 8006d00:	e02c      	b.n	8006d5c <USB_EPStartXfer+0x16e2>
 8006d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	785b      	ldrb	r3, [r3, #1]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d124      	bne.n	8006d5c <USB_EPStartXfer+0x16e2>
 8006d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	461a      	mov	r2, r3
 8006d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d28:	4413      	add	r3, r2
 8006d2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	00da      	lsls	r2, r3, #3
 8006d3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d40:	4413      	add	r3, r2
 8006d42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d54:	801a      	strh	r2, [r3, #0]
 8006d56:	e001      	b.n	8006d5c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e03a      	b.n	8006dd2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d86:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d8a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d8e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d92:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d9a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	441a      	add	r2, r3
 8006db8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	785b      	ldrb	r3, [r3, #1]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d020      	beq.n	8006e30 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e04:	81bb      	strh	r3, [r7, #12]
 8006e06:	89bb      	ldrh	r3, [r7, #12]
 8006e08:	f083 0310 	eor.w	r3, r3, #16
 8006e0c:	81bb      	strh	r3, [r7, #12]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	441a      	add	r2, r3
 8006e18:	89bb      	ldrh	r3, [r7, #12]
 8006e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	8013      	strh	r3, [r2, #0]
 8006e2e:	e01f      	b.n	8006e70 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e46:	81fb      	strh	r3, [r7, #14]
 8006e48:	89fb      	ldrh	r3, [r7, #14]
 8006e4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e4e:	81fb      	strh	r3, [r7, #14]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	441a      	add	r2, r3
 8006e5a:	89fb      	ldrh	r3, [r7, #14]
 8006e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b087      	sub	sp, #28
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	7b1b      	ldrb	r3, [r3, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f040 809d 	bne.w	8006fcc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	785b      	ldrb	r3, [r3, #1]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d04c      	beq.n	8006f34 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	823b      	strh	r3, [r7, #16]
 8006ea8:	8a3b      	ldrh	r3, [r7, #16]
 8006eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01b      	beq.n	8006eea <USB_EPClearStall+0x6c>
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec8:	81fb      	strh	r3, [r7, #14]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	441a      	add	r2, r3
 8006ed4:	89fb      	ldrh	r3, [r7, #14]
 8006ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ee2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	78db      	ldrb	r3, [r3, #3]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d06c      	beq.n	8006fcc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f08:	81bb      	strh	r3, [r7, #12]
 8006f0a:	89bb      	ldrh	r3, [r7, #12]
 8006f0c:	f083 0320 	eor.w	r3, r3, #32
 8006f10:	81bb      	strh	r3, [r7, #12]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	441a      	add	r2, r3
 8006f1c:	89bb      	ldrh	r3, [r7, #12]
 8006f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	8013      	strh	r3, [r2, #0]
 8006f32:	e04b      	b.n	8006fcc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	82fb      	strh	r3, [r7, #22]
 8006f42:	8afb      	ldrh	r3, [r7, #22]
 8006f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01b      	beq.n	8006f84 <USB_EPClearStall+0x106>
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f62:	82bb      	strh	r3, [r7, #20]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	441a      	add	r2, r3
 8006f6e:	8abb      	ldrh	r3, [r7, #20]
 8006f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9a:	827b      	strh	r3, [r7, #18]
 8006f9c:	8a7b      	ldrh	r3, [r7, #18]
 8006f9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fa2:	827b      	strh	r3, [r7, #18]
 8006fa4:	8a7b      	ldrh	r3, [r7, #18]
 8006fa6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006faa:	827b      	strh	r3, [r7, #18]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	441a      	add	r2, r3
 8006fb6:	8a7b      	ldrh	r3, [r7, #18]
 8006fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006fe6:	78fb      	ldrb	r3, [r7, #3]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d103      	bne.n	8006ff4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2280      	movs	r2, #128	; 0x80
 8006ff0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007010:	b29b      	uxth	r3, r3
 8007012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701a:	b29a      	uxth	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800703e:	b29b      	uxth	r3, r3
 8007040:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007044:	b29a      	uxth	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007068:	b29b      	uxth	r3, r3
 800706a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800706c:	68fb      	ldr	r3, [r7, #12]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007092:	b480      	push	{r7}
 8007094:	b08b      	sub	sp, #44	; 0x2c
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	4611      	mov	r1, r2
 800709e:	461a      	mov	r2, r3
 80070a0:	460b      	mov	r3, r1
 80070a2:	80fb      	strh	r3, [r7, #6]
 80070a4:	4613      	mov	r3, r2
 80070a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80070a8:	88bb      	ldrh	r3, [r7, #4]
 80070aa:	3301      	adds	r3, #1
 80070ac:	085b      	lsrs	r3, r3, #1
 80070ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070b8:	88fa      	ldrh	r2, [r7, #6]
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070c2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
 80070c8:	e01b      	b.n	8007102 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	3301      	adds	r3, #1
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	b21a      	sxth	r2, r3
 80070da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070de:	4313      	orrs	r3, r2
 80070e0:	b21b      	sxth	r3, r3
 80070e2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	8a7a      	ldrh	r2, [r7, #18]
 80070e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	3302      	adds	r3, #2
 80070ee:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	3301      	adds	r3, #1
 80070f4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	3301      	adds	r3, #1
 80070fa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	3b01      	subs	r3, #1
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e0      	bne.n	80070ca <USB_WritePMA+0x38>
  }
}
 8007108:	bf00      	nop
 800710a:	bf00      	nop
 800710c:	372c      	adds	r7, #44	; 0x2c
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007116:	b480      	push	{r7}
 8007118:	b08b      	sub	sp, #44	; 0x2c
 800711a:	af00      	add	r7, sp, #0
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	4611      	mov	r1, r2
 8007122:	461a      	mov	r2, r3
 8007124:	460b      	mov	r3, r1
 8007126:	80fb      	strh	r3, [r7, #6]
 8007128:	4613      	mov	r3, r2
 800712a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800712c:	88bb      	ldrh	r3, [r7, #4]
 800712e:	085b      	lsrs	r3, r3, #1
 8007130:	b29b      	uxth	r3, r3
 8007132:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800713c:	88fa      	ldrh	r2, [r7, #6]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007146:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
 800714c:	e018      	b.n	8007180 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	b29b      	uxth	r3, r3
 8007154:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	3302      	adds	r3, #2
 800715a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	b2da      	uxtb	r2, r3
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	3301      	adds	r3, #1
 8007168:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	0a1b      	lsrs	r3, r3, #8
 800716e:	b2da      	uxtb	r2, r3
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	3301      	adds	r3, #1
 8007178:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	3b01      	subs	r3, #1
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e3      	bne.n	800714e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007186:	88bb      	ldrh	r3, [r7, #4]
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	b29b      	uxth	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d007      	beq.n	80071a2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	b2da      	uxtb	r2, r3
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	701a      	strb	r2, [r3, #0]
  }
}
 80071a2:	bf00      	nop
 80071a4:	372c      	adds	r7, #44	; 0x2c
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
	...

080071b0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80071bc:	2010      	movs	r0, #16
 80071be:	f002 f95f 	bl	8009480 <USBD_static_malloc>
 80071c2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	32b0      	adds	r2, #176	; 0xb0
 80071d4:	2100      	movs	r1, #0
 80071d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80071da:	2302      	movs	r3, #2
 80071dc:	e048      	b.n	8007270 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	32b0      	adds	r2, #176	; 0xb0
 80071e8:	68f9      	ldr	r1, [r7, #12]
 80071ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	32b0      	adds	r2, #176	; 0xb0
 80071f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7c1b      	ldrb	r3, [r3, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10d      	bne.n	8007226 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800720a:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <USBD_HID_Init+0xc8>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	f003 020f 	and.w	r2, r3, #15
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	4613      	mov	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	440b      	add	r3, r1
 800721e:	3326      	adds	r3, #38	; 0x26
 8007220:	2207      	movs	r2, #7
 8007222:	801a      	strh	r2, [r3, #0]
 8007224:	e00c      	b.n	8007240 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007226:	4b14      	ldr	r3, [pc, #80]	; (8007278 <USBD_HID_Init+0xc8>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	f003 020f 	and.w	r2, r3, #15
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	440b      	add	r3, r1
 800723a:	3326      	adds	r3, #38	; 0x26
 800723c:	220a      	movs	r2, #10
 800723e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007240:	4b0d      	ldr	r3, [pc, #52]	; (8007278 <USBD_HID_Init+0xc8>)
 8007242:	7819      	ldrb	r1, [r3, #0]
 8007244:	2304      	movs	r3, #4
 8007246:	2203      	movs	r2, #3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 ff2f 	bl	80090ac <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800724e:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <USBD_HID_Init+0xc8>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	f003 020f 	and.w	r2, r3, #15
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	440b      	add	r3, r1
 8007262:	3324      	adds	r3, #36	; 0x24
 8007264:	2201      	movs	r2, #1
 8007266:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	200000bf 	.word	0x200000bf

0800727c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8007288:	4b1f      	ldr	r3, [pc, #124]	; (8007308 <USBD_HID_DeInit+0x8c>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 ff4a 	bl	8009128 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8007294:	4b1c      	ldr	r3, [pc, #112]	; (8007308 <USBD_HID_DeInit+0x8c>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	f003 020f 	and.w	r2, r3, #15
 800729c:	6879      	ldr	r1, [r7, #4]
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	440b      	add	r3, r1
 80072a8:	3324      	adds	r3, #36	; 0x24
 80072aa:	2200      	movs	r2, #0
 80072ac:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80072ae:	4b16      	ldr	r3, [pc, #88]	; (8007308 <USBD_HID_DeInit+0x8c>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	f003 020f 	and.w	r2, r3, #15
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	440b      	add	r3, r1
 80072c2:	3326      	adds	r3, #38	; 0x26
 80072c4:	2200      	movs	r2, #0
 80072c6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	32b0      	adds	r2, #176	; 0xb0
 80072d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d011      	beq.n	80072fe <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	32b0      	adds	r2, #176	; 0xb0
 80072e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f002 f8d7 	bl	800949c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	32b0      	adds	r2, #176	; 0xb0
 80072f8:	2100      	movs	r1, #0
 80072fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	200000bf 	.word	0x200000bf

0800730c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	32b0      	adds	r2, #176	; 0xb0
 8007320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007324:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007334:	2303      	movs	r3, #3
 8007336:	e0e8      	b.n	800750a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007340:	2b00      	cmp	r3, #0
 8007342:	d046      	beq.n	80073d2 <USBD_HID_Setup+0xc6>
 8007344:	2b20      	cmp	r3, #32
 8007346:	f040 80d8 	bne.w	80074fa <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	785b      	ldrb	r3, [r3, #1]
 800734e:	3b02      	subs	r3, #2
 8007350:	2b09      	cmp	r3, #9
 8007352:	d836      	bhi.n	80073c2 <USBD_HID_Setup+0xb6>
 8007354:	a201      	add	r2, pc, #4	; (adr r2, 800735c <USBD_HID_Setup+0x50>)
 8007356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735a:	bf00      	nop
 800735c:	080073b3 	.word	0x080073b3
 8007360:	08007393 	.word	0x08007393
 8007364:	080073c3 	.word	0x080073c3
 8007368:	080073c3 	.word	0x080073c3
 800736c:	080073c3 	.word	0x080073c3
 8007370:	080073c3 	.word	0x080073c3
 8007374:	080073c3 	.word	0x080073c3
 8007378:	080073c3 	.word	0x080073c3
 800737c:	080073a1 	.word	0x080073a1
 8007380:	08007385 	.word	0x08007385
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	885b      	ldrh	r3, [r3, #2]
 8007388:	b2db      	uxtb	r3, r3
 800738a:	461a      	mov	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	601a      	str	r2, [r3, #0]
          break;
 8007390:	e01e      	b.n	80073d0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 fb73 	bl	8008a84 <USBD_CtlSendData>
          break;
 800739e:	e017      	b.n	80073d0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	885b      	ldrh	r3, [r3, #2]
 80073a4:	0a1b      	lsrs	r3, r3, #8
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	461a      	mov	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	605a      	str	r2, [r3, #4]
          break;
 80073b0:	e00e      	b.n	80073d0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3304      	adds	r3, #4
 80073b6:	2201      	movs	r2, #1
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 fb62 	bl	8008a84 <USBD_CtlSendData>
          break;
 80073c0:	e006      	b.n	80073d0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 faec 	bl	80089a2 <USBD_CtlError>
          ret = USBD_FAIL;
 80073ca:	2303      	movs	r3, #3
 80073cc:	75fb      	strb	r3, [r7, #23]
          break;
 80073ce:	bf00      	nop
      }
      break;
 80073d0:	e09a      	b.n	8007508 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	2b0b      	cmp	r3, #11
 80073d8:	f200 8086 	bhi.w	80074e8 <USBD_HID_Setup+0x1dc>
 80073dc:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <USBD_HID_Setup+0xd8>)
 80073de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e2:	bf00      	nop
 80073e4:	08007415 	.word	0x08007415
 80073e8:	080074f7 	.word	0x080074f7
 80073ec:	080074e9 	.word	0x080074e9
 80073f0:	080074e9 	.word	0x080074e9
 80073f4:	080074e9 	.word	0x080074e9
 80073f8:	080074e9 	.word	0x080074e9
 80073fc:	0800743f 	.word	0x0800743f
 8007400:	080074e9 	.word	0x080074e9
 8007404:	080074e9 	.word	0x080074e9
 8007408:	080074e9 	.word	0x080074e9
 800740c:	08007497 	.word	0x08007497
 8007410:	080074c1 	.word	0x080074c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b03      	cmp	r3, #3
 800741e:	d107      	bne.n	8007430 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007420:	f107 030a 	add.w	r3, r7, #10
 8007424:	2202      	movs	r2, #2
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f001 fb2b 	bl	8008a84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800742e:	e063      	b.n	80074f8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 fab5 	bl	80089a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007438:	2303      	movs	r3, #3
 800743a:	75fb      	strb	r3, [r7, #23]
          break;
 800743c:	e05c      	b.n	80074f8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	885b      	ldrh	r3, [r3, #2]
 8007442:	0a1b      	lsrs	r3, r3, #8
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b22      	cmp	r3, #34	; 0x22
 8007448:	d108      	bne.n	800745c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	88db      	ldrh	r3, [r3, #6]
 800744e:	2b3f      	cmp	r3, #63	; 0x3f
 8007450:	bf28      	it	cs
 8007452:	233f      	movcs	r3, #63	; 0x3f
 8007454:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007456:	4b2f      	ldr	r3, [pc, #188]	; (8007514 <USBD_HID_Setup+0x208>)
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	e015      	b.n	8007488 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	885b      	ldrh	r3, [r3, #2]
 8007460:	0a1b      	lsrs	r3, r3, #8
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b21      	cmp	r3, #33	; 0x21
 8007466:	d108      	bne.n	800747a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8007468:	4b2b      	ldr	r3, [pc, #172]	; (8007518 <USBD_HID_Setup+0x20c>)
 800746a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	88db      	ldrh	r3, [r3, #6]
 8007470:	2b09      	cmp	r3, #9
 8007472:	bf28      	it	cs
 8007474:	2309      	movcs	r3, #9
 8007476:	82bb      	strh	r3, [r7, #20]
 8007478:	e006      	b.n	8007488 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 fa90 	bl	80089a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007482:	2303      	movs	r3, #3
 8007484:	75fb      	strb	r3, [r7, #23]
            break;
 8007486:	e037      	b.n	80074f8 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007488:	8abb      	ldrh	r3, [r7, #20]
 800748a:	461a      	mov	r2, r3
 800748c:	6939      	ldr	r1, [r7, #16]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 faf8 	bl	8008a84 <USBD_CtlSendData>
          break;
 8007494:	e030      	b.n	80074f8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d107      	bne.n	80074b2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3308      	adds	r3, #8
 80074a6:	2201      	movs	r2, #1
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 faea 	bl	8008a84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074b0:	e022      	b.n	80074f8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 fa74 	bl	80089a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80074ba:	2303      	movs	r3, #3
 80074bc:	75fb      	strb	r3, [r7, #23]
          break;
 80074be:	e01b      	b.n	80074f8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d106      	bne.n	80074da <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	885b      	ldrh	r3, [r3, #2]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	461a      	mov	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074d8:	e00e      	b.n	80074f8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 fa60 	bl	80089a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80074e2:	2303      	movs	r3, #3
 80074e4:	75fb      	strb	r3, [r7, #23]
          break;
 80074e6:	e007      	b.n	80074f8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 fa59 	bl	80089a2 <USBD_CtlError>
          ret = USBD_FAIL;
 80074f0:	2303      	movs	r3, #3
 80074f2:	75fb      	strb	r3, [r7, #23]
          break;
 80074f4:	e000      	b.n	80074f8 <USBD_HID_Setup+0x1ec>
          break;
 80074f6:	bf00      	nop
      }
      break;
 80074f8:	e006      	b.n	8007508 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 fa50 	bl	80089a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007502:	2303      	movs	r3, #3
 8007504:	75fb      	strb	r3, [r7, #23]
      break;
 8007506:	bf00      	nop
  }

  return (uint8_t)ret;
 8007508:	7dfb      	ldrb	r3, [r7, #23]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000080 	.word	0x20000080
 8007518:	20000068 	.word	0x20000068

0800751c <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	4613      	mov	r3, r2
 8007528:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	32b0      	adds	r2, #176	; 0xb0
 8007534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007538:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d101      	bne.n	8007544 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007540:	2303      	movs	r3, #3
 8007542:	e014      	b.n	800756e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b03      	cmp	r3, #3
 800754e:	d10d      	bne.n	800756c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	7b1b      	ldrb	r3, [r3, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d109      	bne.n	800756c <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	2201      	movs	r2, #1
 800755c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800755e:	4b06      	ldr	r3, [pc, #24]	; (8007578 <USBD_HID_SendReport+0x5c>)
 8007560:	7819      	ldrb	r1, [r3, #0]
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f001 fee4 	bl	8009334 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	200000bf 	.word	0x200000bf

0800757c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007584:	2181      	movs	r1, #129	; 0x81
 8007586:	4809      	ldr	r0, [pc, #36]	; (80075ac <USBD_HID_GetFSCfgDesc+0x30>)
 8007588:	f000 fba9 	bl	8007cde <USBD_GetEpDesc>
 800758c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	220a      	movs	r2, #10
 8007598:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2222      	movs	r2, #34	; 0x22
 800759e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80075a0:	4b02      	ldr	r3, [pc, #8]	; (80075ac <USBD_HID_GetFSCfgDesc+0x30>)
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000044 	.word	0x20000044

080075b0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80075b8:	2181      	movs	r1, #129	; 0x81
 80075ba:	4809      	ldr	r0, [pc, #36]	; (80075e0 <USBD_HID_GetHSCfgDesc+0x30>)
 80075bc:	f000 fb8f 	bl	8007cde <USBD_GetEpDesc>
 80075c0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2207      	movs	r2, #7
 80075cc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2222      	movs	r2, #34	; 0x22
 80075d2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80075d4:	4b02      	ldr	r3, [pc, #8]	; (80075e0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000044 	.word	0x20000044

080075e4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80075ec:	2181      	movs	r1, #129	; 0x81
 80075ee:	4809      	ldr	r0, [pc, #36]	; (8007614 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80075f0:	f000 fb75 	bl	8007cde <USBD_GetEpDesc>
 80075f4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	220a      	movs	r2, #10
 8007600:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2222      	movs	r2, #34	; 0x22
 8007606:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007608:	4b02      	ldr	r3, [pc, #8]	; (8007614 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000044 	.word	0x20000044

08007618 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	32b0      	adds	r2, #176	; 0xb0
 800762e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007632:	2200      	movs	r2, #0
 8007634:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	220a      	movs	r2, #10
 8007650:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007652:	4b03      	ldr	r3, [pc, #12]	; (8007660 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	20000074 	.word	0x20000074

08007664 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	e01f      	b.n	80076bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	79fa      	ldrb	r2, [r7, #7]
 80076ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f001 fc79 	bl	8008fa8 <USBD_LL_Init>
 80076b6:	4603      	mov	r3, r0
 80076b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	e025      	b.n	8007728 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	32ae      	adds	r2, #174	; 0xae
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00f      	beq.n	8007718 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	32ae      	adds	r2, #174	; 0xae
 8007702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	f107 020e 	add.w	r2, r7, #14
 800770c:	4610      	mov	r0, r2
 800770e:	4798      	blx	r3
 8007710:	4602      	mov	r2, r0
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 fc85 	bl	8009048 <USBD_LL_Start>
 800773e:	4603      	mov	r3, r0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007750:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007774:	2b00      	cmp	r3, #0
 8007776:	d009      	beq.n	800778c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	78fa      	ldrb	r2, [r7, #3]
 8007782:	4611      	mov	r1, r2
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800778c:	7bfb      	ldrb	r3, [r7, #15]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	460b      	mov	r3, r1
 80077a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	78fa      	ldrb	r2, [r7, #3]
 80077b0:	4611      	mov	r1, r2
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4798      	blx	r3
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80077bc:	2303      	movs	r3, #3
 80077be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	4618      	mov	r0, r3
 80077de:	f001 f8a6 	bl	800892e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80077f0:	461a      	mov	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077fe:	f003 031f 	and.w	r3, r3, #31
 8007802:	2b02      	cmp	r3, #2
 8007804:	d01a      	beq.n	800783c <USBD_LL_SetupStage+0x72>
 8007806:	2b02      	cmp	r3, #2
 8007808:	d822      	bhi.n	8007850 <USBD_LL_SetupStage+0x86>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <USBD_LL_SetupStage+0x4a>
 800780e:	2b01      	cmp	r3, #1
 8007810:	d00a      	beq.n	8007828 <USBD_LL_SetupStage+0x5e>
 8007812:	e01d      	b.n	8007850 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fad3 	bl	8007dc8 <USBD_StdDevReq>
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]
      break;
 8007826:	e020      	b.n	800786a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fb3b 	bl	8007eac <USBD_StdItfReq>
 8007836:	4603      	mov	r3, r0
 8007838:	73fb      	strb	r3, [r7, #15]
      break;
 800783a:	e016      	b.n	800786a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fb9d 	bl	8007f84 <USBD_StdEPReq>
 800784a:	4603      	mov	r3, r0
 800784c:	73fb      	strb	r3, [r7, #15]
      break;
 800784e:	e00c      	b.n	800786a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007856:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800785a:	b2db      	uxtb	r3, r3
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 fc98 	bl	8009194 <USBD_LL_StallEP>
 8007864:	4603      	mov	r3, r0
 8007866:	73fb      	strb	r3, [r7, #15]
      break;
 8007868:	bf00      	nop
  }

  return ret;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	460b      	mov	r3, r1
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007886:	7afb      	ldrb	r3, [r7, #11]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d16e      	bne.n	800796a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007892:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800789a:	2b03      	cmp	r3, #3
 800789c:	f040 8098 	bne.w	80079d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d913      	bls.n	80078d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	689a      	ldr	r2, [r3, #8]
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	1ad2      	subs	r2, r2, r3
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	4293      	cmp	r3, r2
 80078c4:	bf28      	it	cs
 80078c6:	4613      	movcs	r3, r2
 80078c8:	461a      	mov	r2, r3
 80078ca:	6879      	ldr	r1, [r7, #4]
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f001 f905 	bl	8008adc <USBD_CtlContinueRx>
 80078d2:	e07d      	b.n	80079d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078da:	f003 031f 	and.w	r3, r3, #31
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d014      	beq.n	800790c <USBD_LL_DataOutStage+0x98>
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d81d      	bhi.n	8007922 <USBD_LL_DataOutStage+0xae>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <USBD_LL_DataOutStage+0x7c>
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d003      	beq.n	80078f6 <USBD_LL_DataOutStage+0x82>
 80078ee:	e018      	b.n	8007922 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	75bb      	strb	r3, [r7, #22]
            break;
 80078f4:	e018      	b.n	8007928 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	4619      	mov	r1, r3
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f9d2 	bl	8007caa <USBD_CoreFindIF>
 8007906:	4603      	mov	r3, r0
 8007908:	75bb      	strb	r3, [r7, #22]
            break;
 800790a:	e00d      	b.n	8007928 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007912:	b2db      	uxtb	r3, r3
 8007914:	4619      	mov	r1, r3
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 f9d4 	bl	8007cc4 <USBD_CoreFindEP>
 800791c:	4603      	mov	r3, r0
 800791e:	75bb      	strb	r3, [r7, #22]
            break;
 8007920:	e002      	b.n	8007928 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	75bb      	strb	r3, [r7, #22]
            break;
 8007926:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007928:	7dbb      	ldrb	r3, [r7, #22]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d119      	bne.n	8007962 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b03      	cmp	r3, #3
 8007938:	d113      	bne.n	8007962 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800793a:	7dba      	ldrb	r2, [r7, #22]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	32ae      	adds	r2, #174	; 0xae
 8007940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00b      	beq.n	8007962 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800794a:	7dba      	ldrb	r2, [r7, #22]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007952:	7dba      	ldrb	r2, [r7, #22]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	32ae      	adds	r2, #174	; 0xae
 8007958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f001 f8cb 	bl	8008afe <USBD_CtlSendStatus>
 8007968:	e032      	b.n	80079d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800796a:	7afb      	ldrb	r3, [r7, #11]
 800796c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007970:	b2db      	uxtb	r3, r3
 8007972:	4619      	mov	r1, r3
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f9a5 	bl	8007cc4 <USBD_CoreFindEP>
 800797a:	4603      	mov	r3, r0
 800797c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800797e:	7dbb      	ldrb	r3, [r7, #22]
 8007980:	2bff      	cmp	r3, #255	; 0xff
 8007982:	d025      	beq.n	80079d0 <USBD_LL_DataOutStage+0x15c>
 8007984:	7dbb      	ldrb	r3, [r7, #22]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d122      	bne.n	80079d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b03      	cmp	r3, #3
 8007994:	d117      	bne.n	80079c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007996:	7dba      	ldrb	r2, [r7, #22]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	32ae      	adds	r2, #174	; 0xae
 800799c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00f      	beq.n	80079c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80079a6:	7dba      	ldrb	r2, [r7, #22]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80079ae:	7dba      	ldrb	r2, [r7, #22]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	32ae      	adds	r2, #174	; 0xae
 80079b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	7afa      	ldrb	r2, [r7, #11]
 80079bc:	4611      	mov	r1, r2
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	4798      	blx	r3
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	e000      	b.n	80079d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b086      	sub	sp, #24
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	460b      	mov	r3, r1
 80079e4:	607a      	str	r2, [r7, #4]
 80079e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d16f      	bne.n	8007ace <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3314      	adds	r3, #20
 80079f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d15a      	bne.n	8007ab4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	689a      	ldr	r2, [r3, #8]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d914      	bls.n	8007a34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	689a      	ldr	r2, [r3, #8]
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	1ad2      	subs	r2, r2, r3
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f001 f84a 	bl	8008aba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a26:	2300      	movs	r3, #0
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f001 fcb9 	bl	80093a4 <USBD_LL_PrepareReceive>
 8007a32:	e03f      	b.n	8007ab4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d11c      	bne.n	8007a7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d316      	bcc.n	8007a7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d20f      	bcs.n	8007a7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f001 f82b 	bl	8008aba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2100      	movs	r1, #0
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f001 fc96 	bl	80093a4 <USBD_LL_PrepareReceive>
 8007a78:	e01c      	b.n	8007ab4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d10f      	bne.n	8007aa6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d009      	beq.n	8007aa6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aa6:	2180      	movs	r1, #128	; 0x80
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f001 fb73 	bl	8009194 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f001 f838 	bl	8008b24 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d03a      	beq.n	8007b34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f7ff fe42 	bl	8007748 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007acc:	e032      	b.n	8007b34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007ace:	7afb      	ldrb	r3, [r7, #11]
 8007ad0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 f8f3 	bl	8007cc4 <USBD_CoreFindEP>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	2bff      	cmp	r3, #255	; 0xff
 8007ae6:	d025      	beq.n	8007b34 <USBD_LL_DataInStage+0x15a>
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d122      	bne.n	8007b34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d11c      	bne.n	8007b34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007afa:	7dfa      	ldrb	r2, [r7, #23]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	32ae      	adds	r2, #174	; 0xae
 8007b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d014      	beq.n	8007b34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007b0a:	7dfa      	ldrb	r2, [r7, #23]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007b12:	7dfa      	ldrb	r2, [r7, #23]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	32ae      	adds	r2, #174	; 0xae
 8007b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	7afa      	ldrb	r2, [r7, #11]
 8007b20:	4611      	mov	r1, r2
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	4798      	blx	r3
 8007b26:	4603      	mov	r3, r0
 8007b28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007b2a:	7dbb      	ldrb	r3, [r7, #22]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007b30:	7dbb      	ldrb	r3, [r7, #22]
 8007b32:	e000      	b.n	8007b36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d014      	beq.n	8007ba4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00e      	beq.n	8007ba4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	6852      	ldr	r2, [r2, #4]
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	4611      	mov	r1, r2
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ba4:	2340      	movs	r3, #64	; 0x40
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2100      	movs	r1, #0
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f001 fa7e 	bl	80090ac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2240      	movs	r2, #64	; 0x40
 8007bbc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bc0:	2340      	movs	r3, #64	; 0x40
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2180      	movs	r1, #128	; 0x80
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 fa70 	bl	80090ac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2240      	movs	r2, #64	; 0x40
 8007bd6:	621a      	str	r2, [r3, #32]

  return ret;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d006      	beq.n	8007c24 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2204      	movs	r2, #4
 8007c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d106      	bne.n	8007c5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d110      	bne.n	8007ca0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cb6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cd0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b086      	sub	sp, #24
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d920      	bls.n	8007d48 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007d0e:	e013      	b.n	8007d38 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007d10:	f107 030a 	add.w	r3, r7, #10
 8007d14:	4619      	mov	r1, r3
 8007d16:	6978      	ldr	r0, [r7, #20]
 8007d18:	f000 f81b 	bl	8007d52 <USBD_GetNextDesc>
 8007d1c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	785b      	ldrb	r3, [r3, #1]
 8007d22:	2b05      	cmp	r3, #5
 8007d24:	d108      	bne.n	8007d38 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	789b      	ldrb	r3, [r3, #2]
 8007d2e:	78fa      	ldrb	r2, [r7, #3]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d008      	beq.n	8007d46 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007d34:	2300      	movs	r3, #0
 8007d36:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	885b      	ldrh	r3, [r3, #2]
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	897b      	ldrh	r3, [r7, #10]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d8e5      	bhi.n	8007d10 <USBD_GetEpDesc+0x32>
 8007d44:	e000      	b.n	8007d48 <USBD_GetEpDesc+0x6a>
          break;
 8007d46:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007d48:	693b      	ldr	r3, [r7, #16]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b085      	sub	sp, #20
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	881a      	ldrh	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	4413      	add	r3, r2
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	3301      	adds	r3, #1
 8007da2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007daa:	8a3b      	ldrh	r3, [r7, #16]
 8007dac:	021b      	lsls	r3, r3, #8
 8007dae:	b21a      	sxth	r2, r3
 8007db0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	b21b      	sxth	r3, r3
 8007db8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007dba:	89fb      	ldrh	r3, [r7, #14]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dde:	2b40      	cmp	r3, #64	; 0x40
 8007de0:	d005      	beq.n	8007dee <USBD_StdDevReq+0x26>
 8007de2:	2b40      	cmp	r3, #64	; 0x40
 8007de4:	d857      	bhi.n	8007e96 <USBD_StdDevReq+0xce>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00f      	beq.n	8007e0a <USBD_StdDevReq+0x42>
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	d153      	bne.n	8007e96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	32ae      	adds	r2, #174	; 0xae
 8007df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	4798      	blx	r3
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]
      break;
 8007e08:	e04a      	b.n	8007ea0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	2b09      	cmp	r3, #9
 8007e10:	d83b      	bhi.n	8007e8a <USBD_StdDevReq+0xc2>
 8007e12:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <USBD_StdDevReq+0x50>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e6d 	.word	0x08007e6d
 8007e1c:	08007e81 	.word	0x08007e81
 8007e20:	08007e8b 	.word	0x08007e8b
 8007e24:	08007e77 	.word	0x08007e77
 8007e28:	08007e8b 	.word	0x08007e8b
 8007e2c:	08007e4b 	.word	0x08007e4b
 8007e30:	08007e41 	.word	0x08007e41
 8007e34:	08007e8b 	.word	0x08007e8b
 8007e38:	08007e63 	.word	0x08007e63
 8007e3c:	08007e55 	.word	0x08007e55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fa3c 	bl	80082c0 <USBD_GetDescriptor>
          break;
 8007e48:	e024      	b.n	8007e94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fbcb 	bl	80085e8 <USBD_SetAddress>
          break;
 8007e52:	e01f      	b.n	8007e94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fc0a 	bl	8008670 <USBD_SetConfig>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]
          break;
 8007e60:	e018      	b.n	8007e94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e62:	6839      	ldr	r1, [r7, #0]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fcad 	bl	80087c4 <USBD_GetConfig>
          break;
 8007e6a:	e013      	b.n	8007e94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fcde 	bl	8008830 <USBD_GetStatus>
          break;
 8007e74:	e00e      	b.n	8007e94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fd0d 	bl	8008898 <USBD_SetFeature>
          break;
 8007e7e:	e009      	b.n	8007e94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fd31 	bl	80088ea <USBD_ClrFeature>
          break;
 8007e88:	e004      	b.n	8007e94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fd88 	bl	80089a2 <USBD_CtlError>
          break;
 8007e92:	bf00      	nop
      }
      break;
 8007e94:	e004      	b.n	8007ea0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fd82 	bl	80089a2 <USBD_CtlError>
      break;
 8007e9e:	bf00      	nop
  }

  return ret;
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop

08007eac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ec2:	2b40      	cmp	r3, #64	; 0x40
 8007ec4:	d005      	beq.n	8007ed2 <USBD_StdItfReq+0x26>
 8007ec6:	2b40      	cmp	r3, #64	; 0x40
 8007ec8:	d852      	bhi.n	8007f70 <USBD_StdItfReq+0xc4>
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <USBD_StdItfReq+0x26>
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	d14e      	bne.n	8007f70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d840      	bhi.n	8007f62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	889b      	ldrh	r3, [r3, #4]
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d836      	bhi.n	8007f58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	889b      	ldrh	r3, [r3, #4]
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff fed9 	bl	8007caa <USBD_CoreFindIF>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
 8007efe:	2bff      	cmp	r3, #255	; 0xff
 8007f00:	d01d      	beq.n	8007f3e <USBD_StdItfReq+0x92>
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d11a      	bne.n	8007f3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007f08:	7bba      	ldrb	r2, [r7, #14]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	32ae      	adds	r2, #174	; 0xae
 8007f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00f      	beq.n	8007f38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007f18:	7bba      	ldrb	r2, [r7, #14]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f20:	7bba      	ldrb	r2, [r7, #14]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	32ae      	adds	r2, #174	; 0xae
 8007f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	4798      	blx	r3
 8007f32:	4603      	mov	r3, r0
 8007f34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f36:	e004      	b.n	8007f42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f3c:	e001      	b.n	8007f42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	88db      	ldrh	r3, [r3, #6]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d110      	bne.n	8007f6c <USBD_StdItfReq+0xc0>
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10d      	bne.n	8007f6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fdd4 	bl	8008afe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f56:	e009      	b.n	8007f6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fd21 	bl	80089a2 <USBD_CtlError>
          break;
 8007f60:	e004      	b.n	8007f6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fd1c 	bl	80089a2 <USBD_CtlError>
          break;
 8007f6a:	e000      	b.n	8007f6e <USBD_StdItfReq+0xc2>
          break;
 8007f6c:	bf00      	nop
      }
      break;
 8007f6e:	e004      	b.n	8007f7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fd15 	bl	80089a2 <USBD_CtlError>
      break;
 8007f78:	bf00      	nop
  }

  return ret;
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	889b      	ldrh	r3, [r3, #4]
 8007f96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fa0:	2b40      	cmp	r3, #64	; 0x40
 8007fa2:	d007      	beq.n	8007fb4 <USBD_StdEPReq+0x30>
 8007fa4:	2b40      	cmp	r3, #64	; 0x40
 8007fa6:	f200 817f 	bhi.w	80082a8 <USBD_StdEPReq+0x324>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d02a      	beq.n	8008004 <USBD_StdEPReq+0x80>
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	f040 817a 	bne.w	80082a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7ff fe83 	bl	8007cc4 <USBD_CoreFindEP>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fc2:	7b7b      	ldrb	r3, [r7, #13]
 8007fc4:	2bff      	cmp	r3, #255	; 0xff
 8007fc6:	f000 8174 	beq.w	80082b2 <USBD_StdEPReq+0x32e>
 8007fca:	7b7b      	ldrb	r3, [r7, #13]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f040 8170 	bne.w	80082b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007fd2:	7b7a      	ldrb	r2, [r7, #13]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007fda:	7b7a      	ldrb	r2, [r7, #13]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	32ae      	adds	r2, #174	; 0xae
 8007fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 8163 	beq.w	80082b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007fec:	7b7a      	ldrb	r2, [r7, #13]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	32ae      	adds	r2, #174	; 0xae
 8007ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
 8007ffe:	4603      	mov	r3, r0
 8008000:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008002:	e156      	b.n	80082b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	785b      	ldrb	r3, [r3, #1]
 8008008:	2b03      	cmp	r3, #3
 800800a:	d008      	beq.n	800801e <USBD_StdEPReq+0x9a>
 800800c:	2b03      	cmp	r3, #3
 800800e:	f300 8145 	bgt.w	800829c <USBD_StdEPReq+0x318>
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 809b 	beq.w	800814e <USBD_StdEPReq+0x1ca>
 8008018:	2b01      	cmp	r3, #1
 800801a:	d03c      	beq.n	8008096 <USBD_StdEPReq+0x112>
 800801c:	e13e      	b.n	800829c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b02      	cmp	r3, #2
 8008028:	d002      	beq.n	8008030 <USBD_StdEPReq+0xac>
 800802a:	2b03      	cmp	r3, #3
 800802c:	d016      	beq.n	800805c <USBD_StdEPReq+0xd8>
 800802e:	e02c      	b.n	800808a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00d      	beq.n	8008052 <USBD_StdEPReq+0xce>
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	2b80      	cmp	r3, #128	; 0x80
 800803a:	d00a      	beq.n	8008052 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f8a7 	bl	8009194 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008046:	2180      	movs	r1, #128	; 0x80
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f001 f8a3 	bl	8009194 <USBD_LL_StallEP>
 800804e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008050:	e020      	b.n	8008094 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fca4 	bl	80089a2 <USBD_CtlError>
              break;
 800805a:	e01b      	b.n	8008094 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	885b      	ldrh	r3, [r3, #2]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10e      	bne.n	8008082 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00b      	beq.n	8008082 <USBD_StdEPReq+0xfe>
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	2b80      	cmp	r3, #128	; 0x80
 800806e:	d008      	beq.n	8008082 <USBD_StdEPReq+0xfe>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	88db      	ldrh	r3, [r3, #6]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d104      	bne.n	8008082 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f001 f889 	bl	8009194 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fd3b 	bl	8008afe <USBD_CtlSendStatus>

              break;
 8008088:	e004      	b.n	8008094 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fc88 	bl	80089a2 <USBD_CtlError>
              break;
 8008092:	bf00      	nop
          }
          break;
 8008094:	e107      	b.n	80082a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d002      	beq.n	80080a8 <USBD_StdEPReq+0x124>
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d016      	beq.n	80080d4 <USBD_StdEPReq+0x150>
 80080a6:	e04b      	b.n	8008140 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00d      	beq.n	80080ca <USBD_StdEPReq+0x146>
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	2b80      	cmp	r3, #128	; 0x80
 80080b2:	d00a      	beq.n	80080ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f001 f86b 	bl	8009194 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080be:	2180      	movs	r1, #128	; 0x80
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 f867 	bl	8009194 <USBD_LL_StallEP>
 80080c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080c8:	e040      	b.n	800814c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fc68 	bl	80089a2 <USBD_CtlError>
              break;
 80080d2:	e03b      	b.n	800814c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	885b      	ldrh	r3, [r3, #2]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d136      	bne.n	800814a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d004      	beq.n	80080f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 f888 	bl	8009200 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fd04 	bl	8008afe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fde2 	bl	8007cc4 <USBD_CoreFindEP>
 8008100:	4603      	mov	r3, r0
 8008102:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008104:	7b7b      	ldrb	r3, [r7, #13]
 8008106:	2bff      	cmp	r3, #255	; 0xff
 8008108:	d01f      	beq.n	800814a <USBD_StdEPReq+0x1c6>
 800810a:	7b7b      	ldrb	r3, [r7, #13]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d11c      	bne.n	800814a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008110:	7b7a      	ldrb	r2, [r7, #13]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008118:	7b7a      	ldrb	r2, [r7, #13]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	32ae      	adds	r2, #174	; 0xae
 800811e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d010      	beq.n	800814a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008128:	7b7a      	ldrb	r2, [r7, #13]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	32ae      	adds	r2, #174	; 0xae
 800812e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
 800813a:	4603      	mov	r3, r0
 800813c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800813e:	e004      	b.n	800814a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fc2d 	bl	80089a2 <USBD_CtlError>
              break;
 8008148:	e000      	b.n	800814c <USBD_StdEPReq+0x1c8>
              break;
 800814a:	bf00      	nop
          }
          break;
 800814c:	e0ab      	b.n	80082a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b02      	cmp	r3, #2
 8008158:	d002      	beq.n	8008160 <USBD_StdEPReq+0x1dc>
 800815a:	2b03      	cmp	r3, #3
 800815c:	d032      	beq.n	80081c4 <USBD_StdEPReq+0x240>
 800815e:	e097      	b.n	8008290 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <USBD_StdEPReq+0x1f2>
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	2b80      	cmp	r3, #128	; 0x80
 800816a:	d004      	beq.n	8008176 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fc17 	bl	80089a2 <USBD_CtlError>
                break;
 8008174:	e091      	b.n	800829a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008176:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800817a:	2b00      	cmp	r3, #0
 800817c:	da0b      	bge.n	8008196 <USBD_StdEPReq+0x212>
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	3310      	adds	r3, #16
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	3304      	adds	r3, #4
 8008194:	e00b      	b.n	80081ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800819c:	4613      	mov	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	4413      	add	r3, r2
 80081ac:	3304      	adds	r3, #4
 80081ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2202      	movs	r2, #2
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fc61 	bl	8008a84 <USBD_CtlSendData>
              break;
 80081c2:	e06a      	b.n	800829a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	da11      	bge.n	80081f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
 80081ce:	f003 020f 	and.w	r2, r3, #15
 80081d2:	6879      	ldr	r1, [r7, #4]
 80081d4:	4613      	mov	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	440b      	add	r3, r1
 80081de:	3324      	adds	r3, #36	; 0x24
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d117      	bne.n	8008216 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fbda 	bl	80089a2 <USBD_CtlError>
                  break;
 80081ee:	e054      	b.n	800829a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	f003 020f 	and.w	r2, r3, #15
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	4613      	mov	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d104      	bne.n	8008216 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fbc7 	bl	80089a2 <USBD_CtlError>
                  break;
 8008214:	e041      	b.n	800829a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800821a:	2b00      	cmp	r3, #0
 800821c:	da0b      	bge.n	8008236 <USBD_StdEPReq+0x2b2>
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008224:	4613      	mov	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	3310      	adds	r3, #16
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	4413      	add	r3, r2
 8008232:	3304      	adds	r3, #4
 8008234:	e00b      	b.n	800824e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	4413      	add	r3, r2
 800824c:	3304      	adds	r3, #4
 800824e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <USBD_StdEPReq+0x2d8>
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b80      	cmp	r3, #128	; 0x80
 800825a:	d103      	bne.n	8008264 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	e00e      	b.n	8008282 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 ffff 	bl	800926c <USBD_LL_IsStallEP>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2201      	movs	r2, #1
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	e002      	b.n	8008282 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2202      	movs	r2, #2
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fbfb 	bl	8008a84 <USBD_CtlSendData>
              break;
 800828e:	e004      	b.n	800829a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fb85 	bl	80089a2 <USBD_CtlError>
              break;
 8008298:	bf00      	nop
          }
          break;
 800829a:	e004      	b.n	80082a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fb7f 	bl	80089a2 <USBD_CtlError>
          break;
 80082a4:	bf00      	nop
      }
      break;
 80082a6:	e005      	b.n	80082b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fb79 	bl	80089a2 <USBD_CtlError>
      break;
 80082b0:	e000      	b.n	80082b4 <USBD_StdEPReq+0x330>
      break;
 80082b2:	bf00      	nop
  }

  return ret;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
	...

080082c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	885b      	ldrh	r3, [r3, #2]
 80082da:	0a1b      	lsrs	r3, r3, #8
 80082dc:	b29b      	uxth	r3, r3
 80082de:	3b01      	subs	r3, #1
 80082e0:	2b0e      	cmp	r3, #14
 80082e2:	f200 8152 	bhi.w	800858a <USBD_GetDescriptor+0x2ca>
 80082e6:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <USBD_GetDescriptor+0x2c>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	0800835d 	.word	0x0800835d
 80082f0:	08008375 	.word	0x08008375
 80082f4:	080083b5 	.word	0x080083b5
 80082f8:	0800858b 	.word	0x0800858b
 80082fc:	0800858b 	.word	0x0800858b
 8008300:	0800852b 	.word	0x0800852b
 8008304:	08008557 	.word	0x08008557
 8008308:	0800858b 	.word	0x0800858b
 800830c:	0800858b 	.word	0x0800858b
 8008310:	0800858b 	.word	0x0800858b
 8008314:	0800858b 	.word	0x0800858b
 8008318:	0800858b 	.word	0x0800858b
 800831c:	0800858b 	.word	0x0800858b
 8008320:	0800858b 	.word	0x0800858b
 8008324:	08008329 	.word	0x08008329
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7c12      	ldrb	r2, [r2, #16]
 8008340:	f107 0108 	add.w	r1, r7, #8
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
 8008348:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800834a:	e126      	b.n	800859a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fb27 	bl	80089a2 <USBD_CtlError>
        err++;
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	3301      	adds	r3, #1
 8008358:	72fb      	strb	r3, [r7, #11]
      break;
 800835a:	e11e      	b.n	800859a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	7c12      	ldrb	r2, [r2, #16]
 8008368:	f107 0108 	add.w	r1, r7, #8
 800836c:	4610      	mov	r0, r2
 800836e:	4798      	blx	r3
 8008370:	60f8      	str	r0, [r7, #12]
      break;
 8008372:	e112      	b.n	800859a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7c1b      	ldrb	r3, [r3, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10d      	bne.n	8008398 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008384:	f107 0208 	add.w	r2, r7, #8
 8008388:	4610      	mov	r0, r2
 800838a:	4798      	blx	r3
 800838c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3301      	adds	r3, #1
 8008392:	2202      	movs	r2, #2
 8008394:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008396:	e100      	b.n	800859a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	f107 0208 	add.w	r2, r7, #8
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3
 80083a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3301      	adds	r3, #1
 80083ae:	2202      	movs	r2, #2
 80083b0:	701a      	strb	r2, [r3, #0]
      break;
 80083b2:	e0f2      	b.n	800859a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	885b      	ldrh	r3, [r3, #2]
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b05      	cmp	r3, #5
 80083bc:	f200 80ac 	bhi.w	8008518 <USBD_GetDescriptor+0x258>
 80083c0:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <USBD_GetDescriptor+0x108>)
 80083c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c6:	bf00      	nop
 80083c8:	080083e1 	.word	0x080083e1
 80083cc:	08008415 	.word	0x08008415
 80083d0:	08008449 	.word	0x08008449
 80083d4:	0800847d 	.word	0x0800847d
 80083d8:	080084b1 	.word	0x080084b1
 80083dc:	080084e5 	.word	0x080084e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00b      	beq.n	8008404 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	7c12      	ldrb	r2, [r2, #16]
 80083f8:	f107 0108 	add.w	r1, r7, #8
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
 8008400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008402:	e091      	b.n	8008528 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 facb 	bl	80089a2 <USBD_CtlError>
            err++;
 800840c:	7afb      	ldrb	r3, [r7, #11]
 800840e:	3301      	adds	r3, #1
 8008410:	72fb      	strb	r3, [r7, #11]
          break;
 8008412:	e089      	b.n	8008528 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	7c12      	ldrb	r2, [r2, #16]
 800842c:	f107 0108 	add.w	r1, r7, #8
 8008430:	4610      	mov	r0, r2
 8008432:	4798      	blx	r3
 8008434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008436:	e077      	b.n	8008528 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fab1 	bl	80089a2 <USBD_CtlError>
            err++;
 8008440:	7afb      	ldrb	r3, [r7, #11]
 8008442:	3301      	adds	r3, #1
 8008444:	72fb      	strb	r3, [r7, #11]
          break;
 8008446:	e06f      	b.n	8008528 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	7c12      	ldrb	r2, [r2, #16]
 8008460:	f107 0108 	add.w	r1, r7, #8
 8008464:	4610      	mov	r0, r2
 8008466:	4798      	blx	r3
 8008468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800846a:	e05d      	b.n	8008528 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fa97 	bl	80089a2 <USBD_CtlError>
            err++;
 8008474:	7afb      	ldrb	r3, [r7, #11]
 8008476:	3301      	adds	r3, #1
 8008478:	72fb      	strb	r3, [r7, #11]
          break;
 800847a:	e055      	b.n	8008528 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00b      	beq.n	80084a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	7c12      	ldrb	r2, [r2, #16]
 8008494:	f107 0108 	add.w	r1, r7, #8
 8008498:	4610      	mov	r0, r2
 800849a:	4798      	blx	r3
 800849c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800849e:	e043      	b.n	8008528 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fa7d 	bl	80089a2 <USBD_CtlError>
            err++;
 80084a8:	7afb      	ldrb	r3, [r7, #11]
 80084aa:	3301      	adds	r3, #1
 80084ac:	72fb      	strb	r3, [r7, #11]
          break;
 80084ae:	e03b      	b.n	8008528 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00b      	beq.n	80084d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	7c12      	ldrb	r2, [r2, #16]
 80084c8:	f107 0108 	add.w	r1, r7, #8
 80084cc:	4610      	mov	r0, r2
 80084ce:	4798      	blx	r3
 80084d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084d2:	e029      	b.n	8008528 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fa63 	bl	80089a2 <USBD_CtlError>
            err++;
 80084dc:	7afb      	ldrb	r3, [r7, #11]
 80084de:	3301      	adds	r3, #1
 80084e0:	72fb      	strb	r3, [r7, #11]
          break;
 80084e2:	e021      	b.n	8008528 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00b      	beq.n	8008508 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	7c12      	ldrb	r2, [r2, #16]
 80084fc:	f107 0108 	add.w	r1, r7, #8
 8008500:	4610      	mov	r0, r2
 8008502:	4798      	blx	r3
 8008504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008506:	e00f      	b.n	8008528 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fa49 	bl	80089a2 <USBD_CtlError>
            err++;
 8008510:	7afb      	ldrb	r3, [r7, #11]
 8008512:	3301      	adds	r3, #1
 8008514:	72fb      	strb	r3, [r7, #11]
          break;
 8008516:	e007      	b.n	8008528 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fa41 	bl	80089a2 <USBD_CtlError>
          err++;
 8008520:	7afb      	ldrb	r3, [r7, #11]
 8008522:	3301      	adds	r3, #1
 8008524:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008526:	bf00      	nop
      }
      break;
 8008528:	e037      	b.n	800859a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	7c1b      	ldrb	r3, [r3, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d109      	bne.n	8008546 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853a:	f107 0208 	add.w	r2, r7, #8
 800853e:	4610      	mov	r0, r2
 8008540:	4798      	blx	r3
 8008542:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008544:	e029      	b.n	800859a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fa2a 	bl	80089a2 <USBD_CtlError>
        err++;
 800854e:	7afb      	ldrb	r3, [r7, #11]
 8008550:	3301      	adds	r3, #1
 8008552:	72fb      	strb	r3, [r7, #11]
      break;
 8008554:	e021      	b.n	800859a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	7c1b      	ldrb	r3, [r3, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10d      	bne.n	800857a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008566:	f107 0208 	add.w	r2, r7, #8
 800856a:	4610      	mov	r0, r2
 800856c:	4798      	blx	r3
 800856e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	3301      	adds	r3, #1
 8008574:	2207      	movs	r2, #7
 8008576:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008578:	e00f      	b.n	800859a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fa10 	bl	80089a2 <USBD_CtlError>
        err++;
 8008582:	7afb      	ldrb	r3, [r7, #11]
 8008584:	3301      	adds	r3, #1
 8008586:	72fb      	strb	r3, [r7, #11]
      break;
 8008588:	e007      	b.n	800859a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fa08 	bl	80089a2 <USBD_CtlError>
      err++;
 8008592:	7afb      	ldrb	r3, [r7, #11]
 8008594:	3301      	adds	r3, #1
 8008596:	72fb      	strb	r3, [r7, #11]
      break;
 8008598:	bf00      	nop
  }

  if (err != 0U)
 800859a:	7afb      	ldrb	r3, [r7, #11]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d11e      	bne.n	80085de <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	88db      	ldrh	r3, [r3, #6]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d016      	beq.n	80085d6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80085a8:	893b      	ldrh	r3, [r7, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00e      	beq.n	80085cc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	88da      	ldrh	r2, [r3, #6]
 80085b2:	893b      	ldrh	r3, [r7, #8]
 80085b4:	4293      	cmp	r3, r2
 80085b6:	bf28      	it	cs
 80085b8:	4613      	movcs	r3, r2
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085be:	893b      	ldrh	r3, [r7, #8]
 80085c0:	461a      	mov	r2, r3
 80085c2:	68f9      	ldr	r1, [r7, #12]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fa5d 	bl	8008a84 <USBD_CtlSendData>
 80085ca:	e009      	b.n	80085e0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f9e7 	bl	80089a2 <USBD_CtlError>
 80085d4:	e004      	b.n	80085e0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fa91 	bl	8008afe <USBD_CtlSendStatus>
 80085dc:	e000      	b.n	80085e0 <USBD_GetDescriptor+0x320>
    return;
 80085de:	bf00      	nop
  }
}
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop

080085e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	889b      	ldrh	r3, [r3, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d131      	bne.n	800865e <USBD_SetAddress+0x76>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	88db      	ldrh	r3, [r3, #6]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d12d      	bne.n	800865e <USBD_SetAddress+0x76>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	885b      	ldrh	r3, [r3, #2]
 8008606:	2b7f      	cmp	r3, #127	; 0x7f
 8008608:	d829      	bhi.n	800865e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	885b      	ldrh	r3, [r3, #2]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008614:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b03      	cmp	r3, #3
 8008620:	d104      	bne.n	800862c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f9bc 	bl	80089a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800862a:	e01d      	b.n	8008668 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	7bfa      	ldrb	r2, [r7, #15]
 8008630:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fe45 	bl	80092c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa5d 	bl	8008afe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008644:	7bfb      	ldrb	r3, [r7, #15]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d004      	beq.n	8008654 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2202      	movs	r2, #2
 800864e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008652:	e009      	b.n	8008668 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800865c:	e004      	b.n	8008668 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f99e 	bl	80089a2 <USBD_CtlError>
  }
}
 8008666:	bf00      	nop
 8008668:	bf00      	nop
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	885b      	ldrh	r3, [r3, #2]
 8008682:	b2da      	uxtb	r2, r3
 8008684:	4b4e      	ldr	r3, [pc, #312]	; (80087c0 <USBD_SetConfig+0x150>)
 8008686:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008688:	4b4d      	ldr	r3, [pc, #308]	; (80087c0 <USBD_SetConfig+0x150>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d905      	bls.n	800869c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f985 	bl	80089a2 <USBD_CtlError>
    return USBD_FAIL;
 8008698:	2303      	movs	r3, #3
 800869a:	e08c      	b.n	80087b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d002      	beq.n	80086ae <USBD_SetConfig+0x3e>
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d029      	beq.n	8008700 <USBD_SetConfig+0x90>
 80086ac:	e075      	b.n	800879a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80086ae:	4b44      	ldr	r3, [pc, #272]	; (80087c0 <USBD_SetConfig+0x150>)
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d020      	beq.n	80086f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80086b6:	4b42      	ldr	r3, [pc, #264]	; (80087c0 <USBD_SetConfig+0x150>)
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086c0:	4b3f      	ldr	r3, [pc, #252]	; (80087c0 <USBD_SetConfig+0x150>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff f849 	bl	800775e <USBD_SetClassConfig>
 80086cc:	4603      	mov	r3, r0
 80086ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d008      	beq.n	80086e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f962 	bl	80089a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2202      	movs	r2, #2
 80086e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086e6:	e065      	b.n	80087b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fa08 	bl	8008afe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2203      	movs	r2, #3
 80086f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086f6:	e05d      	b.n	80087b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fa00 	bl	8008afe <USBD_CtlSendStatus>
      break;
 80086fe:	e059      	b.n	80087b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008700:	4b2f      	ldr	r3, [pc, #188]	; (80087c0 <USBD_SetConfig+0x150>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d112      	bne.n	800872e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008710:	4b2b      	ldr	r3, [pc, #172]	; (80087c0 <USBD_SetConfig+0x150>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	461a      	mov	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800871a:	4b29      	ldr	r3, [pc, #164]	; (80087c0 <USBD_SetConfig+0x150>)
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff f838 	bl	8007796 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f9e9 	bl	8008afe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800872c:	e042      	b.n	80087b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800872e:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <USBD_SetConfig+0x150>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	429a      	cmp	r2, r3
 800873a:	d02a      	beq.n	8008792 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff f826 	bl	8007796 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800874a:	4b1d      	ldr	r3, [pc, #116]	; (80087c0 <USBD_SetConfig+0x150>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008754:	4b1a      	ldr	r3, [pc, #104]	; (80087c0 <USBD_SetConfig+0x150>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7fe ffff 	bl	800775e <USBD_SetClassConfig>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00f      	beq.n	800878a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f918 	bl	80089a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	b2db      	uxtb	r3, r3
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff f80b 	bl	8007796 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2202      	movs	r2, #2
 8008784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008788:	e014      	b.n	80087b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f9b7 	bl	8008afe <USBD_CtlSendStatus>
      break;
 8008790:	e010      	b.n	80087b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f9b3 	bl	8008afe <USBD_CtlSendStatus>
      break;
 8008798:	e00c      	b.n	80087b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f900 	bl	80089a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087a2:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <USBD_SetConfig+0x150>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7fe fff4 	bl	8007796 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80087ae:	2303      	movs	r3, #3
 80087b0:	73fb      	strb	r3, [r7, #15]
      break;
 80087b2:	bf00      	nop
  }

  return ret;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	200004a4 	.word	0x200004a4

080087c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	88db      	ldrh	r3, [r3, #6]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d004      	beq.n	80087e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f8e2 	bl	80089a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087de:	e023      	b.n	8008828 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	dc02      	bgt.n	80087f2 <USBD_GetConfig+0x2e>
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	dc03      	bgt.n	80087f8 <USBD_GetConfig+0x34>
 80087f0:	e015      	b.n	800881e <USBD_GetConfig+0x5a>
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d00b      	beq.n	800880e <USBD_GetConfig+0x4a>
 80087f6:	e012      	b.n	800881e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	3308      	adds	r3, #8
 8008802:	2201      	movs	r2, #1
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f93c 	bl	8008a84 <USBD_CtlSendData>
        break;
 800880c:	e00c      	b.n	8008828 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	3304      	adds	r3, #4
 8008812:	2201      	movs	r2, #1
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f934 	bl	8008a84 <USBD_CtlSendData>
        break;
 800881c:	e004      	b.n	8008828 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 f8be 	bl	80089a2 <USBD_CtlError>
        break;
 8008826:	bf00      	nop
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008840:	b2db      	uxtb	r3, r3
 8008842:	3b01      	subs	r3, #1
 8008844:	2b02      	cmp	r3, #2
 8008846:	d81e      	bhi.n	8008886 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	88db      	ldrh	r3, [r3, #6]
 800884c:	2b02      	cmp	r3, #2
 800884e:	d004      	beq.n	800885a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f8a5 	bl	80089a2 <USBD_CtlError>
        break;
 8008858:	e01a      	b.n	8008890 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008866:	2b00      	cmp	r3, #0
 8008868:	d005      	beq.n	8008876 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f043 0202 	orr.w	r2, r3, #2
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	330c      	adds	r3, #12
 800887a:	2202      	movs	r2, #2
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f900 	bl	8008a84 <USBD_CtlSendData>
      break;
 8008884:	e004      	b.n	8008890 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f88a 	bl	80089a2 <USBD_CtlError>
      break;
 800888e:	bf00      	nop
  }
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	885b      	ldrh	r3, [r3, #2]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d107      	bne.n	80088ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f923 	bl	8008afe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80088b8:	e013      	b.n	80088e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	885b      	ldrh	r3, [r3, #2]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d10b      	bne.n	80088da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	889b      	ldrh	r3, [r3, #4]
 80088c6:	0a1b      	lsrs	r3, r3, #8
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f913 	bl	8008afe <USBD_CtlSendStatus>
}
 80088d8:	e003      	b.n	80088e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f860 	bl	80089a2 <USBD_CtlError>
}
 80088e2:	bf00      	nop
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	3b01      	subs	r3, #1
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d80b      	bhi.n	800891a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	885b      	ldrh	r3, [r3, #2]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d10c      	bne.n	8008924 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f8f3 	bl	8008afe <USBD_CtlSendStatus>
      }
      break;
 8008918:	e004      	b.n	8008924 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f840 	bl	80089a2 <USBD_CtlError>
      break;
 8008922:	e000      	b.n	8008926 <USBD_ClrFeature+0x3c>
      break;
 8008924:	bf00      	nop
  }
}
 8008926:	bf00      	nop
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	781a      	ldrb	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3301      	adds	r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	781a      	ldrb	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3301      	adds	r3, #1
 8008956:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f7ff fa17 	bl	8007d8c <SWAPBYTE>
 800895e:	4603      	mov	r3, r0
 8008960:	461a      	mov	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3301      	adds	r3, #1
 800896a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3301      	adds	r3, #1
 8008970:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7ff fa0a 	bl	8007d8c <SWAPBYTE>
 8008978:	4603      	mov	r3, r0
 800897a:	461a      	mov	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3301      	adds	r3, #1
 800898a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f7ff f9fd 	bl	8007d8c <SWAPBYTE>
 8008992:	4603      	mov	r3, r0
 8008994:	461a      	mov	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	80da      	strh	r2, [r3, #6]
}
 800899a:	bf00      	nop
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ac:	2180      	movs	r1, #128	; 0x80
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fbf0 	bl	8009194 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80089b4:	2100      	movs	r1, #0
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fbec 	bl	8009194 <USBD_LL_StallEP>
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d036      	beq.n	8008a48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80089de:	6938      	ldr	r0, [r7, #16]
 80089e0:	f000 f836 	bl	8008a50 <USBD_GetLen>
 80089e4:	4603      	mov	r3, r0
 80089e6:	3301      	adds	r3, #1
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	4413      	add	r3, r2
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	7812      	ldrb	r2, [r2, #0]
 80089fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	3301      	adds	r3, #1
 8008a02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	4413      	add	r3, r2
 8008a0a:	2203      	movs	r2, #3
 8008a0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	3301      	adds	r3, #1
 8008a12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a14:	e013      	b.n	8008a3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	7812      	ldrb	r2, [r2, #0]
 8008a20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	3301      	adds	r3, #1
 8008a26:	613b      	str	r3, [r7, #16]
    idx++;
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	4413      	add	r3, r2
 8008a34:	2200      	movs	r2, #0
 8008a36:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e7      	bne.n	8008a16 <USBD_GetString+0x52>
 8008a46:	e000      	b.n	8008a4a <USBD_GetString+0x86>
    return;
 8008a48:	bf00      	nop
  }
}
 8008a4a:	3718      	adds	r7, #24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a60:	e005      	b.n	8008a6e <USBD_GetLen+0x1e>
  {
    len++;
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	3301      	adds	r3, #1
 8008a66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1f5      	bne.n	8008a62 <USBD_GetLen+0x12>
  }

  return len;
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2202      	movs	r2, #2
 8008a94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 fc42 	bl	8009334 <USBD_LL_Transmit>

  return USBD_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	60f8      	str	r0, [r7, #12]
 8008ac2:	60b9      	str	r1, [r7, #8]
 8008ac4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	2100      	movs	r1, #0
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 fc31 	bl	8009334 <USBD_LL_Transmit>

  return USBD_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	2100      	movs	r1, #0
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fc58 	bl	80093a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b082      	sub	sp, #8
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2204      	movs	r2, #4
 8008b0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2200      	movs	r2, #0
 8008b12:	2100      	movs	r1, #0
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fc0d 	bl	8009334 <USBD_LL_Transmit>

  return USBD_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2205      	movs	r2, #5
 8008b30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b34:	2300      	movs	r3, #0
 8008b36:	2200      	movs	r2, #0
 8008b38:	2100      	movs	r1, #0
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fc32 	bl	80093a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b50:	2200      	movs	r2, #0
 8008b52:	490e      	ldr	r1, [pc, #56]	; (8008b8c <MX_USB_DEVICE_Init+0x40>)
 8008b54:	480e      	ldr	r0, [pc, #56]	; (8008b90 <MX_USB_DEVICE_Init+0x44>)
 8008b56:	f7fe fd85 	bl	8007664 <USBD_Init>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b60:	f7f7 ff98 	bl	8000a94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008b64:	490b      	ldr	r1, [pc, #44]	; (8008b94 <MX_USB_DEVICE_Init+0x48>)
 8008b66:	480a      	ldr	r0, [pc, #40]	; (8008b90 <MX_USB_DEVICE_Init+0x44>)
 8008b68:	f7fe fdac 	bl	80076c4 <USBD_RegisterClass>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b72:	f7f7 ff8f 	bl	8000a94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b76:	4806      	ldr	r0, [pc, #24]	; (8008b90 <MX_USB_DEVICE_Init+0x44>)
 8008b78:	f7fe fdda 	bl	8007730 <USBD_Start>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008b82:	f7f7 ff87 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b86:	bf00      	nop
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	200000c0 	.word	0x200000c0
 8008b90:	200004a8 	.word	0x200004a8
 8008b94:	2000000c 	.word	0x2000000c

08008b98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2212      	movs	r2, #18
 8008ba8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008baa:	4b03      	ldr	r3, [pc, #12]	; (8008bb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	200000e0 	.word	0x200000e0

08008bbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	6039      	str	r1, [r7, #0]
 8008bc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2204      	movs	r2, #4
 8008bcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bce:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	20000100 	.word	0x20000100

08008be0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	6039      	str	r1, [r7, #0]
 8008bea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d105      	bne.n	8008bfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	4907      	ldr	r1, [pc, #28]	; (8008c14 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bf6:	4808      	ldr	r0, [pc, #32]	; (8008c18 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bf8:	f7ff fee4 	bl	80089c4 <USBD_GetString>
 8008bfc:	e004      	b.n	8008c08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	4904      	ldr	r1, [pc, #16]	; (8008c14 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c02:	4805      	ldr	r0, [pc, #20]	; (8008c18 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c04:	f7ff fede 	bl	80089c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c08:	4b02      	ldr	r3, [pc, #8]	; (8008c14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20000784 	.word	0x20000784
 8008c18:	08009534 	.word	0x08009534

08008c1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	4603      	mov	r3, r0
 8008c24:	6039      	str	r1, [r7, #0]
 8008c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	4904      	ldr	r1, [pc, #16]	; (8008c3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c2c:	4804      	ldr	r0, [pc, #16]	; (8008c40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c2e:	f7ff fec9 	bl	80089c4 <USBD_GetString>
  return USBD_StrDesc;
 8008c32:	4b02      	ldr	r3, [pc, #8]	; (8008c3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	20000784 	.word	0x20000784
 8008c40:	0800954c 	.word	0x0800954c

08008c44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	6039      	str	r1, [r7, #0]
 8008c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	221a      	movs	r2, #26
 8008c54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c56:	f000 f855 	bl	8008d04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c5a:	4b02      	ldr	r3, [pc, #8]	; (8008c64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000104 	.word	0x20000104

08008c68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	6039      	str	r1, [r7, #0]
 8008c72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c74:	79fb      	ldrb	r3, [r7, #7]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d105      	bne.n	8008c86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	4907      	ldr	r1, [pc, #28]	; (8008c9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c7e:	4808      	ldr	r0, [pc, #32]	; (8008ca0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c80:	f7ff fea0 	bl	80089c4 <USBD_GetString>
 8008c84:	e004      	b.n	8008c90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	4904      	ldr	r1, [pc, #16]	; (8008c9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c8a:	4805      	ldr	r0, [pc, #20]	; (8008ca0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c8c:	f7ff fe9a 	bl	80089c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c90:	4b02      	ldr	r3, [pc, #8]	; (8008c9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000784 	.word	0x20000784
 8008ca0:	08009560 	.word	0x08009560

08008ca4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	6039      	str	r1, [r7, #0]
 8008cae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d105      	bne.n	8008cc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	4907      	ldr	r1, [pc, #28]	; (8008cd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cba:	4808      	ldr	r0, [pc, #32]	; (8008cdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cbc:	f7ff fe82 	bl	80089c4 <USBD_GetString>
 8008cc0:	e004      	b.n	8008ccc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	4904      	ldr	r1, [pc, #16]	; (8008cd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cc6:	4805      	ldr	r0, [pc, #20]	; (8008cdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cc8:	f7ff fe7c 	bl	80089c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ccc:	4b02      	ldr	r3, [pc, #8]	; (8008cd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20000784 	.word	0x20000784
 8008cdc:	0800956c 	.word	0x0800956c

08008ce0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	6039      	str	r1, [r7, #0]
 8008cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	220c      	movs	r2, #12
 8008cf0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008cf2:	4b03      	ldr	r3, [pc, #12]	; (8008d00 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	200000f4 	.word	0x200000f4

08008d04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d0a:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <Get_SerialNum+0x44>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d10:	4b0e      	ldr	r3, [pc, #56]	; (8008d4c <Get_SerialNum+0x48>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d16:	4b0e      	ldr	r3, [pc, #56]	; (8008d50 <Get_SerialNum+0x4c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4413      	add	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d009      	beq.n	8008d3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d2a:	2208      	movs	r2, #8
 8008d2c:	4909      	ldr	r1, [pc, #36]	; (8008d54 <Get_SerialNum+0x50>)
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f000 f814 	bl	8008d5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d34:	2204      	movs	r2, #4
 8008d36:	4908      	ldr	r1, [pc, #32]	; (8008d58 <Get_SerialNum+0x54>)
 8008d38:	68b8      	ldr	r0, [r7, #8]
 8008d3a:	f000 f80f 	bl	8008d5c <IntToUnicode>
  }
}
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	1fff7590 	.word	0x1fff7590
 8008d4c:	1fff7594 	.word	0x1fff7594
 8008d50:	1fff7598 	.word	0x1fff7598
 8008d54:	20000106 	.word	0x20000106
 8008d58:	20000116 	.word	0x20000116

08008d5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	4613      	mov	r3, r2
 8008d68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]
 8008d72:	e027      	b.n	8008dc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	0f1b      	lsrs	r3, r3, #28
 8008d78:	2b09      	cmp	r3, #9
 8008d7a:	d80b      	bhi.n	8008d94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	0f1b      	lsrs	r3, r3, #28
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	4619      	mov	r1, r3
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	440b      	add	r3, r1
 8008d8c:	3230      	adds	r2, #48	; 0x30
 8008d8e:	b2d2      	uxtb	r2, r2
 8008d90:	701a      	strb	r2, [r3, #0]
 8008d92:	e00a      	b.n	8008daa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	0f1b      	lsrs	r3, r3, #28
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	4619      	mov	r1, r3
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	440b      	add	r3, r1
 8008da4:	3237      	adds	r2, #55	; 0x37
 8008da6:	b2d2      	uxtb	r2, r2
 8008da8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	011b      	lsls	r3, r3, #4
 8008dae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	3301      	adds	r3, #1
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	4413      	add	r3, r2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	75fb      	strb	r3, [r7, #23]
 8008dc4:	7dfa      	ldrb	r2, [r7, #23]
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d3d3      	bcc.n	8008d74 <IntToUnicode+0x18>
  }
}
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
	...

08008ddc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b098      	sub	sp, #96	; 0x60
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008de4:	f107 030c 	add.w	r3, r7, #12
 8008de8:	2254      	movs	r2, #84	; 0x54
 8008dea:	2100      	movs	r1, #0
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 fb65 	bl	80094bc <memset>
  if(pcdHandle->Instance==USB)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a15      	ldr	r2, [pc, #84]	; (8008e4c <HAL_PCD_MspInit+0x70>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d122      	bne.n	8008e42 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e00:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008e02:	2300      	movs	r3, #0
 8008e04:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e06:	f107 030c 	add.w	r3, r7, #12
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fa fe9c 	bl	8003b48 <HAL_RCCEx_PeriphCLKConfig>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8008e16:	f7f7 fe3d 	bl	8000a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008e1a:	4b0d      	ldr	r3, [pc, #52]	; (8008e50 <HAL_PCD_MspInit+0x74>)
 8008e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1e:	4a0c      	ldr	r2, [pc, #48]	; (8008e50 <HAL_PCD_MspInit+0x74>)
 8008e20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e24:	6593      	str	r3, [r2, #88]	; 0x58
 8008e26:	4b0a      	ldr	r3, [pc, #40]	; (8008e50 <HAL_PCD_MspInit+0x74>)
 8008e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e2e:	60bb      	str	r3, [r7, #8]
 8008e30:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008e32:	2200      	movs	r2, #0
 8008e34:	2100      	movs	r1, #0
 8008e36:	2043      	movs	r0, #67	; 0x43
 8008e38:	f7f8 f8a3 	bl	8000f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008e3c:	2043      	movs	r0, #67	; 0x43
 8008e3e:	f7f8 f8bc 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008e42:	bf00      	nop
 8008e44:	3760      	adds	r7, #96	; 0x60
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	40006800 	.word	0x40006800
 8008e50:	40021000 	.word	0x40021000

08008e54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008e68:	4619      	mov	r1, r3
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	f7fe fcad 	bl	80077ca <USBD_LL_SetupStage>
}
 8008e70:	bf00      	nop
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8008e8a:	78fa      	ldrb	r2, [r7, #3]
 8008e8c:	6879      	ldr	r1, [r7, #4]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4413      	add	r3, r2
 8008e94:	00db      	lsls	r3, r3, #3
 8008e96:	440b      	add	r3, r1
 8008e98:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	78fb      	ldrb	r3, [r7, #3]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	f7fe fce7 	bl	8007874 <USBD_LL_DataOutStage>
}
 8008ea6:	bf00      	nop
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8008ec0:	78fa      	ldrb	r2, [r7, #3]
 8008ec2:	6879      	ldr	r1, [r7, #4]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	00db      	lsls	r3, r3, #3
 8008ecc:	440b      	add	r3, r1
 8008ece:	333c      	adds	r3, #60	; 0x3c
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	78fb      	ldrb	r3, [r7, #3]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	f7fe fd80 	bl	80079da <USBD_LL_DataInStage>
}
 8008eda:	bf00      	nop
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fe feba 	bl	8007c6a <USBD_LL_SOF>
}
 8008ef6:	bf00      	nop
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f06:	2301      	movs	r3, #1
 8008f08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d001      	beq.n	8008f16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f12:	f7f7 fdbf 	bl	8000a94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008f1c:	7bfa      	ldrb	r2, [r7, #15]
 8008f1e:	4611      	mov	r1, r2
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fe fe5e 	bl	8007be2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fe fe06 	bl	8007b3e <USBD_LL_Reset>
}
 8008f32:	bf00      	nop
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe fe59 	bl	8007c02 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d005      	beq.n	8008f64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f58:	4b04      	ldr	r3, [pc, #16]	; (8008f6c <HAL_PCD_SuspendCallback+0x30>)
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	4a03      	ldr	r2, [pc, #12]	; (8008f6c <HAL_PCD_SuspendCallback+0x30>)
 8008f5e:	f043 0306 	orr.w	r3, r3, #6
 8008f62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f64:	bf00      	nop
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	e000ed00 	.word	0xe000ed00

08008f70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d007      	beq.n	8008f90 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f80:	4b08      	ldr	r3, [pc, #32]	; (8008fa4 <HAL_PCD_ResumeCallback+0x34>)
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	4a07      	ldr	r2, [pc, #28]	; (8008fa4 <HAL_PCD_ResumeCallback+0x34>)
 8008f86:	f023 0306 	bic.w	r3, r3, #6
 8008f8a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008f8c:	f000 fa90 	bl	80094b0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe fe4f 	bl	8007c3a <USBD_LL_Resume>
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	e000ed00 	.word	0xe000ed00

08008fa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008fb0:	f7f9 ff82 	bl	8002eb8 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008fb4:	4a22      	ldr	r2, [pc, #136]	; (8009040 <USBD_LL_Init+0x98>)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a20      	ldr	r2, [pc, #128]	; (8009040 <USBD_LL_Init+0x98>)
 8008fc0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 8008fc4:	4b1e      	ldr	r3, [pc, #120]	; (8009040 <USBD_LL_Init+0x98>)
 8008fc6:	4a1f      	ldr	r2, [pc, #124]	; (8009044 <USBD_LL_Init+0x9c>)
 8008fc8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008fca:	4b1d      	ldr	r3, [pc, #116]	; (8009040 <USBD_LL_Init+0x98>)
 8008fcc:	2208      	movs	r2, #8
 8008fce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008fd0:	4b1b      	ldr	r3, [pc, #108]	; (8009040 <USBD_LL_Init+0x98>)
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fd6:	4b1a      	ldr	r3, [pc, #104]	; (8009040 <USBD_LL_Init+0x98>)
 8008fd8:	2202      	movs	r2, #2
 8008fda:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008fdc:	4b18      	ldr	r3, [pc, #96]	; (8009040 <USBD_LL_Init+0x98>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008fe2:	4b17      	ldr	r3, [pc, #92]	; (8009040 <USBD_LL_Init+0x98>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008fe8:	4b15      	ldr	r3, [pc, #84]	; (8009040 <USBD_LL_Init+0x98>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008fee:	4b14      	ldr	r3, [pc, #80]	; (8009040 <USBD_LL_Init+0x98>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008ff4:	4812      	ldr	r0, [pc, #72]	; (8009040 <USBD_LL_Init+0x98>)
 8008ff6:	f7f8 f995 	bl	8001324 <HAL_PCD_Init>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009000:	f7f7 fd48 	bl	8000a94 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800900a:	2318      	movs	r3, #24
 800900c:	2200      	movs	r2, #0
 800900e:	2100      	movs	r1, #0
 8009010:	f7f9 fe81 	bl	8002d16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800901a:	2358      	movs	r3, #88	; 0x58
 800901c:	2200      	movs	r2, #0
 800901e:	2180      	movs	r1, #128	; 0x80
 8009020:	f7f9 fe79 	bl	8002d16 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800902a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800902e:	2200      	movs	r2, #0
 8009030:	2181      	movs	r1, #129	; 0x81
 8009032:	f7f9 fe70 	bl	8002d16 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	20000984 	.word	0x20000984
 8009044:	40006800 	.word	0x40006800

08009048 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800905e:	4618      	mov	r0, r3
 8009060:	f7f8 fa66 	bl	8001530 <HAL_PCD_Start>
 8009064:	4603      	mov	r3, r0
 8009066:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	2b03      	cmp	r3, #3
 800906c:	d816      	bhi.n	800909c <USBD_LL_Start+0x54>
 800906e:	a201      	add	r2, pc, #4	; (adr r2, 8009074 <USBD_LL_Start+0x2c>)
 8009070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009074:	08009085 	.word	0x08009085
 8009078:	0800908b 	.word	0x0800908b
 800907c:	08009091 	.word	0x08009091
 8009080:	08009097 	.word	0x08009097
    case HAL_OK :
      usb_status = USBD_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	73fb      	strb	r3, [r7, #15]
    break;
 8009088:	e00b      	b.n	80090a2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800908a:	2303      	movs	r3, #3
 800908c:	73fb      	strb	r3, [r7, #15]
    break;
 800908e:	e008      	b.n	80090a2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009090:	2301      	movs	r3, #1
 8009092:	73fb      	strb	r3, [r7, #15]
    break;
 8009094:	e005      	b.n	80090a2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009096:	2303      	movs	r3, #3
 8009098:	73fb      	strb	r3, [r7, #15]
    break;
 800909a:	e002      	b.n	80090a2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800909c:	2303      	movs	r3, #3
 800909e:	73fb      	strb	r3, [r7, #15]
    break;
 80090a0:	bf00      	nop
  }
  return usb_status;
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	4608      	mov	r0, r1
 80090b6:	4611      	mov	r1, r2
 80090b8:	461a      	mov	r2, r3
 80090ba:	4603      	mov	r3, r0
 80090bc:	70fb      	strb	r3, [r7, #3]
 80090be:	460b      	mov	r3, r1
 80090c0:	70bb      	strb	r3, [r7, #2]
 80090c2:	4613      	mov	r3, r2
 80090c4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090d4:	78bb      	ldrb	r3, [r7, #2]
 80090d6:	883a      	ldrh	r2, [r7, #0]
 80090d8:	78f9      	ldrb	r1, [r7, #3]
 80090da:	f7f8 fb97 	bl	800180c <HAL_PCD_EP_Open>
 80090de:	4603      	mov	r3, r0
 80090e0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d817      	bhi.n	8009118 <USBD_LL_OpenEP+0x6c>
 80090e8:	a201      	add	r2, pc, #4	; (adr r2, 80090f0 <USBD_LL_OpenEP+0x44>)
 80090ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ee:	bf00      	nop
 80090f0:	08009101 	.word	0x08009101
 80090f4:	08009107 	.word	0x08009107
 80090f8:	0800910d 	.word	0x0800910d
 80090fc:	08009113 	.word	0x08009113
    case HAL_OK :
      usb_status = USBD_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73fb      	strb	r3, [r7, #15]
    break;
 8009104:	e00b      	b.n	800911e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009106:	2303      	movs	r3, #3
 8009108:	73fb      	strb	r3, [r7, #15]
    break;
 800910a:	e008      	b.n	800911e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800910c:	2301      	movs	r3, #1
 800910e:	73fb      	strb	r3, [r7, #15]
    break;
 8009110:	e005      	b.n	800911e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009112:	2303      	movs	r3, #3
 8009114:	73fb      	strb	r3, [r7, #15]
    break;
 8009116:	e002      	b.n	800911e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009118:	2303      	movs	r3, #3
 800911a:	73fb      	strb	r3, [r7, #15]
    break;
 800911c:	bf00      	nop
  }
  return usb_status;
 800911e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009142:	78fa      	ldrb	r2, [r7, #3]
 8009144:	4611      	mov	r1, r2
 8009146:	4618      	mov	r0, r3
 8009148:	f7f8 fbbd 	bl	80018c6 <HAL_PCD_EP_Close>
 800914c:	4603      	mov	r3, r0
 800914e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009150:	7bbb      	ldrb	r3, [r7, #14]
 8009152:	2b03      	cmp	r3, #3
 8009154:	d816      	bhi.n	8009184 <USBD_LL_CloseEP+0x5c>
 8009156:	a201      	add	r2, pc, #4	; (adr r2, 800915c <USBD_LL_CloseEP+0x34>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	0800916d 	.word	0x0800916d
 8009160:	08009173 	.word	0x08009173
 8009164:	08009179 	.word	0x08009179
 8009168:	0800917f 	.word	0x0800917f
    case HAL_OK :
      usb_status = USBD_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73fb      	strb	r3, [r7, #15]
    break;
 8009170:	e00b      	b.n	800918a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009172:	2303      	movs	r3, #3
 8009174:	73fb      	strb	r3, [r7, #15]
    break;
 8009176:	e008      	b.n	800918a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009178:	2301      	movs	r3, #1
 800917a:	73fb      	strb	r3, [r7, #15]
    break;
 800917c:	e005      	b.n	800918a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800917e:	2303      	movs	r3, #3
 8009180:	73fb      	strb	r3, [r7, #15]
    break;
 8009182:	e002      	b.n	800918a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009184:	2303      	movs	r3, #3
 8009186:	73fb      	strb	r3, [r7, #15]
    break;
 8009188:	bf00      	nop
  }
  return usb_status;
 800918a:	7bfb      	ldrb	r3, [r7, #15]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091ae:	78fa      	ldrb	r2, [r7, #3]
 80091b0:	4611      	mov	r1, r2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f8 fc37 	bl	8001a26 <HAL_PCD_EP_SetStall>
 80091b8:	4603      	mov	r3, r0
 80091ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d816      	bhi.n	80091f0 <USBD_LL_StallEP+0x5c>
 80091c2:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <USBD_LL_StallEP+0x34>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	080091d9 	.word	0x080091d9
 80091cc:	080091df 	.word	0x080091df
 80091d0:	080091e5 	.word	0x080091e5
 80091d4:	080091eb 	.word	0x080091eb
    case HAL_OK :
      usb_status = USBD_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	73fb      	strb	r3, [r7, #15]
    break;
 80091dc:	e00b      	b.n	80091f6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091de:	2303      	movs	r3, #3
 80091e0:	73fb      	strb	r3, [r7, #15]
    break;
 80091e2:	e008      	b.n	80091f6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091e4:	2301      	movs	r3, #1
 80091e6:	73fb      	strb	r3, [r7, #15]
    break;
 80091e8:	e005      	b.n	80091f6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091ea:	2303      	movs	r3, #3
 80091ec:	73fb      	strb	r3, [r7, #15]
    break;
 80091ee:	e002      	b.n	80091f6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80091f0:	2303      	movs	r3, #3
 80091f2:	73fb      	strb	r3, [r7, #15]
    break;
 80091f4:	bf00      	nop
  }
  return usb_status;
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800921a:	78fa      	ldrb	r2, [r7, #3]
 800921c:	4611      	mov	r1, r2
 800921e:	4618      	mov	r0, r3
 8009220:	f7f8 fc61 	bl	8001ae6 <HAL_PCD_EP_ClrStall>
 8009224:	4603      	mov	r3, r0
 8009226:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2b03      	cmp	r3, #3
 800922c:	d816      	bhi.n	800925c <USBD_LL_ClearStallEP+0x5c>
 800922e:	a201      	add	r2, pc, #4	; (adr r2, 8009234 <USBD_LL_ClearStallEP+0x34>)
 8009230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009234:	08009245 	.word	0x08009245
 8009238:	0800924b 	.word	0x0800924b
 800923c:	08009251 	.word	0x08009251
 8009240:	08009257 	.word	0x08009257
    case HAL_OK :
      usb_status = USBD_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]
    break;
 8009248:	e00b      	b.n	8009262 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800924a:	2303      	movs	r3, #3
 800924c:	73fb      	strb	r3, [r7, #15]
    break;
 800924e:	e008      	b.n	8009262 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009250:	2301      	movs	r3, #1
 8009252:	73fb      	strb	r3, [r7, #15]
    break;
 8009254:	e005      	b.n	8009262 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009256:	2303      	movs	r3, #3
 8009258:	73fb      	strb	r3, [r7, #15]
    break;
 800925a:	e002      	b.n	8009262 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800925c:	2303      	movs	r3, #3
 800925e:	73fb      	strb	r3, [r7, #15]
    break;
 8009260:	bf00      	nop
  }
  return usb_status;
 8009262:	7bfb      	ldrb	r3, [r7, #15]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800927e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009284:	2b00      	cmp	r3, #0
 8009286:	da0c      	bge.n	80092a2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800928e:	68f9      	ldr	r1, [r7, #12]
 8009290:	1c5a      	adds	r2, r3, #1
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	440b      	add	r3, r1
 800929c:	3302      	adds	r3, #2
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	e00b      	b.n	80092ba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092a2:	78fb      	ldrb	r3, [r7, #3]
 80092a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092a8:	68f9      	ldr	r1, [r7, #12]
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	440b      	add	r3, r1
 80092b4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80092b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
	...

080092c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092e2:	78fa      	ldrb	r2, [r7, #3]
 80092e4:	4611      	mov	r1, r2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7f8 fa6b 	bl	80017c2 <HAL_PCD_SetAddress>
 80092ec:	4603      	mov	r3, r0
 80092ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d816      	bhi.n	8009324 <USBD_LL_SetUSBAddress+0x5c>
 80092f6:	a201      	add	r2, pc, #4	; (adr r2, 80092fc <USBD_LL_SetUSBAddress+0x34>)
 80092f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fc:	0800930d 	.word	0x0800930d
 8009300:	08009313 	.word	0x08009313
 8009304:	08009319 	.word	0x08009319
 8009308:	0800931f 	.word	0x0800931f
    case HAL_OK :
      usb_status = USBD_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]
    break;
 8009310:	e00b      	b.n	800932a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009312:	2303      	movs	r3, #3
 8009314:	73fb      	strb	r3, [r7, #15]
    break;
 8009316:	e008      	b.n	800932a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009318:	2301      	movs	r3, #1
 800931a:	73fb      	strb	r3, [r7, #15]
    break;
 800931c:	e005      	b.n	800932a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800931e:	2303      	movs	r3, #3
 8009320:	73fb      	strb	r3, [r7, #15]
    break;
 8009322:	e002      	b.n	800932a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009324:	2303      	movs	r3, #3
 8009326:	73fb      	strb	r3, [r7, #15]
    break;
 8009328:	bf00      	nop
  }
  return usb_status;
 800932a:	7bfb      	ldrb	r3, [r7, #15]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	607a      	str	r2, [r7, #4]
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	460b      	mov	r3, r1
 8009342:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009352:	7af9      	ldrb	r1, [r7, #11]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	f7f8 fb2e 	bl	80019b8 <HAL_PCD_EP_Transmit>
 800935c:	4603      	mov	r3, r0
 800935e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009360:	7dbb      	ldrb	r3, [r7, #22]
 8009362:	2b03      	cmp	r3, #3
 8009364:	d816      	bhi.n	8009394 <USBD_LL_Transmit+0x60>
 8009366:	a201      	add	r2, pc, #4	; (adr r2, 800936c <USBD_LL_Transmit+0x38>)
 8009368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936c:	0800937d 	.word	0x0800937d
 8009370:	08009383 	.word	0x08009383
 8009374:	08009389 	.word	0x08009389
 8009378:	0800938f 	.word	0x0800938f
    case HAL_OK :
      usb_status = USBD_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	75fb      	strb	r3, [r7, #23]
    break;
 8009380:	e00b      	b.n	800939a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009382:	2303      	movs	r3, #3
 8009384:	75fb      	strb	r3, [r7, #23]
    break;
 8009386:	e008      	b.n	800939a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009388:	2301      	movs	r3, #1
 800938a:	75fb      	strb	r3, [r7, #23]
    break;
 800938c:	e005      	b.n	800939a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800938e:	2303      	movs	r3, #3
 8009390:	75fb      	strb	r3, [r7, #23]
    break;
 8009392:	e002      	b.n	800939a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009394:	2303      	movs	r3, #3
 8009396:	75fb      	strb	r3, [r7, #23]
    break;
 8009398:	bf00      	nop
  }
  return usb_status;
 800939a:	7dfb      	ldrb	r3, [r7, #23]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	607a      	str	r2, [r7, #4]
 80093ae:	603b      	str	r3, [r7, #0]
 80093b0:	460b      	mov	r3, r1
 80093b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093c2:	7af9      	ldrb	r1, [r7, #11]
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	f7f8 fac5 	bl	8001956 <HAL_PCD_EP_Receive>
 80093cc:	4603      	mov	r3, r0
 80093ce:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80093d0:	7dbb      	ldrb	r3, [r7, #22]
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d816      	bhi.n	8009404 <USBD_LL_PrepareReceive+0x60>
 80093d6:	a201      	add	r2, pc, #4	; (adr r2, 80093dc <USBD_LL_PrepareReceive+0x38>)
 80093d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093dc:	080093ed 	.word	0x080093ed
 80093e0:	080093f3 	.word	0x080093f3
 80093e4:	080093f9 	.word	0x080093f9
 80093e8:	080093ff 	.word	0x080093ff
    case HAL_OK :
      usb_status = USBD_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	75fb      	strb	r3, [r7, #23]
    break;
 80093f0:	e00b      	b.n	800940a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093f2:	2303      	movs	r3, #3
 80093f4:	75fb      	strb	r3, [r7, #23]
    break;
 80093f6:	e008      	b.n	800940a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093f8:	2301      	movs	r3, #1
 80093fa:	75fb      	strb	r3, [r7, #23]
    break;
 80093fc:	e005      	b.n	800940a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093fe:	2303      	movs	r3, #3
 8009400:	75fb      	strb	r3, [r7, #23]
    break;
 8009402:	e002      	b.n	800940a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009404:	2303      	movs	r3, #3
 8009406:	75fb      	strb	r3, [r7, #23]
    break;
 8009408:	bf00      	nop
  }
  return usb_status;
 800940a:	7dfb      	ldrb	r3, [r7, #23]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <HAL_PCDEx_LPM_Callback+0x18>
 8009426:	2b01      	cmp	r3, #1
 8009428:	d013      	beq.n	8009452 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800942a:	e023      	b.n	8009474 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d007      	beq.n	8009444 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009434:	f000 f83c 	bl	80094b0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009438:	4b10      	ldr	r3, [pc, #64]	; (800947c <HAL_PCDEx_LPM_Callback+0x68>)
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	4a0f      	ldr	r2, [pc, #60]	; (800947c <HAL_PCDEx_LPM_Callback+0x68>)
 800943e:	f023 0306 	bic.w	r3, r3, #6
 8009442:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe fbf5 	bl	8007c3a <USBD_LL_Resume>
    break;
 8009450:	e010      	b.n	8009474 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8009458:	4618      	mov	r0, r3
 800945a:	f7fe fbd2 	bl	8007c02 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d005      	beq.n	8009472 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009466:	4b05      	ldr	r3, [pc, #20]	; (800947c <HAL_PCDEx_LPM_Callback+0x68>)
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	4a04      	ldr	r2, [pc, #16]	; (800947c <HAL_PCDEx_LPM_Callback+0x68>)
 800946c:	f043 0306 	orr.w	r3, r3, #6
 8009470:	6113      	str	r3, [r2, #16]
    break;
 8009472:	bf00      	nop
}
 8009474:	bf00      	nop
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	e000ed00 	.word	0xe000ed00

08009480 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009488:	4b03      	ldr	r3, [pc, #12]	; (8009498 <USBD_static_malloc+0x18>)
}
 800948a:	4618      	mov	r0, r3
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20000c7c 	.word	0x20000c7c

0800949c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]

}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80094b4:	f7f7 fa04 	bl	80008c0 <SystemClock_Config>
}
 80094b8:	bf00      	nop
 80094ba:	bd80      	pop	{r7, pc}

080094bc <memset>:
 80094bc:	4402      	add	r2, r0
 80094be:	4603      	mov	r3, r0
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d100      	bne.n	80094c6 <memset+0xa>
 80094c4:	4770      	bx	lr
 80094c6:	f803 1b01 	strb.w	r1, [r3], #1
 80094ca:	e7f9      	b.n	80094c0 <memset+0x4>

080094cc <__libc_init_array>:
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	4d0d      	ldr	r5, [pc, #52]	; (8009504 <__libc_init_array+0x38>)
 80094d0:	4c0d      	ldr	r4, [pc, #52]	; (8009508 <__libc_init_array+0x3c>)
 80094d2:	1b64      	subs	r4, r4, r5
 80094d4:	10a4      	asrs	r4, r4, #2
 80094d6:	2600      	movs	r6, #0
 80094d8:	42a6      	cmp	r6, r4
 80094da:	d109      	bne.n	80094f0 <__libc_init_array+0x24>
 80094dc:	4d0b      	ldr	r5, [pc, #44]	; (800950c <__libc_init_array+0x40>)
 80094de:	4c0c      	ldr	r4, [pc, #48]	; (8009510 <__libc_init_array+0x44>)
 80094e0:	f000 f818 	bl	8009514 <_init>
 80094e4:	1b64      	subs	r4, r4, r5
 80094e6:	10a4      	asrs	r4, r4, #2
 80094e8:	2600      	movs	r6, #0
 80094ea:	42a6      	cmp	r6, r4
 80094ec:	d105      	bne.n	80094fa <__libc_init_array+0x2e>
 80094ee:	bd70      	pop	{r4, r5, r6, pc}
 80094f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f4:	4798      	blx	r3
 80094f6:	3601      	adds	r6, #1
 80094f8:	e7ee      	b.n	80094d8 <__libc_init_array+0xc>
 80094fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80094fe:	4798      	blx	r3
 8009500:	3601      	adds	r6, #1
 8009502:	e7f2      	b.n	80094ea <__libc_init_array+0x1e>
 8009504:	080095cc 	.word	0x080095cc
 8009508:	080095cc 	.word	0x080095cc
 800950c:	080095cc 	.word	0x080095cc
 8009510:	080095d0 	.word	0x080095d0

08009514 <_init>:
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	bf00      	nop
 8009518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951a:	bc08      	pop	{r3}
 800951c:	469e      	mov	lr, r3
 800951e:	4770      	bx	lr

08009520 <_fini>:
 8009520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009522:	bf00      	nop
 8009524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009526:	bc08      	pop	{r3}
 8009528:	469e      	mov	lr, r3
 800952a:	4770      	bx	lr
